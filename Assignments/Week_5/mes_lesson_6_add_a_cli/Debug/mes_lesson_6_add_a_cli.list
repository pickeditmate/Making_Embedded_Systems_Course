
mes_lesson_6_add_a_cli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b764  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  0800b8a8  0800b8a8  0001b8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c0dc  0800c0dc  0001c0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c0e4  0800c0e4  0001c0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c0e8  0800c0e8  0001c0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000004  0800c0ec  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004c8  200001e8  0800c2d0  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006b0  0800c2d0  000206b0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000171a6  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000031ec  00000000  00000000  000373be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001630  00000000  00000000  0003a5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014f8  00000000  00000000  0003bbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000238a0  00000000  00000000  0003d0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000152dc  00000000  00000000  00060978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000db265  00000000  00000000  00075c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00150eb9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000072b8  00000000  00000000  00150f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         00000054  00000000  00000000  001581c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000ac  00000000  00000000  00158218  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b88c 	.word	0x0800b88c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	0800b88c 	.word	0x0800b88c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f000 b9aa 	b.w	8000fa4 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781a      	ldrb	r2, [r3, #0]
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	440b      	add	r3, r1
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d114      	bne.n	8000ff8 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	60bb      	str	r3, [r7, #8]
		i++;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 8000fd8:	e00e      	b.n	8000ff8 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	440b      	add	r3, r1
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d001      	beq.n	8000ff2 <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
		}
		i++;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d11a      	bne.n	8001034 <ConsoleCommandMatch+0x8c>
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2b09      	cmp	r3, #9
 8001002:	d817      	bhi.n	8001034 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 800100c:	2b20      	cmp	r3, #32
 800100e:	d011      	beq.n	8001034 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8001018:	2b0a      	cmp	r3, #10
 800101a:	d00b      	beq.n	8001034 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4413      	add	r3, r2
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b0d      	cmp	r3, #13
 8001026:	d005      	beq.n	8001034 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1d2      	bne.n	8000fda <ConsoleCommandMatch+0x32>
	}

	return result;
 8001034:	68bb      	ldr	r3, [r7, #8]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 8001042:	b480      	push	{r7}
 8001044:	b087      	sub	sp, #28
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 800105a:	e00d      	b.n	8001078 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	441a      	add	r2, r3
 8001062:	68f9      	ldr	r1, [r7, #12]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	440b      	add	r3, r1
 8001068:	7812      	ldrb	r2, [r2, #0]
 800106a:	701a      	strb	r2, [r3, #0]
		i++;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	3301      	adds	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3301      	adds	r3, #1
 8001076:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	429a      	cmp	r2, r3
 800107e:	d3ed      	bcc.n	800105c <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8001080:	e007      	b.n	8001092 <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	4413      	add	r3, r2
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3301      	adds	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	2bff      	cmp	r3, #255	; 0xff
 8001096:	d9f4      	bls.n	8001082 <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8001098:	693b      	ldr	r3, [r7, #16]
}
 800109a:	4618      	mov	r0, r3
 800109c:	371c      	adds	r7, #28
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010b8:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80010ba:	e002      	b.n	80010c2 <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3301      	adds	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b0d      	cmp	r3, #13
 80010cc:	d009      	beq.n	80010e2 <ConsoleCommandEndline+0x3c>
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b0a      	cmp	r3, #10
 80010d8:	d003      	beq.n	80010e2 <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d3ec      	bcc.n	80010bc <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d201      	bcs.n	80010ee <ConsoleCommandEndline+0x48>
	{
		result = i;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80010ee:	68bb      	ldr	r3, [r7, #8]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8001102:	f000 fbb1 	bl	8001868 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Consolinator, your gateway to testing code and hardware.");	
 8001106:	480f      	ldr	r0, [pc, #60]	; (8001144 <ConsoleInit+0x48>)
 8001108:	f000 fbe4 	bl	80018d4 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800110c:	480e      	ldr	r0, [pc, #56]	; (8001148 <ConsoleInit+0x4c>)
 800110e:	f000 fbe1 	bl	80018d4 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8001112:	480e      	ldr	r0, [pc, #56]	; (800114c <ConsoleInit+0x50>)
 8001114:	f000 fbde 	bl	80018d4 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <ConsoleInit+0x54>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	e007      	b.n	8001134 <ConsoleInit+0x38>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <ConsoleInit+0x58>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3301      	adds	r3, #1
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2bff      	cmp	r3, #255	; 0xff
 8001138:	d9f4      	bls.n	8001124 <ConsoleInit+0x28>
	}

}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	0800b8a8 	.word	0x0800b8a8
 8001148:	0800b8f0 	.word	0x0800b8f0
 800114c:	0800b8f4 	.word	0x0800b8f4
 8001150:	20000304 	.word	0x20000304
 8001154:	20000204 	.word	0x20000204

08001158 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800115e:	4b56      	ldr	r3, [pc, #344]	; (80012b8 <ConsoleProcess+0x160>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a56      	ldr	r2, [pc, #344]	; (80012bc <ConsoleProcess+0x164>)
 8001164:	1898      	adds	r0, r3, r2
 8001166:	4b54      	ldr	r3, [pc, #336]	; (80012b8 <ConsoleProcess+0x160>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800116e:	463a      	mov	r2, r7
 8001170:	4619      	mov	r1, r3
 8001172:	f000 fb86 	bl	8001882 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d104      	bne.n	8001186 <ConsoleProcess+0x2e>
 800117c:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <ConsoleProcess+0x168>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 8095 	beq.w	80012b0 <ConsoleProcess+0x158>
	{
		mReceiveBufferNeedsChecking = false;
 8001186:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <ConsoleProcess+0x168>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 800118c:	4b4a      	ldr	r3, [pc, #296]	; (80012b8 <ConsoleProcess+0x160>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4413      	add	r3, r2
 8001194:	4a48      	ldr	r2, [pc, #288]	; (80012b8 <ConsoleProcess+0x160>)
 8001196:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8001198:	4b47      	ldr	r3, [pc, #284]	; (80012b8 <ConsoleProcess+0x160>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	4847      	ldr	r0, [pc, #284]	; (80012bc <ConsoleProcess+0x164>)
 80011a0:	f7ff ff81 	bl	80010a6 <ConsoleCommandEndline>
 80011a4:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f2c0 8081 	blt.w	80012b0 <ConsoleProcess+0x158>
		{
			ConsoleIoSendString(STR_ENDLINE);
 80011ae:	4845      	ldr	r0, [pc, #276]	; (80012c4 <ConsoleProcess+0x16c>)
 80011b0:	f000 fb90 	bl	80018d4 <ConsoleIoSendString>
			commandTable = ConsoleCommandsGetTable();
 80011b4:	f000 fb28 	bl	8001808 <ConsoleCommandsGetTable>
 80011b8:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c2:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80011c4:	e03d      	b.n	8001242 <ConsoleProcess+0xea>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4613      	mov	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4413      	add	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	461a      	mov	r2, r3
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	4413      	add	r3, r2
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4938      	ldr	r1, [pc, #224]	; (80012bc <ConsoleProcess+0x164>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fee4 	bl	8000fa8 <ConsoleCommandMatch>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d02a      	beq.n	800123c <ConsoleProcess+0xe4>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	4613      	mov	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4413      	add	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	461a      	mov	r2, r3
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	4413      	add	r3, r2
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4830      	ldr	r0, [pc, #192]	; (80012bc <ConsoleProcess+0x164>)
 80011fa:	4798      	blx	r3
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d017      	beq.n	8001236 <ConsoleProcess+0xde>
					{
						ConsoleIoSendString("Error: ");
 8001206:	4830      	ldr	r0, [pc, #192]	; (80012c8 <ConsoleProcess+0x170>)
 8001208:	f000 fb64 	bl	80018d4 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 800120c:	482b      	ldr	r0, [pc, #172]	; (80012bc <ConsoleProcess+0x164>)
 800120e:	f000 fb61 	bl	80018d4 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 8001212:	482e      	ldr	r0, [pc, #184]	; (80012cc <ConsoleProcess+0x174>)
 8001214:	f000 fb5e 	bl	80018d4 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4413      	add	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	461a      	mov	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4413      	add	r3, r2
 8001228:	3308      	adds	r3, #8
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fb52 	bl	80018d4 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8001230:	4824      	ldr	r0, [pc, #144]	; (80012c4 <ConsoleProcess+0x16c>)
 8001232:	f000 fb4f 	bl	80018d4 <ConsoleIoSendString>

					}
					found = cmdIndex;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	e002      	b.n	8001242 <ConsoleProcess+0xea>
				}
				else
				{
					cmdIndex++;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3301      	adds	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4613      	mov	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4413      	add	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	461a      	mov	r2, r3
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <ConsoleProcess+0x108>
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800125e:	d0b2      	beq.n	80011c6 <ConsoleProcess+0x6e>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00d      	beq.n	8001282 <ConsoleProcess+0x12a>
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800126c:	d109      	bne.n	8001282 <ConsoleProcess+0x12a>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <ConsoleProcess+0x160>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d905      	bls.n	8001282 <ConsoleProcess+0x12a>
				{
					ConsoleIoSendString("Command not found.");
 8001276:	4816      	ldr	r0, [pc, #88]	; (80012d0 <ConsoleProcess+0x178>)
 8001278:	f000 fb2c 	bl	80018d4 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 800127c:	4811      	ldr	r0, [pc, #68]	; (80012c4 <ConsoleProcess+0x16c>)
 800127e:	f000 fb29 	bl	80018d4 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <ConsoleProcess+0x160>)
 8001284:	6819      	ldr	r1, [r3, #0]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3301      	adds	r3, #1
 800128a:	461a      	mov	r2, r3
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <ConsoleProcess+0x164>)
 800128e:	f7ff fed8 	bl	8001042 <ConsoleResetBuffer>
 8001292:	4603      	mov	r3, r0
 8001294:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <ConsoleProcess+0x160>)
 8001296:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <ConsoleProcess+0x160>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	bf14      	ite	ne
 80012a0:	2301      	movne	r3, #1
 80012a2:	2300      	moveq	r3, #0
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <ConsoleProcess+0x168>)
 80012a8:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 80012aa:	480a      	ldr	r0, [pc, #40]	; (80012d4 <ConsoleProcess+0x17c>)
 80012ac:	f000 fb12 	bl	80018d4 <ConsoleIoSendString>
		}
	}
}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000304 	.word	0x20000304
 80012bc:	20000204 	.word	0x20000204
 80012c0:	20000308 	.word	0x20000308
 80012c4:	0800b8f0 	.word	0x0800b8f0
 80012c8:	0800b8f8 	.word	0x0800b8f8
 80012cc:	0800b900 	.word	0x0800b900
 80012d0:	0800b908 	.word	0x0800b908
 80012d4:	0800b8f4 	.word	0x0800b8f4

080012d8 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	460b      	mov	r3, r1
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80012ee:	2300      	movs	r3, #0
 80012f0:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80012f2:	e00b      	b.n	800130c <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	4413      	add	r3, r2
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b20      	cmp	r3, #32
 80012fe:	d102      	bne.n	8001306 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	3301      	adds	r3, #1
 8001304:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3301      	adds	r3, #1
 800130a:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 800130c:	7afb      	ldrb	r3, [r7, #11]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	429a      	cmp	r2, r3
 8001312:	d002      	beq.n	800131a <ConsoleParamFindN+0x42>
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	2bff      	cmp	r3, #255	; 0xff
 8001318:	d9ec      	bls.n	80012f4 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001320:	d102      	bne.n	8001328 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 8001322:	2310      	movs	r3, #16
 8001324:	75fb      	strb	r3, [r7, #23]
 8001326:	e002      	b.n	800132e <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69fa      	ldr	r2, [r7, #28]
 800132c:	601a      	str	r2, [r3, #0]
	}
	return result;
 800132e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3724      	adds	r7, #36	; 0x24
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	460b      	mov	r3, r1
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 800134e:	f107 021c 	add.w	r2, r7, #28
 8001352:	7afb      	ldrb	r3, [r7, #11]
 8001354:	4619      	mov	r1, r3
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f7ff ffbe 	bl	80012d8 <ConsoleParamFindN>
 800135c:	4603      	mov	r3, r0
 800135e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	4413      	add	r3, r2
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8001376:	e011      	b.n	800139c <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8001378:	f107 0214 	add.w	r2, r7, #20
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	4413      	add	r3, r2
 8001380:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001384:	701a      	strb	r2, [r3, #0]
		i++;
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	3301      	adds	r3, #1
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	4413      	add	r3, r2
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800139c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013a0:	2b0a      	cmp	r3, #10
 80013a2:	d00a      	beq.n	80013ba <ConsoleReceiveParamInt16+0x7e>
 80013a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013a8:	2b0d      	cmp	r3, #13
 80013aa:	d006      	beq.n	80013ba <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 80013ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013b0:	2b20      	cmp	r3, #32
 80013b2:	d002      	beq.n	80013ba <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	2b07      	cmp	r3, #7
 80013b8:	d9de      	bls.n	8001378 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d102      	bne.n	80013c6 <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 80013c0:	2310      	movs	r3, #16
 80013c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80013c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10e      	bne.n	80013ec <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80013ce:	f107 0214 	add.w	r2, r7, #20
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	4413      	add	r3, r2
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4618      	mov	r0, r3
 80013e0:	f005 fcaa 	bl	8006d38 <atoi>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80013ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3728      	adds	r7, #40	; 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	460b      	mov	r3, r1
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 800140e:	f107 0218 	add.w	r2, r7, #24
 8001412:	7afb      	ldrb	r3, [r7, #11]
 8001414:	4619      	mov	r1, r3
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f7ff ff5e 	bl	80012d8 <ConsoleParamFindN>
 800141c:	4603      	mov	r3, r0
 800141e:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8001420:	7ffb      	ldrb	r3, [r7, #31]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d12c      	bne.n	8001480 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	e01e      	b.n	800146a <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 800142c:	7ffb      	ldrb	r3, [r7, #31]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10d      	bne.n	800144e <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	4413      	add	r3, r2
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	f107 0217 	add.w	r2, r7, #23
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f000 f8c5 	bl	80015d4 <ConsoleUtilHexCharToInt>
 800144a:	4603      	mov	r3, r0
 800144c:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 800144e:	7ffb      	ldrb	r3, [r7, #31]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d107      	bne.n	8001464 <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8001454:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 800145a:	7dfb      	ldrb	r3, [r7, #23]
 800145c:	b29a      	uxth	r2, r3
 800145e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001460:	4413      	add	r3, r2
 8001462:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	3301      	adds	r3, #1
 8001468:	623b      	str	r3, [r7, #32]
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	2b03      	cmp	r3, #3
 800146e:	d9dd      	bls.n	800142c <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8001470:	7ffb      	ldrb	r3, [r7, #31]
 8001472:	2b11      	cmp	r3, #17
 8001474:	d101      	bne.n	800147a <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8001476:	2300      	movs	r3, #0
 8001478:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800147e:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8001480:	7ffb      	ldrb	r3, [r7, #31]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8001494:	2300      	movs	r3, #0
 8001496:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	e01b      	b.n	80014d6 <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 800149e:	7cfb      	ldrb	r3, [r7, #19]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d115      	bne.n	80014d0 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 80014a4:	88fa      	ldrh	r2, [r7, #6]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f1c3 0303 	rsb	r3, r3, #3
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	fa42 f303 	asr.w	r3, r2, r3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f003 030f 	and.w	r3, r3, #15
 80014b8:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 80014ba:	f107 020c 	add.w	r2, r7, #12
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	441a      	add	r2, r3
 80014c2:	7cbb      	ldrb	r3, [r7, #18]
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f8c5 	bl	8001656 <ConsoleUtilsIntToHexChar>
 80014cc:	4603      	mov	r3, r0
 80014ce:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3301      	adds	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d9e0      	bls.n	800149e <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 80014dc:	f107 020c 	add.w	r2, r7, #12
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	4413      	add	r3, r2
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 f9f1 	bl	80018d4 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8001508:	2300      	movs	r3, #0
 800150a:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 800150c:	2301      	movs	r3, #1
 800150e:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	da07      	bge.n	8001526 <smallItoa+0x2a>
		isNegative = true;
 8001516:	2301      	movs	r3, #1
 8001518:	77fb      	strb	r3, [r7, #31]
		in = -in;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	425b      	negs	r3, r3
 800151e:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 800152a:	e007      	b.n	800153c <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	fb92 f3f3 	sdiv	r3, r2, r3
 8001534:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	fb92 f3f3 	sdiv	r3, r2, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f1      	bne.n	800152c <smallItoa+0x30>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	4413      	add	r3, r2
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3b01      	subs	r3, #1
 8001556:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	fb93 f2f2 	sdiv	r2, r3, r2
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	fb01 f202 	mul.w	r2, r1, r2
 800156a:	1a9b      	subs	r3, r3, r2
 800156c:	b2da      	uxtb	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	440b      	add	r3, r1
 8001574:	3230      	adds	r2, #48	; 0x30
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001582:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	1e5a      	subs	r2, r3, #1
 8001588:	617a      	str	r2, [r7, #20]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1e6      	bne.n	800155c <smallItoa+0x60>

	if (isNegative) {
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <smallItoa+0x9e>
		*(outBuffer) = '-';
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	222d      	movs	r2, #45	; 0x2d
 8001598:	701a      	strb	r2, [r3, #0]
	}
}
 800159a:	bf00      	nop
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 80015b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b4:	f107 0108 	add.w	r1, r7, #8
 80015b8:	220a      	movs	r2, #10
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ff9e 	bl	80014fc <smallItoa>
	ConsoleIoSendString(out);
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 f985 	bl	80018d4 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b2f      	cmp	r3, #47	; 0x2f
 80015e8:	d908      	bls.n	80015fc <ConsoleUtilHexCharToInt+0x28>
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	2b39      	cmp	r3, #57	; 0x39
 80015ee:	d805      	bhi.n	80015fc <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	3b30      	subs	r3, #48	; 0x30
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	e025      	b.n	8001648 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	2b40      	cmp	r3, #64	; 0x40
 8001600:	d908      	bls.n	8001614 <ConsoleUtilHexCharToInt+0x40>
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	2b46      	cmp	r3, #70	; 0x46
 8001606:	d805      	bhi.n	8001614 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	3b37      	subs	r3, #55	; 0x37
 800160c:	b2da      	uxtb	r2, r3
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	e019      	b.n	8001648 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	2b60      	cmp	r3, #96	; 0x60
 8001618:	d908      	bls.n	800162c <ConsoleUtilHexCharToInt+0x58>
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	2b66      	cmp	r3, #102	; 0x66
 800161e:	d805      	bhi.n	800162c <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	3b57      	subs	r3, #87	; 0x57
 8001624:	b2da      	uxtb	r2, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	701a      	strb	r2, [r3, #0]
 800162a:	e00d      	b.n	8001648 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	2b0a      	cmp	r3, #10
 8001630:	d105      	bne.n	800163e <ConsoleUtilHexCharToInt+0x6a>
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	2b0d      	cmp	r3, #13
 8001636:	d102      	bne.n	800163e <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	2b20      	cmp	r3, #32
 800163c:	d102      	bne.n	8001644 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 800163e:	2311      	movs	r3, #17
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e001      	b.n	8001648 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8001644:	2310      	movs	r3, #16
 8001646:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	6039      	str	r1, [r7, #0]
 8001660:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8001662:	2300      	movs	r3, #0
 8001664:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	2b09      	cmp	r3, #9
 800166a:	d805      	bhi.n	8001678 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	3330      	adds	r3, #48	; 0x30
 8001670:	b2da      	uxtb	r2, r3
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e00d      	b.n	8001694 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	2b09      	cmp	r3, #9
 800167c:	d908      	bls.n	8001690 <ConsoleUtilsIntToHexChar+0x3a>
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d805      	bhi.n	8001690 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	3337      	adds	r3, #55	; 0x37
 8001688:	b2da      	uxtb	r2, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	701a      	strb	r2, [r3, #0]
 800168e:	e001      	b.n	8001694 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8001690:	2310      	movs	r3, #16
 8001692:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8001694:	7bfb      	ldrb	r3, [r7, #15]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 80016c0:	2300      	movs	r3, #0
 80016c2:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 80016c4:	2306      	movs	r3, #6
 80016c6:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e01e      	b.n	800170c <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 80016ce:	4914      	ldr	r1, [pc, #80]	; (8001720 <ConsoleCommandHelp+0x68>)
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4413      	add	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f8f8 	bl	80018d4 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 80016e4:	480f      	ldr	r0, [pc, #60]	; (8001724 <ConsoleCommandHelp+0x6c>)
 80016e6:	f000 f8f5 	bl	80018d4 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4613      	mov	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	3308      	adds	r3, #8
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <ConsoleCommandHelp+0x68>)
 80016f8:	4413      	add	r3, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f8ea 	bl	80018d4 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8001700:	4809      	ldr	r0, [pc, #36]	; (8001728 <ConsoleCommandHelp+0x70>)
 8001702:	f000 f8e7 	bl	80018d4 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3b01      	subs	r3, #1
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	429a      	cmp	r2, r3
 8001714:	d3db      	bcc.n	80016ce <ConsoleCommandHelp+0x16>
	}
	return result;
 8001716:	7cfb      	ldrb	r3, [r7, #19]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	0800b9b4 	.word	0x0800b9b4
 8001724:	0800b938 	.word	0x0800b938
 8001728:	0800b93c 	.word	0x0800b93c

0800172c <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	461a      	mov	r2, r3
 800173a:	2101      	movs	r1, #1
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff fdfd 	bl	800133c <ConsoleReceiveParamInt16>
 8001742:	4603      	mov	r3, r0
 8001744:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d116      	bne.n	800177a <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 800174c:	480d      	ldr	r0, [pc, #52]	; (8001784 <ConsoleCommandParamExampleInt16+0x58>)
 800174e:	f000 f8c1 	bl	80018d4 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8001752:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff25 	bl	80015a6 <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 800175c:	480a      	ldr	r0, [pc, #40]	; (8001788 <ConsoleCommandParamExampleInt16+0x5c>)
 800175e:	f000 f8b9 	bl	80018d4 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8001762:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001766:	b29b      	uxth	r3, r3
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fe8e 	bl	800148a <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 800176e:	4807      	ldr	r0, [pc, #28]	; (800178c <ConsoleCommandParamExampleInt16+0x60>)
 8001770:	f000 f8b0 	bl	80018d4 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8001774:	4806      	ldr	r0, [pc, #24]	; (8001790 <ConsoleCommandParamExampleInt16+0x64>)
 8001776:	f000 f8ad 	bl	80018d4 <ConsoleIoSendString>
	}
	return result;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	0800b940 	.word	0x0800b940
 8001788:	0800b950 	.word	0x0800b950
 800178c:	0800b958 	.word	0x0800b958
 8001790:	0800b93c 	.word	0x0800b93c

08001794 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	461a      	mov	r2, r3
 80017a2:	2101      	movs	r1, #1
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fe27 	bl	80013f8 <ConsoleReceiveParamHexUint16>
 80017aa:	4603      	mov	r3, r0
 80017ac:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d109      	bne.n	80017c8 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 80017b4:	4807      	ldr	r0, [pc, #28]	; (80017d4 <ConsoleCommandParamExampleHexUint16+0x40>)
 80017b6:	f000 f88d 	bl	80018d4 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 80017ba:	89bb      	ldrh	r3, [r7, #12]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fe64 	bl	800148a <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <ConsoleCommandParamExampleHexUint16+0x44>)
 80017c4:	f000 f886 	bl	80018d4 <ConsoleIoSendString>
	}
	return result;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	0800b95c 	.word	0x0800b95c
 80017d8:	0800b93c 	.word	0x0800b93c

080017dc <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <ConsoleCommandVer+0x24>)
 80017ea:	f000 f873 	bl	80018d4 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <ConsoleCommandVer+0x28>)
 80017f0:	f000 f870 	bl	80018d4 <ConsoleIoSendString>
	return result;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	0800b96c 	.word	0x0800b96c
 8001804:	0800b93c 	.word	0x0800b93c

08001808 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 800180c:	4b02      	ldr	r3, [pc, #8]	; (8001818 <ConsoleCommandsGetTable+0x10>)
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	0800b9b4 	.word	0x0800b9b4

0800181c <getch_noblock>:

extern UART_HandleTypeDef huart1;
char readBuf[1];
__IO ITStatus UartReady = SET;

static int getch_noblock() {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
	int retVal = EOF;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001826:	607b      	str	r3, [r7, #4]

	if (UartReady == SET) {
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <getch_noblock+0x40>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b01      	cmp	r3, #1
 8001830:	d10f      	bne.n	8001852 <getch_noblock+0x36>
		UartReady = RESET;
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <getch_noblock+0x40>)
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t*)readBuf, 1);
 8001838:	2201      	movs	r2, #1
 800183a:	4909      	ldr	r1, [pc, #36]	; (8001860 <getch_noblock+0x44>)
 800183c:	4809      	ldr	r0, [pc, #36]	; (8001864 <getch_noblock+0x48>)
 800183e:	f003 fa07 	bl	8004c50 <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)readBuf, 1); // echo
 8001842:	2201      	movs	r2, #1
 8001844:	4906      	ldr	r1, [pc, #24]	; (8001860 <getch_noblock+0x44>)
 8001846:	4807      	ldr	r0, [pc, #28]	; (8001864 <getch_noblock+0x48>)
 8001848:	f003 f95a 	bl	8004b00 <HAL_UART_Transmit_IT>
		retVal = *readBuf;
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <getch_noblock+0x44>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	607b      	str	r3, [r7, #4]
	}
	return retVal;
 8001852:	687b      	ldr	r3, [r7, #4]

}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000004 	.word	0x20000004
 8001860:	2000030c 	.word	0x2000030c
 8001864:	20000310 	.word	0x20000310

08001868 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	/* Enable USART1 interrupt*/
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	2024      	movs	r0, #36	; 0x24
 8001872:	f000 fde6 	bl	8002442 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001876:	2024      	movs	r0, #36	; 0x24
 8001878:	f000 fdfd 	bl	8002476 <HAL_NVIC_EnableIRQ>

	return CONSOLE_SUCCESS;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}

08001882 <ConsoleIoReceive>:

eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
	int ch;
	
	ch = getch_noblock();
 8001892:	f7ff ffc3 	bl	800181c <getch_noblock>
 8001896:	6138      	str	r0, [r7, #16]
	while ( ( EOF != ch ) && ( i < bufferLength ) )
 8001898:	e00b      	b.n	80018b2 <ConsoleIoReceive+0x30>
	{
		buffer[i] = (uint8_t) ch;
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	4413      	add	r3, r2
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]
		i++;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
		ch = getch_noblock();
 80018ac:	f7ff ffb6 	bl	800181c <getch_noblock>
 80018b0:	6138      	str	r0, [r7, #16]
	while ( ( EOF != ch ) && ( i < bufferLength ) )
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018b8:	d003      	beq.n	80018c2 <ConsoleIoReceive+0x40>
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d3eb      	bcc.n	800189a <ConsoleIoReceive+0x18>
	}
	*readLength = i;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4804      	ldr	r0, [pc, #16]	; (80018f0 <ConsoleIoSendString+0x1c>)
 80018e0:	f006 f8da 	bl	8007a98 <iprintf>
	return CONSOLE_SUCCESS;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	0800b984 	.word	0x0800b984

080018f4 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <USART1_IRQHandler+0x10>)
 80018fa:	f003 f9ff 	bl	8004cfc <HAL_UART_IRQHandler>
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000310 	.word	0x20000310

08001908 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 /* Set transmission flag: transfer complete*/
 UartReady = SET;
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <HAL_UART_RxCpltCallback+0x1c>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000004 	.word	0x20000004

08001928 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001938:	f023 0218 	bic.w	r2, r3, #24
 800193c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4313      	orrs	r3, r2
 8001944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001960:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4313      	orrs	r3, r2
 800196a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800196c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001970:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001978:	68fb      	ldr	r3, [r7, #12]
}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800198c:	f000 fbf8 	bl	8002180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001990:	f000 f812 	bl	80019b8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001994:	f000 f886 	bl	8001aa4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001998:	f000 f916 	bl	8001bc8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800199c:	f000 f8a0 	bl	8001ae0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80019a0:	f000 f8ea 	bl	8001b78 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 80019a4:	4803      	ldr	r0, [pc, #12]	; (80019b4 <main+0x2c>)
 80019a6:	f000 f95d 	bl	8001c64 <RetargetInit>
  ConsoleInit();
 80019aa:	f7ff fba7 	bl	80010fc <ConsoleInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ConsoleProcess();
 80019ae:	f7ff fbd3 	bl	8001158 <ConsoleProcess>
 80019b2:	e7fc      	b.n	80019ae <main+0x26>
 80019b4:	20000310 	.word	0x20000310

080019b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b09a      	sub	sp, #104	; 0x68
 80019bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019be:	f107 0320 	add.w	r3, r7, #32
 80019c2:	2248      	movs	r2, #72	; 0x48
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f005 f9e4 	bl	8006d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]
 80019da:	615a      	str	r2, [r3, #20]
 80019dc:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80019de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ec:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80019ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	f023 0303 	bic.w	r3, r3, #3
 80019f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a02:	f001 f8a9 	bl	8002b58 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7ff ff8e 	bl	8001928 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <SystemClock_Config+0xe8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a14:	4a22      	ldr	r2, [pc, #136]	; (8001aa0 <SystemClock_Config+0xe8>)
 8001a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <SystemClock_Config+0xe8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001a28:	2327      	movs	r3, #39	; 0x27
 8001a2a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a32:	2301      	movs	r3, #1
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a40:	2340      	movs	r3, #64	; 0x40
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001a44:	2300      	movs	r3, #0
 8001a46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a48:	2360      	movs	r3, #96	; 0x60
 8001a4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a50:	f107 0320 	add.w	r3, r7, #32
 8001a54:	4618      	mov	r0, r3
 8001a56:	f001 fc13 	bl	8003280 <HAL_RCC_OscConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001a60:	f000 f8fa 	bl	8001c58 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001a64:	236f      	movs	r3, #111	; 0x6f
 8001a66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	2101      	movs	r1, #1
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 ff89 	bl	800399c <HAL_RCC_ClockConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001a90:	f000 f8e2 	bl	8001c58 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001a94:	f002 fd44 	bl	8004520 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001a98:	bf00      	nop
 8001a9a:	3768      	adds	r7, #104	; 0x68
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	58000400 	.word	0x58000400

08001aa4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b094      	sub	sp, #80	; 0x50
 8001aa8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aaa:	463b      	mov	r3, r7
 8001aac:	2250      	movs	r2, #80	; 0x50
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f005 f96f 	bl	8006d94 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aba:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001abc:	2300      	movs	r3, #0
 8001abe:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 fbb4 	bl	8004234 <HAL_RCCEx_PeriphCLKConfig>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8001ad2:	f000 f8c1 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001ad6:	bf00      	nop
 8001ad8:	3750      	adds	r7, #80	; 0x50
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <MX_USART1_UART_Init+0x90>)
 8001ae6:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <MX_USART1_UART_Init+0x94>)
 8001ae8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aea:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <MX_USART1_UART_Init+0x90>)
 8001aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <MX_USART1_UART_Init+0x90>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <MX_USART1_UART_Init+0x90>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b06:	220c      	movs	r2, #12
 8001b08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b28:	4811      	ldr	r0, [pc, #68]	; (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b2a:	f002 fe30 	bl	800478e <HAL_UART_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b34:	f000 f890 	bl	8001c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b38:	2100      	movs	r1, #0
 8001b3a:	480d      	ldr	r0, [pc, #52]	; (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b3c:	f004 fff5 	bl	8006b2a <HAL_UARTEx_SetTxFifoThreshold>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b46:	f000 f887 	bl	8001c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4808      	ldr	r0, [pc, #32]	; (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b4e:	f005 f82a 	bl	8006ba6 <HAL_UARTEx_SetRxFifoThreshold>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b58:	f000 f87e 	bl	8001c58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_USART1_UART_Init+0x90>)
 8001b5e:	f004 ffab 	bl	8006ab8 <HAL_UARTEx_DisableFifoMode>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b68:	f000 f876 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000310 	.word	0x20000310
 8001b74:	40013800 	.word	0x40013800

08001b78 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001b7c:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <MX_USB_PCD_Init+0x48>)
 8001b7e:	4a11      	ldr	r2, [pc, #68]	; (8001bc4 <MX_USB_PCD_Init+0x4c>)
 8001b80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <MX_USB_PCD_Init+0x48>)
 8001b84:	2208      	movs	r2, #8
 8001b86:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001b88:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <MX_USB_PCD_Init+0x48>)
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <MX_USB_PCD_Init+0x48>)
 8001b90:	2202      	movs	r2, #2
 8001b92:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001b94:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <MX_USB_PCD_Init+0x48>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <MX_USB_PCD_Init+0x48>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001ba0:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <MX_USB_PCD_Init+0x48>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_USB_PCD_Init+0x48>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001bac:	4804      	ldr	r0, [pc, #16]	; (8001bc0 <MX_USB_PCD_Init+0x48>)
 8001bae:	f000 fec3 	bl	8002938 <HAL_PCD_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001bb8:	f000 f84e 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	200003a0 	.word	0x200003a0
 8001bc4:	40006800 	.word	0x40006800

08001bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bdc:	2004      	movs	r0, #4
 8001bde:	f7ff feb9 	bl	8001954 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	2002      	movs	r0, #2
 8001be4:	f7ff feb6 	bl	8001954 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	2001      	movs	r0, #1
 8001bea:	f7ff feb3 	bl	8001954 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bee:	2008      	movs	r0, #8
 8001bf0:	f7ff feb0 	bl	8001954 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2123      	movs	r1, #35	; 0x23
 8001bf8:	4814      	ldr	r0, [pc, #80]	; (8001c4c <MX_GPIO_Init+0x84>)
 8001bfa:	f000 fe85 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bfe:	2310      	movs	r3, #16
 8001c00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4810      	ldr	r0, [pc, #64]	; (8001c50 <MX_GPIO_Init+0x88>)
 8001c10:	f000 fd0a 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001c14:	2323      	movs	r3, #35	; 0x23
 8001c16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	4808      	ldr	r0, [pc, #32]	; (8001c4c <MX_GPIO_Init+0x84>)
 8001c2a:	f000 fcfd 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_GPIO_Init+0x8c>)
 8001c40:	f000 fcf2 	bl	8002628 <HAL_GPIO_Init>

}
 8001c44:	bf00      	nop
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	48000400 	.word	0x48000400
 8001c50:	48000800 	.word	0x48000800
 8001c54:	48000c00 	.word	0x48000c00

08001c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c5c:	b672      	cpsid	i
}
 8001c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <Error_Handler+0x8>
	...

08001c64 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001c6c:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <RetargetInit+0x28>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <RetargetInit+0x2c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6898      	ldr	r0, [r3, #8]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	f005 ff23 	bl	8007ac8 <setvbuf>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000694 	.word	0x20000694
 8001c90:	20000014 	.word	0x20000014

08001c94 <_isatty>:

int _isatty(int fd) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	db04      	blt.n	8001cac <_isatty+0x18>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	dc01      	bgt.n	8001cac <_isatty+0x18>
    return 1;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e005      	b.n	8001cb8 <_isatty+0x24>

  errno = EBADF;
 8001cac:	f005 f848 	bl	8006d40 <__errno>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2209      	movs	r2, #9
 8001cb4:	601a      	str	r2, [r3, #0]
  return 0;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_write>:

int _write(int fd, char* ptr, int len) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d002      	beq.n	8001cd8 <_write+0x18>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d111      	bne.n	8001cfc <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <_write+0x54>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	f002 fda2 	bl	800482e <HAL_UART_Transmit>
 8001cea:	4603      	mov	r3, r0
 8001cec:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <_write+0x38>
      return len;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	e008      	b.n	8001d0a <_write+0x4a>
    else
      return EIO;
 8001cf8:	2305      	movs	r3, #5
 8001cfa:	e006      	b.n	8001d0a <_write+0x4a>
  }
  errno = EBADF;
 8001cfc:	f005 f820 	bl	8006d40 <__errno>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2209      	movs	r2, #9
 8001d04:	601a      	str	r2, [r3, #0]
  return -1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000694 	.word	0x20000694

08001d18 <_close>:

int _close(int fd) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db04      	blt.n	8001d30 <_close+0x18>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	dc01      	bgt.n	8001d30 <_close+0x18>
    return 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e006      	b.n	8001d3e <_close+0x26>

  errno = EBADF;
 8001d30:	f005 f806 	bl	8006d40 <__errno>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2209      	movs	r2, #9
 8001d38:	601a      	str	r2, [r3, #0]
  return -1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <_read>:

int _read(int fd, char* ptr, int len) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d110      	bne.n	8001d7c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <_read+0x4c>)
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d62:	2201      	movs	r2, #1
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	f002 fdf8 	bl	800495a <HAL_UART_Receive>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <_read+0x30>
      return 1;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e008      	b.n	8001d8a <_read+0x42>
    else
      return EIO;
 8001d78:	2305      	movs	r3, #5
 8001d7a:	e006      	b.n	8001d8a <_read+0x42>
  }
  errno = EBADF;
 8001d7c:	f004 ffe0 	bl	8006d40 <__errno>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2209      	movs	r2, #9
 8001d84:	601a      	str	r2, [r3, #0]
  return -1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000694 	.word	0x20000694

08001d98 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db08      	blt.n	8001dba <_fstat+0x22>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	dc05      	bgt.n	8001dba <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001db4:	605a      	str	r2, [r3, #4]
    return 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e005      	b.n	8001dc6 <_fstat+0x2e>
  }

  errno = EBADF;
 8001dba:	f004 ffc1 	bl	8006d40 <__errno>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2209      	movs	r2, #9
 8001dc2:	601a      	str	r2, [r3, #0]
  return 0;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <LL_AHB2_GRP1_EnableClock>:
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ddc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4013      	ands	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4013      	ands	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e24:	68fb      	ldr	r3, [r7, #12]
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b085      	sub	sp, #20
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4013      	ands	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e56:	68fb      	ldr	r3, [r7, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b09c      	sub	sp, #112	; 0x70
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2250      	movs	r2, #80	; 0x50
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 ff7d 	bl	8006d94 <memset>
  if(huart->Instance==USART1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a16      	ldr	r2, [pc, #88]	; (8001ef8 <HAL_UART_MspInit+0x84>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d124      	bne.n	8001eee <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 f9bf 	bl	8004234 <HAL_RCCEx_PeriphCLKConfig>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ebc:	f7ff fecc 	bl	8001c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ec0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ec4:	f7ff ffb5 	bl	8001e32 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec8:	2002      	movs	r0, #2
 8001eca:	f7ff ff80 	bl	8001dce <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001ece:	23c0      	movs	r3, #192	; 0xc0
 8001ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ede:	2307      	movs	r3, #7
 8001ee0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4804      	ldr	r0, [pc, #16]	; (8001efc <HAL_UART_MspInit+0x88>)
 8001eea:	f000 fb9d 	bl	8002628 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001eee:	bf00      	nop
 8001ef0:	3770      	adds	r7, #112	; 0x70
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40013800 	.word	0x40013800
 8001efc:	48000400 	.word	0x48000400

08001f00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b09c      	sub	sp, #112	; 0x70
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	2250      	movs	r2, #80	; 0x50
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f004 ff37 	bl	8006d94 <memset>
  if(hpcd->Instance==USB)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <HAL_PCD_MspInit+0xa8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d136      	bne.n	8001f9e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f34:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001f36:	2318      	movs	r3, #24
 8001f38:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001f3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f3e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001f40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f44:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001f46:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f4a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001f4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f50:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001f52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f56:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f002 f969 	bl	8004234 <HAL_RCCEx_PeriphCLKConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001f68:	f7ff fe76 	bl	8001c58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f7ff ff2e 	bl	8001dce <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f76:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001f84:	230a      	movs	r3, #10
 8001f86:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f92:	f000 fb49 	bl	8002628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001f96:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001f9a:	f7ff ff31 	bl	8001e00 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001f9e:	bf00      	nop
 8001fa0:	3770      	adds	r7, #112	; 0x70
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40006800 	.word	0x40006800

08001fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <NMI_Handler+0x4>

08001fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <HardFault_Handler+0x4>

08001fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <MemManage_Handler+0x4>

08001fbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff8:	f000 f91c 	bl	8002234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <_sbrk+0x5c>)
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <_sbrk+0x60>)
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002014:	4b13      	ldr	r3, [pc, #76]	; (8002064 <_sbrk+0x64>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <_sbrk+0x64>)
 800201e:	4a12      	ldr	r2, [pc, #72]	; (8002068 <_sbrk+0x68>)
 8002020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <_sbrk+0x64>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	429a      	cmp	r2, r3
 800202e:	d207      	bcs.n	8002040 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002030:	f004 fe86 	bl	8006d40 <__errno>
 8002034:	4603      	mov	r3, r0
 8002036:	220c      	movs	r2, #12
 8002038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800203e:	e009      	b.n	8002054 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <_sbrk+0x64>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <_sbrk+0x64>)
 8002050:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002052:	68fb      	ldr	r3, [r7, #12]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20030000 	.word	0x20030000
 8002060:	00000400 	.word	0x00000400
 8002064:	20000698 	.word	0x20000698
 8002068:	200006b0 	.word	0x200006b0

0800206c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <SystemInit+0x98>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	4a23      	ldr	r2, [pc, #140]	; (8002104 <SystemInit+0x98>)
 8002078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800207c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002094:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002098:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800209a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <SystemInit+0x9c>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80020aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b6:	f023 0305 	bic.w	r3, r3, #5
 80020ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d6:	4a0d      	ldr	r2, [pc, #52]	; (800210c <SystemInit+0xa0>)
 80020d8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80020da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020de:	4a0b      	ldr	r2, [pc, #44]	; (800210c <SystemInit+0xa0>)
 80020e0:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80020f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00
 8002108:	faf6fefb 	.word	0xfaf6fefb
 800210c:	22041000 	.word	0x22041000

08002110 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002110:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002112:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002114:	3304      	adds	r3, #4

08002116 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002116:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002118:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800211a:	d3f9      	bcc.n	8002110 <CopyDataInit>
  bx lr
 800211c:	4770      	bx	lr

0800211e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800211e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002120:	3004      	adds	r0, #4

08002122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002122:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002124:	d3fb      	bcc.n	800211e <FillZerobss>
  bx lr
 8002126:	4770      	bx	lr

08002128 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002128:	480c      	ldr	r0, [pc, #48]	; (800215c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800212a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800212c:	f7ff ff9e 	bl	800206c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002130:	480b      	ldr	r0, [pc, #44]	; (8002160 <LoopForever+0x8>)
 8002132:	490c      	ldr	r1, [pc, #48]	; (8002164 <LoopForever+0xc>)
 8002134:	4a0c      	ldr	r2, [pc, #48]	; (8002168 <LoopForever+0x10>)
 8002136:	2300      	movs	r3, #0
 8002138:	f7ff ffed 	bl	8002116 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800213c:	480b      	ldr	r0, [pc, #44]	; (800216c <LoopForever+0x14>)
 800213e:	490c      	ldr	r1, [pc, #48]	; (8002170 <LoopForever+0x18>)
 8002140:	2300      	movs	r3, #0
 8002142:	f7ff ffee 	bl	8002122 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002146:	480b      	ldr	r0, [pc, #44]	; (8002174 <LoopForever+0x1c>)
 8002148:	490b      	ldr	r1, [pc, #44]	; (8002178 <LoopForever+0x20>)
 800214a:	2300      	movs	r3, #0
 800214c:	f7ff ffe9 	bl	8002122 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002150:	f004 fdfc 	bl	8006d4c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002154:	f7ff fc18 	bl	8001988 <main>

08002158 <LoopForever>:

LoopForever:
  b LoopForever
 8002158:	e7fe      	b.n	8002158 <LoopForever>
 800215a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800215c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002160:	20000004 	.word	0x20000004
 8002164:	200001e8 	.word	0x200001e8
 8002168:	0800c0ec 	.word	0x0800c0ec
  INIT_BSS _sbss, _ebss
 800216c:	200001e8 	.word	0x200001e8
 8002170:	200006b0 	.word	0x200006b0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002174:	20030000 	.word	0x20030000
 8002178:	20030000 	.word	0x20030000

0800217c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800217c:	e7fe      	b.n	800217c <ADC1_IRQHandler>
	...

08002180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_Init+0x3c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <HAL_Init+0x3c>)
 8002190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002194:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002196:	2003      	movs	r0, #3
 8002198:	f000 f948 	bl	800242c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800219c:	2000      	movs	r0, #0
 800219e:	f000 f80f 	bl	80021c0 <HAL_InitTick>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	71fb      	strb	r3, [r7, #7]
 80021ac:	e001      	b.n	80021b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021ae:	f7ff fe59 	bl	8001e64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021b2:	79fb      	ldrb	r3, [r7, #7]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	58004000 	.word	0x58004000

080021c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80021cc:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_InitTick+0x6c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d024      	beq.n	800221e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021d4:	f001 fd8e 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 80021d8:	4602      	mov	r2, r0
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <HAL_InitTick+0x6c>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	4619      	mov	r1, r3
 80021e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80021e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f950 	bl	8002492 <HAL_SYSTICK_Config>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10f      	bne.n	8002218 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b0f      	cmp	r3, #15
 80021fc:	d809      	bhi.n	8002212 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021fe:	2200      	movs	r2, #0
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002206:	f000 f91c 	bl	8002442 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800220a:	4a09      	ldr	r2, [pc, #36]	; (8002230 <HAL_InitTick+0x70>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	e007      	b.n	8002222 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
 8002216:	e004      	b.n	8002222 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	e001      	b.n	8002222 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000010 	.word	0x20000010
 8002230:	2000000c 	.word	0x2000000c

08002234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_IncTick+0x20>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_IncTick+0x24>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <HAL_IncTick+0x24>)
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000010 	.word	0x20000010
 8002258:	2000069c 	.word	0x2000069c

0800225c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return uwTick;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_GetTick+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	2000069c 	.word	0x2000069c

08002274 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_GetTickPrio+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	2000000c 	.word	0x2000000c

0800228c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a8:	4013      	ands	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022be:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	60d3      	str	r3, [r2, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <__NVIC_GetPriorityGrouping+0x18>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 0307 	and.w	r3, r3, #7
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	db0b      	blt.n	800231a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	f003 021f 	and.w	r2, r3, #31
 8002308:	4907      	ldr	r1, [pc, #28]	; (8002328 <__NVIC_EnableIRQ+0x38>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	2001      	movs	r0, #1
 8002312:	fa00 f202 	lsl.w	r2, r0, r2
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000e100 	.word	0xe000e100

0800232c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	6039      	str	r1, [r7, #0]
 8002336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	2b00      	cmp	r3, #0
 800233e:	db0a      	blt.n	8002356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	490c      	ldr	r1, [pc, #48]	; (8002378 <__NVIC_SetPriority+0x4c>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	0112      	lsls	r2, r2, #4
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	440b      	add	r3, r1
 8002350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002354:	e00a      	b.n	800236c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4908      	ldr	r1, [pc, #32]	; (800237c <__NVIC_SetPriority+0x50>)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	3b04      	subs	r3, #4
 8002364:	0112      	lsls	r2, r2, #4
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	440b      	add	r3, r1
 800236a:	761a      	strb	r2, [r3, #24]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000e100 	.word	0xe000e100
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	; 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f1c3 0307 	rsb	r3, r3, #7
 800239a:	2b04      	cmp	r3, #4
 800239c:	bf28      	it	cs
 800239e:	2304      	movcs	r3, #4
 80023a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d902      	bls.n	80023b0 <NVIC_EncodePriority+0x30>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3b03      	subs	r3, #3
 80023ae:	e000      	b.n	80023b2 <NVIC_EncodePriority+0x32>
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43da      	mvns	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	401a      	ands	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	43d9      	mvns	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	4313      	orrs	r3, r2
         );
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3724      	adds	r7, #36	; 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f8:	d301      	bcc.n	80023fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00f      	b.n	800241e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <SysTick_Config+0x40>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3b01      	subs	r3, #1
 8002404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002406:	210f      	movs	r1, #15
 8002408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800240c:	f7ff ff8e 	bl	800232c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <SysTick_Config+0x40>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002416:	4b04      	ldr	r3, [pc, #16]	; (8002428 <SysTick_Config+0x40>)
 8002418:	2207      	movs	r2, #7
 800241a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	e000e010 	.word	0xe000e010

0800242c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff29 	bl	800228c <__NVIC_SetPriorityGrouping>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002450:	f7ff ff40 	bl	80022d4 <__NVIC_GetPriorityGrouping>
 8002454:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	6978      	ldr	r0, [r7, #20]
 800245c:	f7ff ff90 	bl	8002380 <NVIC_EncodePriority>
 8002460:	4602      	mov	r2, r0
 8002462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff5f 	bl	800232c <__NVIC_SetPriority>
}
 800246e:	bf00      	nop
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	4603      	mov	r3, r0
 800247e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff33 	bl	80022f0 <__NVIC_EnableIRQ>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff ffa4 	bl	80023e8 <SysTick_Config>
 80024a0:	4603      	mov	r3, r0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e04f      	b.n	800255c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d008      	beq.n	80024da <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2204      	movs	r2, #4
 80024cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e040      	b.n	800255c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 020e 	bic.w	r2, r2, #14
 80024e8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0201 	bic.w	r2, r2, #1
 8002508:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f003 021c 	and.w	r2, r3, #28
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	2101      	movs	r1, #1
 8002518:	fa01 f202 	lsl.w	r2, r1, r2
 800251c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002526:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00c      	beq.n	800254a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800253e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002548:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d005      	beq.n	800258c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2204      	movs	r2, #4
 8002584:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
 800258a:	e047      	b.n	800261c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 020e 	bic.w	r2, r2, #14
 800259a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c0:	f003 021c 	and.w	r2, r3, #28
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	2101      	movs	r1, #1
 80025ca:	fa01 f202 	lsl.w	r2, r1, r2
 80025ce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00c      	beq.n	80025fc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80025fa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4798      	blx	r3
    }
  }
  return status;
 800261c:	7bfb      	ldrb	r3, [r7, #15]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002636:	e14c      	b.n	80028d2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2101      	movs	r1, #1
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	4013      	ands	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 813e 	beq.w	80028cc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b01      	cmp	r3, #1
 800265a:	d005      	beq.n	8002668 <HAL_GPIO_Init+0x40>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d130      	bne.n	80026ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	2203      	movs	r2, #3
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800269e:	2201      	movs	r2, #1
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	f003 0201 	and.w	r2, r3, #1
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d017      	beq.n	8002706 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d123      	bne.n	800275a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	08da      	lsrs	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3208      	adds	r2, #8
 800271a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800271e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	220f      	movs	r2, #15
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	08da      	lsrs	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3208      	adds	r2, #8
 8002754:	6939      	ldr	r1, [r7, #16]
 8002756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2203      	movs	r2, #3
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4013      	ands	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 0203 	and.w	r2, r3, #3
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8098 	beq.w	80028cc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800279c:	4a54      	ldr	r2, [pc, #336]	; (80028f0 <HAL_GPIO_Init+0x2c8>)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3302      	adds	r3, #2
 80027a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	220f      	movs	r2, #15
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027c6:	d019      	beq.n	80027fc <HAL_GPIO_Init+0x1d4>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a4a      	ldr	r2, [pc, #296]	; (80028f4 <HAL_GPIO_Init+0x2cc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d013      	beq.n	80027f8 <HAL_GPIO_Init+0x1d0>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a49      	ldr	r2, [pc, #292]	; (80028f8 <HAL_GPIO_Init+0x2d0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d00d      	beq.n	80027f4 <HAL_GPIO_Init+0x1cc>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a48      	ldr	r2, [pc, #288]	; (80028fc <HAL_GPIO_Init+0x2d4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d007      	beq.n	80027f0 <HAL_GPIO_Init+0x1c8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a47      	ldr	r2, [pc, #284]	; (8002900 <HAL_GPIO_Init+0x2d8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d101      	bne.n	80027ec <HAL_GPIO_Init+0x1c4>
 80027e8:	2304      	movs	r3, #4
 80027ea:	e008      	b.n	80027fe <HAL_GPIO_Init+0x1d6>
 80027ec:	2307      	movs	r3, #7
 80027ee:	e006      	b.n	80027fe <HAL_GPIO_Init+0x1d6>
 80027f0:	2303      	movs	r3, #3
 80027f2:	e004      	b.n	80027fe <HAL_GPIO_Init+0x1d6>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e002      	b.n	80027fe <HAL_GPIO_Init+0x1d6>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <HAL_GPIO_Init+0x1d6>
 80027fc:	2300      	movs	r3, #0
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	f002 0203 	and.w	r2, r2, #3
 8002804:	0092      	lsls	r2, r2, #2
 8002806:	4093      	lsls	r3, r2
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800280e:	4938      	ldr	r1, [pc, #224]	; (80028f0 <HAL_GPIO_Init+0x2c8>)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	3302      	adds	r3, #2
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800281c:	4b39      	ldr	r3, [pc, #228]	; (8002904 <HAL_GPIO_Init+0x2dc>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	43db      	mvns	r3, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002840:	4a30      	ldr	r2, [pc, #192]	; (8002904 <HAL_GPIO_Init+0x2dc>)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002846:	4b2f      	ldr	r3, [pc, #188]	; (8002904 <HAL_GPIO_Init+0x2dc>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800286a:	4a26      	ldr	r2, [pc, #152]	; (8002904 <HAL_GPIO_Init+0x2dc>)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002870:	4b24      	ldr	r3, [pc, #144]	; (8002904 <HAL_GPIO_Init+0x2dc>)
 8002872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002896:	4a1b      	ldr	r2, [pc, #108]	; (8002904 <HAL_GPIO_Init+0x2dc>)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800289e:	4b19      	ldr	r3, [pc, #100]	; (8002904 <HAL_GPIO_Init+0x2dc>)
 80028a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028c4:	4a0f      	ldr	r2, [pc, #60]	; (8002904 <HAL_GPIO_Init+0x2dc>)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	3301      	adds	r3, #1
 80028d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f47f aeab 	bne.w	8002638 <HAL_GPIO_Init+0x10>
  }
}
 80028e2:	bf00      	nop
 80028e4:	bf00      	nop
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	40010000 	.word	0x40010000
 80028f4:	48000400 	.word	0x48000400
 80028f8:	48000800 	.word	0x48000800
 80028fc:	48000c00 	.word	0x48000c00
 8002900:	48001000 	.word	0x48001000
 8002904:	58000800 	.word	0x58000800

08002908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
 8002914:	4613      	mov	r3, r2
 8002916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002918:	787b      	ldrb	r3, [r7, #1]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002924:	e002      	b.n	800292c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293a:	b08b      	sub	sp, #44	; 0x2c
 800293c:	af06      	add	r7, sp, #24
 800293e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e0d7      	b.n	8002afa <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff face 	bl	8001f00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2203      	movs	r2, #3
 8002968:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f004 f9a5 	bl	8006cc0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
 800297a:	e04c      	b.n	8002a16 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	440b      	add	r3, r1
 800298c:	3301      	adds	r3, #1
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	b298      	uxth	r0, r3
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	440b      	add	r3, r1
 80029b8:	3336      	adds	r3, #54	; 0x36
 80029ba:	4602      	mov	r2, r0
 80029bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	440b      	add	r3, r1
 80029ce:	3303      	adds	r3, #3
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	440b      	add	r3, r1
 80029e2:	3338      	adds	r3, #56	; 0x38
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	440b      	add	r3, r1
 80029f6:	333c      	adds	r3, #60	; 0x3c
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	440b      	add	r3, r1
 8002a0a:	3340      	adds	r3, #64	; 0x40
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	3301      	adds	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d3ad      	bcc.n	800297c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	e044      	b.n	8002ab0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	440b      	add	r3, r1
 8002a34:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	440b      	add	r3, r1
 8002a4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a4e:	7bfa      	ldrb	r2, [r7, #15]
 8002a50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	440b      	add	r3, r1
 8002a60:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	440b      	add	r3, r1
 8002a76:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	3301      	adds	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d3b5      	bcc.n	8002a26 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	687e      	ldr	r6, [r7, #4]
 8002ac2:	466d      	mov	r5, sp
 8002ac4:	f106 0410 	add.w	r4, r6, #16
 8002ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	602b      	str	r3, [r5, #0]
 8002ad0:	1d33      	adds	r3, r6, #4
 8002ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad4:	6838      	ldr	r0, [r7, #0]
 8002ad6:	f004 f90e 	bl	8006cf6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d102      	bne.n	8002af8 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f805 	bl	8002b02 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b02 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	6013      	str	r3, [r2, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	58000400 	.word	0x58000400

08002b78 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	58000400 	.word	0x58000400

08002b94 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba6:	d101      	bne.n	8002bac <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_RCC_HSE_Enable>:
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <LL_RCC_HSE_Disable>:
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_RCC_HSE_IsReady>:
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c06:	d101      	bne.n	8002c0c <LL_RCC_HSE_IsReady+0x18>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <LL_RCC_HSE_IsReady+0x1a>
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_RCC_HSI_Enable>:
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2a:	6013      	str	r3, [r2, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_RCC_HSI_Disable>:
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c48:	6013      	str	r3, [r2, #0]
}
 8002c4a:	bf00      	nop
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_RCC_HSI_IsReady>:
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c66:	d101      	bne.n	8002c6c <LL_RCC_HSI_IsReady+0x18>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <LL_RCC_HSI_IsReady+0x1a>
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	061b      	lsls	r3, r3, #24
 8002c8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <LL_RCC_HSI48_Enable>:
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_RCC_HSI48_Disable>:
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ccc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cd4:	f023 0301 	bic.w	r3, r3, #1
 8002cd8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <LL_RCC_HSI48_IsReady>:
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d101      	bne.n	8002cfe <LL_RCC_HSI48_IsReady+0x18>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <LL_RCC_HSI48_IsReady+0x1a>
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <LL_RCC_LSE_Enable>:
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_RCC_LSE_Disable>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <LL_RCC_LSE_EnableBypass>:
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d5e:	f043 0304 	orr.w	r3, r3, #4
 8002d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d66:	bf00      	nop
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_RCC_LSE_DisableBypass>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d80:	f023 0304 	bic.w	r3, r3, #4
 8002d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d101      	bne.n	8002daa <LL_RCC_LSE_IsReady+0x18>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <LL_RCC_LSE_IsReady+0x1a>
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d101      	bne.n	8002e12 <LL_RCC_LSI1_IsReady+0x18>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <LL_RCC_LSI1_IsReady+0x1a>
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e2e:	f043 0304 	orr.w	r3, r3, #4
 8002e32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002e36:	bf00      	nop
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e50:	f023 0304 	bic.w	r3, r3, #4
 8002e54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d101      	bne.n	8002e7a <LL_RCC_LSI2_IsReady+0x18>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <LL_RCC_LSI2_IsReady+0x1a>
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e96:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6013      	str	r3, [r2, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	6013      	str	r3, [r2, #0]
}
 8002ee6:	bf00      	nop
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d101      	bne.n	8002f06 <LL_RCC_MSI_IsReady+0x16>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <LL_RCC_MSI_IsReady+0x18>
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f4a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2bb0      	cmp	r3, #176	; 0xb0
 8002f50:	d901      	bls.n	8002f56 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002f52:	23b0      	movs	r3, #176	; 0xb0
 8002f54:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002f56:	687b      	ldr	r3, [r7, #4]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f023 0203 	bic.w	r2, r3, #3
 8002fa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003002:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003006:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800300a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800302a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003032:	f023 020f 	bic.w	r2, r3, #15
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4313      	orrs	r3, r2
 800306a:	608b      	str	r3, [r1, #8]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800308a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4313      	orrs	r3, r2
 8003092:	608b      	str	r3, [r1, #8]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80030a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80030bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80030d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80030f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003116:	6013      	str	r3, [r2, #0]
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003130:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003134:	6013      	str	r3, [r2, #0]
}
 8003136:	bf00      	nop
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003152:	d101      	bne.n	8003158 <LL_RCC_PLL_IsReady+0x18>
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <LL_RCC_PLL_IsReady+0x1a>
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003196:	b480      	push	{r7}
 8003198:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800319a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80031ae:	b480      	push	{r7}
 80031b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80031b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0303 	and.w	r3, r3, #3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80031ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d8:	d101      	bne.n	80031de <LL_RCC_IsActiveFlag_HPRE+0x18>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80031ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031fe:	d101      	bne.n	8003204 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003218:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800321c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003224:	d101      	bne.n	800322a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003236:	b480      	push	{r7}
 8003238:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800323a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003248:	d101      	bne.n	800324e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800325a:	b480      	push	{r7}
 800325c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800325e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003268:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800326c:	d101      	bne.n	8003272 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
	...

08003280 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b08d      	sub	sp, #52	; 0x34
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e37f      	b.n	8003992 <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 8092 	beq.w	80033c4 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032a0:	f7ff fe89 	bl	8002fb6 <LL_RCC_GetSysClkSource>
 80032a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032a6:	f7ff ff82 	bl	80031ae <LL_RCC_PLL_GetMainSource>
 80032aa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_RCC_OscConfig+0x3e>
 80032b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b4:	2b0c      	cmp	r3, #12
 80032b6:	d14c      	bne.n	8003352 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80032b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d149      	bne.n	8003352 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032be:	f7ff fe17 	bl	8002ef0 <LL_RCC_MSI_IsReady>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_OscConfig+0x54>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e35e      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80032d8:	f7ff fe2f 	bl	8002f3a <LL_RCC_MSI_GetRange>
 80032dc:	4603      	mov	r3, r0
 80032de:	429c      	cmp	r4, r3
 80032e0:	d914      	bls.n	800330c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fd44 	bl	8003d74 <RCC_SetFlashLatencyFromMSIRange>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e34d      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fe09 	bl	8002f12 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fe2d 	bl	8002f64 <LL_RCC_MSI_SetCalibTrimming>
 800330a:	e013      	b.n	8003334 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fdfe 	bl	8002f12 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff fe22 	bl	8002f64 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fd25 	bl	8003d74 <RCC_SetFlashLatencyFromMSIRange>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e32e      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003334:	f000 fcde 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003338:	4603      	mov	r3, r0
 800333a:	4aa5      	ldr	r2, [pc, #660]	; (80035d0 <HAL_RCC_OscConfig+0x350>)
 800333c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800333e:	4ba5      	ldr	r3, [pc, #660]	; (80035d4 <HAL_RCC_OscConfig+0x354>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe ff3c 	bl	80021c0 <HAL_InitTick>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d039      	beq.n	80033c2 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e31f      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d01e      	beq.n	8003398 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800335a:	f7ff fdab 	bl	8002eb4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800335e:	f7fe ff7d 	bl	800225c <HAL_GetTick>
 8003362:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003366:	f7fe ff79 	bl	800225c <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e30c      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003378:	f7ff fdba 	bl	8002ef0 <LL_RCC_MSI_IsReady>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f1      	beq.n	8003366 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fdc3 	bl	8002f12 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fde7 	bl	8002f64 <LL_RCC_MSI_SetCalibTrimming>
 8003396:	e015      	b.n	80033c4 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003398:	f7ff fd9b 	bl	8002ed2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800339c:	f7fe ff5e 	bl	800225c <HAL_GetTick>
 80033a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033a4:	f7fe ff5a 	bl	800225c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e2ed      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 80033b6:	f7ff fd9b 	bl	8002ef0 <LL_RCC_MSI_IsReady>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f1      	bne.n	80033a4 <HAL_RCC_OscConfig+0x124>
 80033c0:	e000      	b.n	80033c4 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033c2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d04e      	beq.n	800346e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d0:	f7ff fdf1 	bl	8002fb6 <LL_RCC_GetSysClkSource>
 80033d4:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033d6:	f7ff feea 	bl	80031ae <LL_RCC_PLL_GetMainSource>
 80033da:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d005      	beq.n	80033ee <HAL_RCC_OscConfig+0x16e>
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	2b0c      	cmp	r3, #12
 80033e6:	d10d      	bne.n	8003404 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d10a      	bne.n	8003404 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ee:	f7ff fc01 	bl	8002bf4 <LL_RCC_HSE_IsReady>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d039      	beq.n	800346c <HAL_RCC_OscConfig+0x1ec>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d135      	bne.n	800346c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e2c6      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d102      	bne.n	8003414 <HAL_RCC_OscConfig+0x194>
 800340e:	f7ff fbd3 	bl	8002bb8 <LL_RCC_HSE_Enable>
 8003412:	e001      	b.n	8003418 <HAL_RCC_OscConfig+0x198>
 8003414:	f7ff fbdf 	bl	8002bd6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d012      	beq.n	8003446 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe ff1c 	bl	800225c <HAL_GetTick>
 8003424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003428:	f7fe ff18 	bl	800225c <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e2ab      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 800343a:	f7ff fbdb 	bl	8002bf4 <LL_RCC_HSE_IsReady>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f1      	beq.n	8003428 <HAL_RCC_OscConfig+0x1a8>
 8003444:	e013      	b.n	800346e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003446:	f7fe ff09 	bl	800225c <HAL_GetTick>
 800344a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800344e:	f7fe ff05 	bl	800225c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b64      	cmp	r3, #100	; 0x64
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e298      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003460:	f7ff fbc8 	bl	8002bf4 <LL_RCC_HSE_IsReady>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f1      	bne.n	800344e <HAL_RCC_OscConfig+0x1ce>
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d051      	beq.n	800351e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800347a:	f7ff fd9c 	bl	8002fb6 <LL_RCC_GetSysClkSource>
 800347e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003480:	f7ff fe95 	bl	80031ae <LL_RCC_PLL_GetMainSource>
 8003484:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b04      	cmp	r3, #4
 800348a:	d005      	beq.n	8003498 <HAL_RCC_OscConfig+0x218>
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b0c      	cmp	r3, #12
 8003490:	d113      	bne.n	80034ba <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d110      	bne.n	80034ba <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003498:	f7ff fbdc 	bl	8002c54 <LL_RCC_HSI_IsReady>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_RCC_OscConfig+0x22e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e271      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fbe0 	bl	8002c78 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b8:	e031      	b.n	800351e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d019      	beq.n	80034f6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c2:	f7ff fba9 	bl	8002c18 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fe fec9 	bl	800225c <HAL_GetTick>
 80034ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ce:	f7fe fec5 	bl	800225c <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e258      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 80034e0:	f7ff fbb8 	bl	8002c54 <LL_RCC_HSI_IsReady>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f1      	beq.n	80034ce <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fbc2 	bl	8002c78 <LL_RCC_HSI_SetCalibTrimming>
 80034f4:	e013      	b.n	800351e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f6:	f7ff fb9e 	bl	8002c36 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7fe feaf 	bl	800225c <HAL_GetTick>
 80034fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003502:	f7fe feab 	bl	800225c <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e23e      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003514:	f7ff fb9e 	bl	8002c54 <LL_RCC_HSI_IsReady>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f1      	bne.n	8003502 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80a4 	beq.w	8003680 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d077      	beq.n	8003630 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b00      	cmp	r3, #0
 800354a:	d04b      	beq.n	80035e4 <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800354c:	f7ff fc55 	bl	8002dfa <LL_RCC_LSI1_IsReady>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d113      	bne.n	800357e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003556:	f7ff fc2e 	bl	8002db6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800355a:	f7fe fe7f 	bl	800225c <HAL_GetTick>
 800355e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003562:	f7fe fe7b 	bl	800225c <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e20e      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003574:	f7ff fc41 	bl	8002dfa <LL_RCC_LSI1_IsReady>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f1      	beq.n	8003562 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800357e:	f7ff fc4e 	bl	8002e1e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003582:	f7fe fe6b 	bl	800225c <HAL_GetTick>
 8003586:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800358a:	f7fe fe67 	bl	800225c <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b03      	cmp	r3, #3
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e1fa      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800359c:	f7ff fc61 	bl	8002e62 <LL_RCC_LSI2_IsReady>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f1      	beq.n	800358a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fc6b 	bl	8002e86 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80035b0:	f7ff fc12 	bl	8002dd8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fe fe52 	bl	800225c <HAL_GetTick>
 80035b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80035ba:	e00d      	b.n	80035d8 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80035bc:	f7fe fe4e 	bl	800225c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d906      	bls.n	80035d8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e1e1      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
 80035ce:	bf00      	nop
 80035d0:	20000008 	.word	0x20000008
 80035d4:	2000000c 	.word	0x2000000c
        while (LL_RCC_LSI1_IsReady() != 0U)
 80035d8:	f7ff fc0f 	bl	8002dfa <LL_RCC_LSI1_IsReady>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1ec      	bne.n	80035bc <HAL_RCC_OscConfig+0x33c>
 80035e2:	e04d      	b.n	8003680 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80035e4:	f7ff fbe7 	bl	8002db6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe fe38 	bl	800225c <HAL_GetTick>
 80035ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80035f0:	f7fe fe34 	bl	800225c <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e1c7      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003602:	f7ff fbfa 	bl	8002dfa <LL_RCC_LSI1_IsReady>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f1      	beq.n	80035f0 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800360c:	f7ff fc18 	bl	8002e40 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003612:	f7fe fe23 	bl	800225c <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b03      	cmp	r3, #3
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e1b6      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003624:	f7ff fc1d 	bl	8002e62 <LL_RCC_LSI2_IsReady>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f1      	bne.n	8003612 <HAL_RCC_OscConfig+0x392>
 800362e:	e027      	b.n	8003680 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003630:	f7ff fc06 	bl	8002e40 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7fe fe12 	bl	800225c <HAL_GetTick>
 8003638:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800363c:	f7fe fe0e 	bl	800225c <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b03      	cmp	r3, #3
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e1a1      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800364e:	f7ff fc08 	bl	8002e62 <LL_RCC_LSI2_IsReady>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f1      	bne.n	800363c <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003658:	f7ff fbbe 	bl	8002dd8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365c:	f7fe fdfe 	bl	800225c <HAL_GetTick>
 8003660:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003664:	f7fe fdfa 	bl	800225c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e18d      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003676:	f7ff fbc0 	bl	8002dfa <LL_RCC_LSI1_IsReady>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f1      	bne.n	8003664 <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d05b      	beq.n	8003744 <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800368c:	4ba7      	ldr	r3, [pc, #668]	; (800392c <HAL_RCC_OscConfig+0x6ac>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d114      	bne.n	80036c2 <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003698:	f7ff fa5e 	bl	8002b58 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369c:	f7fe fdde 	bl	800225c <HAL_GetTick>
 80036a0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a4:	f7fe fdda 	bl	800225c <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e16d      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b6:	4b9d      	ldr	r3, [pc, #628]	; (800392c <HAL_RCC_OscConfig+0x6ac>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d102      	bne.n	80036d0 <HAL_RCC_OscConfig+0x450>
 80036ca:	f7ff fb1e 	bl	8002d0a <LL_RCC_LSE_Enable>
 80036ce:	e00c      	b.n	80036ea <HAL_RCC_OscConfig+0x46a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b05      	cmp	r3, #5
 80036d6:	d104      	bne.n	80036e2 <HAL_RCC_OscConfig+0x462>
 80036d8:	f7ff fb39 	bl	8002d4e <LL_RCC_LSE_EnableBypass>
 80036dc:	f7ff fb15 	bl	8002d0a <LL_RCC_LSE_Enable>
 80036e0:	e003      	b.n	80036ea <HAL_RCC_OscConfig+0x46a>
 80036e2:	f7ff fb23 	bl	8002d2c <LL_RCC_LSE_Disable>
 80036e6:	f7ff fb43 	bl	8002d70 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d014      	beq.n	800371c <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f2:	f7fe fdb3 	bl	800225c <HAL_GetTick>
 80036f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80036f8:	e00a      	b.n	8003710 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7fe fdaf 	bl	800225c <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	; 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e140      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003710:	f7ff fb3f 	bl	8002d92 <LL_RCC_LSE_IsReady>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0ef      	beq.n	80036fa <HAL_RCC_OscConfig+0x47a>
 800371a:	e013      	b.n	8003744 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fe fd9e 	bl	800225c <HAL_GetTick>
 8003720:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003722:	e00a      	b.n	800373a <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003724:	f7fe fd9a 	bl	800225c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e12b      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 800373a:	f7ff fb2a 	bl	8002d92 <LL_RCC_LSE_IsReady>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ef      	bne.n	8003724 <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d02c      	beq.n	80037aa <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	2b00      	cmp	r3, #0
 8003756:	d014      	beq.n	8003782 <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003758:	f7ff faa3 	bl	8002ca2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375c:	f7fe fd7e 	bl	800225c <HAL_GetTick>
 8003760:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003764:	f7fe fd7a 	bl	800225c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e10d      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003776:	f7ff fab6 	bl	8002ce6 <LL_RCC_HSI48_IsReady>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f1      	beq.n	8003764 <HAL_RCC_OscConfig+0x4e4>
 8003780:	e013      	b.n	80037aa <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003782:	f7ff fa9f 	bl	8002cc4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003786:	f7fe fd69 	bl	800225c <HAL_GetTick>
 800378a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800378e:	f7fe fd65 	bl	800225c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e0f8      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80037a0:	f7ff faa1 	bl	8002ce6 <LL_RCC_HSI48_IsReady>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f1      	bne.n	800378e <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80ee 	beq.w	8003990 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b4:	f7ff fbff 	bl	8002fb6 <LL_RCC_GetSysClkSource>
 80037b8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80037ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	f040 80b4 	bne.w	8003934 <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 0203 	and.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d123      	bne.n	8003822 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d11c      	bne.n	8003822 <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d114      	bne.n	8003822 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d10d      	bne.n	8003822 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003810:	429a      	cmp	r2, r3
 8003812:	d106      	bne.n	8003822 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d05d      	beq.n	80038de <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	2b0c      	cmp	r3, #12
 8003826:	d058      	beq.n	80038da <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e0ab      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800383a:	f7ff fc72 	bl	8003122 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800383e:	f7fe fd0d 	bl	800225c <HAL_GetTick>
 8003842:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003846:	f7fe fd09 	bl	800225c <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e09c      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1ef      	bne.n	8003846 <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	4b30      	ldr	r3, [pc, #192]	; (8003930 <HAL_RCC_OscConfig+0x6b0>)
 800386e:	4013      	ands	r3, r2
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003878:	4311      	orrs	r1, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800387e:	0212      	lsls	r2, r2, #8
 8003880:	4311      	orrs	r1, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003886:	4311      	orrs	r1, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800388c:	4311      	orrs	r1, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003892:	430a      	orrs	r2, r1
 8003894:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003898:	4313      	orrs	r3, r2
 800389a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800389c:	f7ff fc32 	bl	8003104 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ae:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038b0:	f7fe fcd4 	bl	800225c <HAL_GetTick>
 80038b4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fe fcd0 	bl	800225c <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e063      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0ef      	beq.n	80038b8 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038d8:	e05a      	b.n	8003990 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e059      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d151      	bne.n	8003990 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038ec:	f7ff fc0a 	bl	8003104 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003900:	f7fe fcac 	bl	800225c <HAL_GetTick>
 8003904:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003908:	f7fe fca8 	bl	800225c <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e03b      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ef      	beq.n	8003908 <HAL_RCC_OscConfig+0x688>
 8003928:	e032      	b.n	8003990 <HAL_RCC_OscConfig+0x710>
 800392a:	bf00      	nop
 800392c:	58000400 	.word	0x58000400
 8003930:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	2b0c      	cmp	r3, #12
 8003938:	d028      	beq.n	800398c <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	f7ff fbf2 	bl	8003122 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800393e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003948:	f023 0303 	bic.w	r3, r3, #3
 800394c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800394e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003958:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800395c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003960:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7fe fc7b 	bl	800225c <HAL_GetTick>
 8003966:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396a:	f7fe fc77 	bl	800225c <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e00a      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800397c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1ef      	bne.n	800396a <HAL_RCC_OscConfig+0x6ea>
 800398a:	e001      	b.n	8003990 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3734      	adds	r7, #52	; 0x34
 8003996:	46bd      	mov	sp, r7
 8003998:	bd90      	pop	{r4, r7, pc}
 800399a:	bf00      	nop

0800399c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e12d      	b.n	8003c0c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039b0:	4b98      	ldr	r3, [pc, #608]	; (8003c14 <HAL_RCC_ClockConfig+0x278>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d91b      	bls.n	80039f6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039be:	4b95      	ldr	r3, [pc, #596]	; (8003c14 <HAL_RCC_ClockConfig+0x278>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f023 0207 	bic.w	r2, r3, #7
 80039c6:	4993      	ldr	r1, [pc, #588]	; (8003c14 <HAL_RCC_ClockConfig+0x278>)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ce:	f7fe fc45 	bl	800225c <HAL_GetTick>
 80039d2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039d6:	f7fe fc41 	bl	800225c <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e111      	b.n	8003c0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e8:	4b8a      	ldr	r3, [pc, #552]	; (8003c14 <HAL_RCC_ClockConfig+0x278>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d1ef      	bne.n	80039d6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d016      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fae1 	bl	8002fce <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a0c:	f7fe fc26 	bl	800225c <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a14:	f7fe fc22 	bl	800225c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e0f2      	b.n	8003c0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a26:	f7ff fbce 	bl	80031c6 <LL_RCC_IsActiveFlag_HPRE>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f1      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d016      	beq.n	8003a6a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff fad8 	bl	8002ff6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a46:	f7fe fc09 	bl	800225c <HAL_GetTick>
 8003a4a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a4e:	f7fe fc05 	bl	800225c <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e0d5      	b.n	8003c0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003a60:	f7ff fbc3 	bl	80031ea <LL_RCC_IsActiveFlag_C2HPRE>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f1      	beq.n	8003a4e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d016      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fad1 	bl	8003022 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a80:	f7fe fbec 	bl	800225c <HAL_GetTick>
 8003a84:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a88:	f7fe fbe8 	bl	800225c <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e0b8      	b.n	8003c0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a9a:	f7ff fbb9 	bl	8003210 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f1      	beq.n	8003a88 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d016      	beq.n	8003ade <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff facb 	bl	8003050 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003aba:	f7fe fbcf 	bl	800225c <HAL_GetTick>
 8003abe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ac2:	f7fe fbcb 	bl	800225c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e09b      	b.n	8003c0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003ad4:	f7ff fbaf 	bl	8003236 <LL_RCC_IsActiveFlag_PPRE1>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f1      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d017      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff fac1 	bl	8003078 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003af6:	f7fe fbb1 	bl	800225c <HAL_GetTick>
 8003afa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003afe:	f7fe fbad 	bl	800225c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e07d      	b.n	8003c0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b10:	f7ff fba3 	bl	800325a <LL_RCC_IsActiveFlag_PPRE2>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f1      	beq.n	8003afe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d043      	beq.n	8003bae <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d106      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003b2e:	f7ff f861 	bl	8002bf4 <LL_RCC_HSE_IsReady>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d11e      	bne.n	8003b76 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e067      	b.n	8003c0c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d106      	bne.n	8003b52 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003b44:	f7ff fafc 	bl	8003140 <LL_RCC_PLL_IsReady>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d113      	bne.n	8003b76 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e05c      	b.n	8003c0c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d106      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003b5a:	f7ff f9c9 	bl	8002ef0 <LL_RCC_MSI_IsReady>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d108      	bne.n	8003b76 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e051      	b.n	8003c0c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003b68:	f7ff f874 	bl	8002c54 <LL_RCC_HSI_IsReady>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e04a      	b.n	8003c0c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fa07 	bl	8002f8e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b80:	f7fe fb6c 	bl	800225c <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	e00a      	b.n	8003b9e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b88:	f7fe fb68 	bl	800225c <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e036      	b.n	8003c0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	f7ff fa0a 	bl	8002fb6 <LL_RCC_GetSysClkSource>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d1ec      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bae:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d21b      	bcs.n	8003bf4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bbc:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f023 0207 	bic.w	r2, r3, #7
 8003bc4:	4913      	ldr	r1, [pc, #76]	; (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bcc:	f7fe fb46 	bl	800225c <HAL_GetTick>
 8003bd0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003bd4:	f7fe fb42 	bl	800225c <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e012      	b.n	8003c0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_RCC_ClockConfig+0x278>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d1ef      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003bf4:	f000 f87e 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	4a07      	ldr	r2, [pc, #28]	; (8003c18 <HAL_RCC_ClockConfig+0x27c>)
 8003bfc:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003bfe:	f7fe fb39 	bl	8002274 <HAL_GetTickPrio>
 8003c02:	4603      	mov	r3, r0
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fe fadb 	bl	80021c0 <HAL_InitTick>
 8003c0a:	4603      	mov	r3, r0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	58004000 	.word	0x58004000
 8003c18:	20000008 	.word	0x20000008

08003c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c22:	f7ff f9c8 	bl	8002fb6 <LL_RCC_GetSysClkSource>
 8003c26:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003c2e:	f7ff f984 	bl	8002f3a <LL_RCC_MSI_GetRange>
 8003c32:	4603      	mov	r3, r0
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	4a2b      	ldr	r2, [pc, #172]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	e04b      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d102      	bne.n	8003c50 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c4a:	4b28      	ldr	r3, [pc, #160]	; (8003cec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	e045      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d10a      	bne.n	8003c6c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003c56:	f7fe ff9d 	bl	8002b94 <LL_RCC_HSE_IsEnabledDiv2>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d102      	bne.n	8003c66 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003c60:	4b22      	ldr	r3, [pc, #136]	; (8003cec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	e03a      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003c66:	4b22      	ldr	r3, [pc, #136]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	e037      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003c6c:	f7ff fa9f 	bl	80031ae <LL_RCC_PLL_GetMainSource>
 8003c70:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d003      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x64>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d003      	beq.n	8003c86 <HAL_RCC_GetSysClockFreq+0x6a>
 8003c7e:	e00d      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003c80:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c82:	60bb      	str	r3, [r7, #8]
        break;
 8003c84:	e015      	b.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003c86:	f7fe ff85 	bl	8002b94 <LL_RCC_HSE_IsEnabledDiv2>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d102      	bne.n	8003c96 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003c90:	4b16      	ldr	r3, [pc, #88]	; (8003cec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c92:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003c94:	e00d      	b.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003c96:	4b16      	ldr	r3, [pc, #88]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003c98:	60bb      	str	r3, [r7, #8]
        break;
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003c9c:	f7ff f94d 	bl	8002f3a <LL_RCC_MSI_GetRange>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	091b      	lsrs	r3, r3, #4
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	4a0f      	ldr	r2, [pc, #60]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cae:	60bb      	str	r3, [r7, #8]
        break;
 8003cb0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003cb2:	f7ff fa57 	bl	8003164 <LL_RCC_PLL_GetN>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	fb03 f402 	mul.w	r4, r3, r2
 8003cbe:	f7ff fa6a 	bl	8003196 <LL_RCC_PLL_GetDivider>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	fbb4 f4f3 	udiv	r4, r4, r3
 8003ccc:	f7ff fa57 	bl	800317e <LL_RCC_PLL_GetR>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	0f5b      	lsrs	r3, r3, #29
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	fbb4 f3f3 	udiv	r3, r4, r3
 8003cda:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd90      	pop	{r4, r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	0800bbc4 	.word	0x0800bbc4
 8003cec:	00f42400 	.word	0x00f42400
 8003cf0:	01e84800 	.word	0x01e84800

08003cf4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf4:	b598      	push	{r3, r4, r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003cf8:	f7ff ff90 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	f7ff f9cf 	bl	80030a0 <LL_RCC_GetAHBPrescaler>
 8003d02:	4603      	mov	r3, r0
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	4a03      	ldr	r2, [pc, #12]	; (8003d18 <HAL_RCC_GetHCLKFreq+0x24>)
 8003d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d10:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	bd98      	pop	{r3, r4, r7, pc}
 8003d18:	0800bb64 	.word	0x0800bb64

08003d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d1c:	b598      	push	{r3, r4, r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003d20:	f7ff ffe8 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d24:	4604      	mov	r4, r0
 8003d26:	f7ff f9d5 	bl	80030d4 <LL_RCC_GetAPB1Prescaler>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	bd98      	pop	{r3, r4, r7, pc}
 8003d44:	0800bba4 	.word	0x0800bba4

08003d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d48:	b598      	push	{r3, r4, r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003d4c:	f7ff ffd2 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d50:	4604      	mov	r4, r0
 8003d52:	f7ff f9cb 	bl	80030ec <LL_RCC_GetAPB2Prescaler>
 8003d56:	4603      	mov	r3, r0
 8003d58:	0adb      	lsrs	r3, r3, #11
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	4a04      	ldr	r2, [pc, #16]	; (8003d70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd98      	pop	{r3, r4, r7, pc}
 8003d70:	0800bba4 	.word	0x0800bba4

08003d74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003d74:	b590      	push	{r4, r7, lr}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2bb0      	cmp	r3, #176	; 0xb0
 8003d80:	d903      	bls.n	8003d8a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003d82:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	e007      	b.n	8003d9a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	4a11      	ldr	r2, [pc, #68]	; (8003dd8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d98:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003d9a:	f7ff f98d 	bl	80030b8 <LL_RCC_GetAHB4Prescaler>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	4a0d      	ldr	r2, [pc, #52]	; (8003ddc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	0c9c      	lsrs	r4, r3, #18
 8003dbe:	f7fe fedb 	bl	8002b78 <HAL_PWREx_GetVoltageRange>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	f000 f80c 	bl	8003de4 <RCC_SetFlashLatency>
 8003dcc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd90      	pop	{r4, r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	0800bbc4 	.word	0x0800bbc4
 8003ddc:	0800bb64 	.word	0x0800bb64
 8003de0:	431bde83 	.word	0x431bde83

08003de4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003de4:	b590      	push	{r4, r7, lr}
 8003de6:	b093      	sub	sp, #76	; 0x4c
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003dee:	4b37      	ldr	r3, [pc, #220]	; (8003ecc <RCC_SetFlashLatency+0xe8>)
 8003df0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003df4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003df6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003dfa:	4a35      	ldr	r2, [pc, #212]	; (8003ed0 <RCC_SetFlashLatency+0xec>)
 8003dfc:	f107 031c 	add.w	r3, r7, #28
 8003e00:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003e06:	4b33      	ldr	r3, [pc, #204]	; (8003ed4 <RCC_SetFlashLatency+0xf0>)
 8003e08:	f107 040c 	add.w	r4, r7, #12
 8003e0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003e12:	2300      	movs	r3, #0
 8003e14:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e1c:	d11a      	bne.n	8003e54 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e1e:	2300      	movs	r3, #0
 8003e20:	643b      	str	r3, [r7, #64]	; 0x40
 8003e22:	e013      	b.n	8003e4c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	3348      	adds	r3, #72	; 0x48
 8003e2a:	443b      	add	r3, r7
 8003e2c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d807      	bhi.n	8003e46 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	3348      	adds	r3, #72	; 0x48
 8003e3c:	443b      	add	r3, r7
 8003e3e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003e42:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003e44:	e020      	b.n	8003e88 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e48:	3301      	adds	r3, #1
 8003e4a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d9e8      	bls.n	8003e24 <RCC_SetFlashLatency+0x40>
 8003e52:	e019      	b.n	8003e88 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e54:	2300      	movs	r3, #0
 8003e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e58:	e013      	b.n	8003e82 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	3348      	adds	r3, #72	; 0x48
 8003e60:	443b      	add	r3, r7
 8003e62:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d807      	bhi.n	8003e7c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	3348      	adds	r3, #72	; 0x48
 8003e72:	443b      	add	r3, r7
 8003e74:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003e78:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003e7a:	e005      	b.n	8003e88 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e7e:	3301      	adds	r3, #1
 8003e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d9e8      	bls.n	8003e5a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003e88:	4b13      	ldr	r3, [pc, #76]	; (8003ed8 <RCC_SetFlashLatency+0xf4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f023 0207 	bic.w	r2, r3, #7
 8003e90:	4911      	ldr	r1, [pc, #68]	; (8003ed8 <RCC_SetFlashLatency+0xf4>)
 8003e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e94:	4313      	orrs	r3, r2
 8003e96:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e98:	f7fe f9e0 	bl	800225c <HAL_GetTick>
 8003e9c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003e9e:	e008      	b.n	8003eb2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ea0:	f7fe f9dc 	bl	800225c <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e007      	b.n	8003ec2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <RCC_SetFlashLatency+0xf4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d1ef      	bne.n	8003ea0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	374c      	adds	r7, #76	; 0x4c
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd90      	pop	{r4, r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	0800b988 	.word	0x0800b988
 8003ed0:	0800b998 	.word	0x0800b998
 8003ed4:	0800b9a4 	.word	0x0800b9a4
 8003ed8:	58004000 	.word	0x58004000

08003edc <LL_RCC_LSE_IsEnabled>:
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <LL_RCC_LSE_IsEnabled+0x18>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <LL_RCC_LSE_IsEnabled+0x1a>
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <LL_RCC_LSE_IsReady>:
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d101      	bne.n	8003f18 <LL_RCC_LSE_IsReady+0x18>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e000      	b.n	8003f1a <LL_RCC_LSE_IsReady+0x1a>
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <LL_RCC_MSI_EnablePLLMode>:
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f32:	f043 0304 	orr.w	r3, r3, #4
 8003f36:	6013      	str	r3, [r2, #0]
}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <LL_RCC_SetRFWKPClockSource>:
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <LL_RCC_SetSMPSClockSource>:
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	f023 0203 	bic.w	r2, r3, #3
 8003f80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <LL_RCC_SetSMPSPrescaler>:
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <LL_RCC_SetUSARTClockSource>:
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f023 0203 	bic.w	r2, r3, #3
 8003fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <LL_RCC_SetLPUARTClockSource>:
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <LL_RCC_SetI2CClockSource>:
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800401e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004022:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800402e:	43db      	mvns	r3, r3
 8004030:	401a      	ands	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800403a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <LL_RCC_SetLPTIMClockSource>:
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	0c1b      	lsrs	r3, r3, #16
 8004064:	041b      	lsls	r3, r3, #16
 8004066:	43db      	mvns	r3, r3
 8004068:	401a      	ands	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	041b      	lsls	r3, r3, #16
 800406e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <LL_RCC_SetSAIClockSource>:
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800408c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004094:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <LL_RCC_SetRNGClockSource>:
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80040b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80040c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <LL_RCC_SetCLK48ClockSource>:
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80040e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <LL_RCC_SetUSBClockSource>:
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ffe3 	bl	80040dc <LL_RCC_SetCLK48ClockSource>
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <LL_RCC_SetADCClockSource>:
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004132:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <LL_RCC_SetRTCClockSource>:
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800415e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <LL_RCC_GetRTCClockSource>:
{
 8004176:	b480      	push	{r7}
 8004178:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800417a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004182:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004186:	4618      	mov	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <LL_RCC_ForceBackupDomainReset>:
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80041b2:	b480      	push	{r7}
 80041b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80041b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80041ca:	bf00      	nop
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <LL_RCC_PLLSAI1_Enable>:
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80041d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041e6:	6013      	str	r3, [r2, #0]
}
 80041e8:	bf00      	nop
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <LL_RCC_PLLSAI1_Disable>:
{
 80041f2:	b480      	push	{r7}
 80041f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80041f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004200:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004204:	6013      	str	r3, [r2, #0]
}
 8004206:	bf00      	nop
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <LL_RCC_PLLSAI1_IsReady>:
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800421e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004222:	d101      	bne.n	8004228 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800423c:	2300      	movs	r3, #0
 800423e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004240:	2300      	movs	r3, #0
 8004242:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d034      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004258:	d021      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800425a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800425e:	d81b      	bhi.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004260:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004264:	d01d      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004266:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800426a:	d815      	bhi.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00b      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004274:	d110      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004284:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004286:	e00d      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	4618      	mov	r0, r3
 800428e:	f000 f94d 	bl	800452c <RCCEx_PLLSAI1_ConfigNP>
 8004292:	4603      	mov	r3, r0
 8004294:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004296:	e005      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	77fb      	strb	r3, [r7, #31]
        break;
 800429c:	e002      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800429e:	bf00      	nop
 80042a0:	e000      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80042a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a4:	7ffb      	ldrb	r3, [r7, #31]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d105      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fee8 	bl	8004084 <LL_RCC_SetSAIClockSource>
 80042b4:	e001      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b6:	7ffb      	ldrb	r3, [r7, #31]
 80042b8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d046      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80042c6:	f7ff ff56 	bl	8004176 <LL_RCC_GetRTCClockSource>
 80042ca:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d03c      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80042d6:	f7fe fc3f 	bl	8002b58 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff ff30 	bl	800414a <LL_RCC_SetRTCClockSource>
 80042ea:	e02e      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80042ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80042f6:	f7ff ff4b 	bl	8004190 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80042fa:	f7ff ff5a 	bl	80041b2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800430c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004316:	f7ff fde1 	bl	8003edc <LL_RCC_LSE_IsEnabled>
 800431a:	4603      	mov	r3, r0
 800431c:	2b01      	cmp	r3, #1
 800431e:	d114      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004320:	f7fd ff9c 	bl	800225c <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004326:	e00b      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004328:	f7fd ff98 	bl	800225c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f241 3288 	movw	r2, #5000	; 0x1388
 8004336:	4293      	cmp	r3, r2
 8004338:	d902      	bls.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	77fb      	strb	r3, [r7, #31]
              break;
 800433e:	e004      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004340:	f7ff fdde 	bl	8003f00 <LL_RCC_LSE_IsReady>
 8004344:	4603      	mov	r3, r0
 8004346:	2b01      	cmp	r3, #1
 8004348:	d1ee      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800434a:	7ffb      	ldrb	r3, [r7, #31]
 800434c:	77bb      	strb	r3, [r7, #30]
 800434e:	e001      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	7ffb      	ldrb	r3, [r7, #31]
 8004352:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d004      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff fe2a 	bl	8003fbe <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d004      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff fe35 	bl	8003fea <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	d004      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff fe5d 	bl	8004050 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d004      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fe52 	bl	8004050 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d004      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fe2a 	bl	8004016 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d004      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff fe1f 	bl	8004016 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d022      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff fe8d 	bl	8004108 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043f6:	d107      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80043f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004406:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004410:	d10b      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3304      	adds	r3, #4
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f8e3 	bl	80045e2 <RCCEx_PLLSAI1_ConfigNQ>
 800441c:	4603      	mov	r3, r0
 800441e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004420:	7ffb      	ldrb	r3, [r7, #31]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8004426:	7ffb      	ldrb	r3, [r7, #31]
 8004428:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004432:	2b00      	cmp	r3, #0
 8004434:	d02b      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443e:	d008      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004448:	d003      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	2b00      	cmp	r3, #0
 8004450:	d105      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff fe2a 	bl	80040b0 <LL_RCC_SetRNGClockSource>
 800445c:	e00a      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	2000      	movs	r0, #0
 800446a:	f7ff fe21 	bl	80040b0 <LL_RCC_SetRNGClockSource>
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f7ff fe34 	bl	80040dc <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800447c:	d107      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800447e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004488:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800448c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004496:	2b00      	cmp	r3, #0
 8004498:	d022      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff fe3d 	bl	800411e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044ac:	d107      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044bc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044c6:	d10b      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3304      	adds	r3, #4
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 f8e3 	bl	8004698 <RCCEx_PLLSAI1_ConfigNR>
 80044d2:	4603      	mov	r3, r0
 80044d4:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80044d6:	7ffb      	ldrb	r3, [r7, #31]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80044dc:	7ffb      	ldrb	r3, [r7, #31]
 80044de:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d004      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fd26 	bl	8003f42 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff fd45 	bl	8003f96 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff fd2c 	bl	8003f6e <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8004516:	7fbb      	ldrb	r3, [r7, #30]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3720      	adds	r7, #32
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004524:	f7ff fcfe 	bl	8003f24 <LL_RCC_MSI_EnablePLLMode>
}
 8004528:	bf00      	nop
 800452a:	bd80      	pop	{r7, pc}

0800452c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004538:	f7ff fe5b 	bl	80041f2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800453c:	f7fd fe8e 	bl	800225c <HAL_GetTick>
 8004540:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004542:	e009      	b.n	8004558 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004544:	f7fd fe8a 	bl	800225c <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d902      	bls.n	8004558 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	73fb      	strb	r3, [r7, #15]
      break;
 8004556:	e004      	b.n	8004562 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004558:	f7ff fe5a 	bl	8004210 <LL_RCC_PLLSAI1_IsReady>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d137      	bne.n	80045d8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800457c:	4313      	orrs	r3, r2
 800457e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004592:	4313      	orrs	r3, r2
 8004594:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004596:	f7ff fe1d 	bl	80041d4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800459a:	f7fd fe5f 	bl	800225c <HAL_GetTick>
 800459e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045a0:	e009      	b.n	80045b6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045a2:	f7fd fe5b 	bl	800225c <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d902      	bls.n	80045b6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	73fb      	strb	r3, [r7, #15]
        break;
 80045b4:	e004      	b.n	80045c0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045b6:	f7ff fe2b 	bl	8004210 <LL_RCC_PLLSAI1_IsReady>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d1f0      	bne.n	80045a2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d108      	bne.n	80045d8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80045c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045d4:	4313      	orrs	r3, r2
 80045d6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80045ee:	f7ff fe00 	bl	80041f2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80045f2:	f7fd fe33 	bl	800225c <HAL_GetTick>
 80045f6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80045f8:	e009      	b.n	800460e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045fa:	f7fd fe2f 	bl	800225c <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d902      	bls.n	800460e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	73fb      	strb	r3, [r7, #15]
      break;
 800460c:	e004      	b.n	8004618 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800460e:	f7ff fdff 	bl	8004210 <LL_RCC_PLLSAI1_IsReady>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d137      	bne.n	800468e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800461e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004632:	4313      	orrs	r3, r2
 8004634:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004648:	4313      	orrs	r3, r2
 800464a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800464c:	f7ff fdc2 	bl	80041d4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004650:	f7fd fe04 	bl	800225c <HAL_GetTick>
 8004654:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004656:	e009      	b.n	800466c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004658:	f7fd fe00 	bl	800225c <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d902      	bls.n	800466c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	73fb      	strb	r3, [r7, #15]
        break;
 800466a:	e004      	b.n	8004676 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800466c:	f7ff fdd0 	bl	8004210 <LL_RCC_PLLSAI1_IsReady>
 8004670:	4603      	mov	r3, r0
 8004672:	2b01      	cmp	r3, #1
 8004674:	d1f0      	bne.n	8004658 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d108      	bne.n	800468e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800467c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800468a:	4313      	orrs	r3, r2
 800468c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800468e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80046a4:	f7ff fda5 	bl	80041f2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80046a8:	f7fd fdd8 	bl	800225c <HAL_GetTick>
 80046ac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046ae:	e009      	b.n	80046c4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046b0:	f7fd fdd4 	bl	800225c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d902      	bls.n	80046c4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	73fb      	strb	r3, [r7, #15]
      break;
 80046c2:	e004      	b.n	80046ce <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046c4:	f7ff fda4 	bl	8004210 <LL_RCC_PLLSAI1_IsReady>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d137      	bne.n	8004744 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80046d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	021b      	lsls	r3, r3, #8
 80046e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046e8:	4313      	orrs	r3, r2
 80046ea:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80046ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046fe:	4313      	orrs	r3, r2
 8004700:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004702:	f7ff fd67 	bl	80041d4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004706:	f7fd fda9 	bl	800225c <HAL_GetTick>
 800470a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800470c:	e009      	b.n	8004722 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800470e:	f7fd fda5 	bl	800225c <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d902      	bls.n	8004722 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	73fb      	strb	r3, [r7, #15]
        break;
 8004720:	e004      	b.n	800472c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004722:	f7ff fd75 	bl	8004210 <LL_RCC_PLLSAI1_IsReady>
 8004726:	4603      	mov	r3, r0
 8004728:	2b01      	cmp	r3, #1
 800472a:	d1f0      	bne.n	800470e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d108      	bne.n	8004744 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004740:	4313      	orrs	r3, r2
 8004742:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004744:	7bfb      	ldrb	r3, [r7, #15]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <LL_RCC_GetUSARTClockSource>:
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800475a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4013      	ands	r3, r2
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <LL_RCC_GetLPUARTClockSource>:
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4013      	ands	r3, r2
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e042      	b.n	8004826 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fd fb5e 	bl	8001e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2224      	movs	r2, #36	; 0x24
 80047bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0201 	bic.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fdcb 	bl	800536c <UART_SetConfig>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e022      	b.n	8004826 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 ffe7 	bl	80057bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800480c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 0201 	orr.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f001 f86e 	bl	8005900 <UART_CheckIdleState>
 8004824:	4603      	mov	r3, r0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b08a      	sub	sp, #40	; 0x28
 8004832:	af02      	add	r7, sp, #8
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	4613      	mov	r3, r2
 800483c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004844:	2b20      	cmp	r3, #32
 8004846:	f040 8083 	bne.w	8004950 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_UART_Transmit+0x28>
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e07b      	b.n	8004952 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_UART_Transmit+0x3a>
 8004864:	2302      	movs	r3, #2
 8004866:	e074      	b.n	8004952 <HAL_UART_Transmit+0x124>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2221      	movs	r2, #33	; 0x21
 800487c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004880:	f7fd fcec 	bl	800225c <HAL_GetTick>
 8004884:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	88fa      	ldrh	r2, [r7, #6]
 800488a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	88fa      	ldrh	r2, [r7, #6]
 8004892:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489e:	d108      	bne.n	80048b2 <HAL_UART_Transmit+0x84>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d104      	bne.n	80048b2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	61bb      	str	r3, [r7, #24]
 80048b0:	e003      	b.n	80048ba <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80048c2:	e02c      	b.n	800491e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2200      	movs	r2, #0
 80048cc:	2180      	movs	r1, #128	; 0x80
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f001 f861 	bl	8005996 <UART_WaitOnFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e039      	b.n	8004952 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10b      	bne.n	80048fc <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	3302      	adds	r3, #2
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	e007      	b.n	800490c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	781a      	ldrb	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3301      	adds	r3, #1
 800490a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1cc      	bne.n	80048c4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2200      	movs	r2, #0
 8004932:	2140      	movs	r1, #64	; 0x40
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f001 f82e 	bl	8005996 <UART_WaitOnFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e006      	b.n	8004952 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	e000      	b.n	8004952 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004950:	2302      	movs	r3, #2
  }
}
 8004952:	4618      	mov	r0, r3
 8004954:	3720      	adds	r7, #32
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b08a      	sub	sp, #40	; 0x28
 800495e:	af02      	add	r7, sp, #8
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	4613      	mov	r3, r2
 8004968:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004970:	2b20      	cmp	r3, #32
 8004972:	f040 80c0 	bne.w	8004af6 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <HAL_UART_Receive+0x28>
 800497c:	88fb      	ldrh	r3, [r7, #6]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e0b8      	b.n	8004af8 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_UART_Receive+0x3a>
 8004990:	2302      	movs	r3, #2
 8004992:	e0b1      	b.n	8004af8 <HAL_UART_Receive+0x19e>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2222      	movs	r2, #34	; 0x22
 80049a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049b2:	f7fd fc53 	bl	800225c <HAL_GetTick>
 80049b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	88fa      	ldrh	r2, [r7, #6]
 80049bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	88fa      	ldrh	r2, [r7, #6]
 80049c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d0:	d10e      	bne.n	80049f0 <HAL_UART_Receive+0x96>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d105      	bne.n	80049e6 <HAL_UART_Receive+0x8c>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80049e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049e4:	e02d      	b.n	8004a42 <HAL_UART_Receive+0xe8>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	22ff      	movs	r2, #255	; 0xff
 80049ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049ee:	e028      	b.n	8004a42 <HAL_UART_Receive+0xe8>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10d      	bne.n	8004a14 <HAL_UART_Receive+0xba>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d104      	bne.n	8004a0a <HAL_UART_Receive+0xb0>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	22ff      	movs	r2, #255	; 0xff
 8004a04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a08:	e01b      	b.n	8004a42 <HAL_UART_Receive+0xe8>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	227f      	movs	r2, #127	; 0x7f
 8004a0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a12:	e016      	b.n	8004a42 <HAL_UART_Receive+0xe8>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a1c:	d10d      	bne.n	8004a3a <HAL_UART_Receive+0xe0>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d104      	bne.n	8004a30 <HAL_UART_Receive+0xd6>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	227f      	movs	r2, #127	; 0x7f
 8004a2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a2e:	e008      	b.n	8004a42 <HAL_UART_Receive+0xe8>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	223f      	movs	r2, #63	; 0x3f
 8004a34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a38:	e003      	b.n	8004a42 <HAL_UART_Receive+0xe8>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004a48:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a52:	d108      	bne.n	8004a66 <HAL_UART_Receive+0x10c>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d104      	bne.n	8004a66 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	e003      	b.n	8004a6e <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004a76:	e032      	b.n	8004ade <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2120      	movs	r1, #32
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 ff87 	bl	8005996 <UART_WaitOnFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e032      	b.n	8004af8 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10c      	bne.n	8004ab2 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	8a7b      	ldrh	r3, [r7, #18]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	3302      	adds	r3, #2
 8004aae:	61bb      	str	r3, [r7, #24]
 8004ab0:	e00c      	b.n	8004acc <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	8a7b      	ldrh	r3, [r7, #18]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	4013      	ands	r3, r2
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1c6      	bne.n	8004a78 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e000      	b.n	8004af8 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8004af6:	2302      	movs	r3, #2
  }
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3720      	adds	r7, #32
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b091      	sub	sp, #68	; 0x44
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	f040 808c 	bne.w	8004c32 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_UART_Transmit_IT+0x26>
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e084      	b.n	8004c34 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_UART_Transmit_IT+0x38>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e07d      	b.n	8004c34 <HAL_UART_Transmit_IT+0x134>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	88fa      	ldrh	r2, [r7, #6]
 8004b4a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	88fa      	ldrh	r2, [r7, #6]
 8004b52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2221      	movs	r2, #33	; 0x21
 8004b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b74:	d12e      	bne.n	8004bd4 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7e:	d107      	bne.n	8004b90 <HAL_UART_Transmit_IT+0x90>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d103      	bne.n	8004b90 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4a2d      	ldr	r2, [pc, #180]	; (8004c40 <HAL_UART_Transmit_IT+0x140>)
 8004b8c:	675a      	str	r2, [r3, #116]	; 0x74
 8004b8e:	e002      	b.n	8004b96 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4a2c      	ldr	r2, [pc, #176]	; (8004c44 <HAL_UART_Transmit_IT+0x144>)
 8004b94:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3308      	adds	r3, #8
 8004bbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bbe:	637a      	str	r2, [r7, #52]	; 0x34
 8004bc0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bc6:	e841 2300 	strex	r3, r2, [r1]
 8004bca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1e5      	bne.n	8004b9e <HAL_UART_Transmit_IT+0x9e>
 8004bd2:	e02c      	b.n	8004c2e <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bdc:	d107      	bne.n	8004bee <HAL_UART_Transmit_IT+0xee>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4a17      	ldr	r2, [pc, #92]	; (8004c48 <HAL_UART_Transmit_IT+0x148>)
 8004bea:	675a      	str	r2, [r3, #116]	; 0x74
 8004bec:	e002      	b.n	8004bf4 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4a16      	ldr	r2, [pc, #88]	; (8004c4c <HAL_UART_Transmit_IT+0x14c>)
 8004bf2:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	613b      	str	r3, [r7, #16]
   return(result);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1a:	623b      	str	r3, [r7, #32]
 8004c1c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	69f9      	ldr	r1, [r7, #28]
 8004c20:	6a3a      	ldr	r2, [r7, #32]
 8004c22:	e841 2300 	strex	r3, r2, [r1]
 8004c26:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1e6      	bne.n	8004bfc <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	e000      	b.n	8004c34 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8004c32:	2302      	movs	r3, #2
  }
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3744      	adds	r7, #68	; 0x44
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	08006083 	.word	0x08006083
 8004c44:	08005fa3 	.word	0x08005fa3
 8004c48:	08005ee1 	.word	0x08005ee1
 8004c4c:	08005e29 	.word	0x08005e29

08004c50 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08a      	sub	sp, #40	; 0x28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d142      	bne.n	8004cee <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_UART_Receive_IT+0x24>
 8004c6e:	88fb      	ldrh	r3, [r7, #6]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e03b      	b.n	8004cf0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Receive_IT+0x36>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e034      	b.n	8004cf0 <HAL_UART_Receive_IT+0xa0>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <HAL_UART_Receive_IT+0xa8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d01f      	beq.n	8004cde <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d018      	beq.n	8004cde <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	e853 3f00 	ldrex	r3, [r3]
 8004cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	623b      	str	r3, [r7, #32]
 8004ccc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cce:	69f9      	ldr	r1, [r7, #28]
 8004cd0:	6a3a      	ldr	r2, [r7, #32]
 8004cd2:	e841 2300 	strex	r3, r2, [r1]
 8004cd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e6      	bne.n	8004cac <HAL_UART_Receive_IT+0x5c>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 ff1f 	bl	8005b28 <UART_Start_Receive_IT>
 8004cea:	4603      	mov	r3, r0
 8004cec:	e000      	b.n	8004cf0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004cee:	2302      	movs	r3, #2
  }
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3728      	adds	r7, #40	; 0x28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40008000 	.word	0x40008000

08004cfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b0ba      	sub	sp, #232	; 0xe8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004d26:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004d30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d11b      	bne.n	8004d70 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d015      	beq.n	8004d70 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d105      	bne.n	8004d5c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d009      	beq.n	8004d70 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 82d6 	beq.w	8005312 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	4798      	blx	r3
      }
      return;
 8004d6e:	e2d0      	b.n	8005312 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 811f 	beq.w	8004fb8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004d7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004d7e:	4b8b      	ldr	r3, [pc, #556]	; (8004fac <HAL_UART_IRQHandler+0x2b0>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004d86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004d8a:	4b89      	ldr	r3, [pc, #548]	; (8004fb0 <HAL_UART_IRQHandler+0x2b4>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 8112 	beq.w	8004fb8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d011      	beq.n	8004dc4 <HAL_UART_IRQHandler+0xc8>
 8004da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00b      	beq.n	8004dc4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2201      	movs	r2, #1
 8004db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dba:	f043 0201 	orr.w	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d011      	beq.n	8004df4 <HAL_UART_IRQHandler+0xf8>
 8004dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00b      	beq.n	8004df4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2202      	movs	r2, #2
 8004de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dea:	f043 0204 	orr.w	r2, r3, #4
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d011      	beq.n	8004e24 <HAL_UART_IRQHandler+0x128>
 8004e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00b      	beq.n	8004e24 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2204      	movs	r2, #4
 8004e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e1a:	f043 0202 	orr.w	r2, r3, #2
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d017      	beq.n	8004e60 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d105      	bne.n	8004e48 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004e3c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004e40:	4b5a      	ldr	r3, [pc, #360]	; (8004fac <HAL_UART_IRQHandler+0x2b0>)
 8004e42:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00b      	beq.n	8004e60 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e56:	f043 0208 	orr.w	r2, r3, #8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d012      	beq.n	8004e92 <HAL_UART_IRQHandler+0x196>
 8004e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00c      	beq.n	8004e92 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e88:	f043 0220 	orr.w	r2, r3, #32
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 823c 	beq.w	8005316 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d013      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d105      	bne.n	8004ec2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ed8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee6:	2b40      	cmp	r3, #64	; 0x40
 8004ee8:	d005      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004eea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004eee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d04f      	beq.n	8004f96 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 ff1a 	bl	8005d30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b40      	cmp	r3, #64	; 0x40
 8004f08:	d141      	bne.n	8004f8e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3308      	adds	r3, #8
 8004f32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1d9      	bne.n	8004f0a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d013      	beq.n	8004f86 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f62:	4a14      	ldr	r2, [pc, #80]	; (8004fb4 <HAL_UART_IRQHandler+0x2b8>)
 8004f64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fd fafc 	bl	8002568 <HAL_DMA_Abort_IT>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d017      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004f80:	4610      	mov	r0, r2
 8004f82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	e00f      	b.n	8004fa6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f9da 	bl	8005340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f8c:	e00b      	b.n	8004fa6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f9d6 	bl	8005340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f94:	e007      	b.n	8004fa6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f9d2 	bl	8005340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004fa4:	e1b7      	b.n	8005316 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa6:	bf00      	nop
    return;
 8004fa8:	e1b5      	b.n	8005316 <HAL_UART_IRQHandler+0x61a>
 8004faa:	bf00      	nop
 8004fac:	10000001 	.word	0x10000001
 8004fb0:	04000120 	.word	0x04000120
 8004fb4:	08005dfd 	.word	0x08005dfd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	f040 814a 	bne.w	8005256 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc6:	f003 0310 	and.w	r3, r3, #16
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 8143 	beq.w	8005256 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 813c 	beq.w	8005256 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2210      	movs	r2, #16
 8004fe4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff0:	2b40      	cmp	r3, #64	; 0x40
 8004ff2:	f040 80b5 	bne.w	8005160 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8005002:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 8187 	beq.w	800531a <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005016:	429a      	cmp	r2, r3
 8005018:	f080 817f 	bcs.w	800531a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005022:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	f040 8086 	bne.w	8005144 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005040:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800504c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005054:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005062:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005066:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800506e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800507a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1da      	bne.n	8005038 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3308      	adds	r3, #8
 8005088:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3308      	adds	r3, #8
 80050a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80050a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80050aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80050ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e1      	bne.n	8005082 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3308      	adds	r3, #8
 80050c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3308      	adds	r3, #8
 80050de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e3      	bne.n	80050be <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005114:	f023 0310 	bic.w	r3, r3, #16
 8005118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005126:	65bb      	str	r3, [r7, #88]	; 0x58
 8005128:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800512c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e4      	bne.n	8005104 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800513e:	4618      	mov	r0, r3
 8005140:	f7fd f9b3 	bl	80024aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005150:	b29b      	uxth	r3, r3
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	b29b      	uxth	r3, r3
 8005156:	4619      	mov	r1, r3
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f8fb 	bl	8005354 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800515e:	e0dc      	b.n	800531a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800516c:	b29b      	uxth	r3, r3
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800517a:	b29b      	uxth	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 80ce 	beq.w	800531e <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8005182:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 80c9 	beq.w	800531e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800519a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051ae:	647b      	str	r3, [r7, #68]	; 0x44
 80051b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e4      	bne.n	800518c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3308      	adds	r3, #8
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	623b      	str	r3, [r7, #32]
   return(result);
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d8:	f023 0301 	bic.w	r3, r3, #1
 80051dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3308      	adds	r3, #8
 80051e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051ea:	633a      	str	r2, [r7, #48]	; 0x30
 80051ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e1      	bne.n	80051c2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0310 	bic.w	r3, r3, #16
 8005226:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	69b9      	ldr	r1, [r7, #24]
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	e841 2300 	strex	r3, r2, [r1]
 8005240:	617b      	str	r3, [r7, #20]
   return(result);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e4      	bne.n	8005212 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005248:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800524c:	4619      	mov	r1, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f880 	bl	8005354 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005254:	e063      	b.n	800531e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800525a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00e      	beq.n	8005280 <HAL_UART_IRQHandler+0x584>
 8005262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d008      	beq.n	8005280 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005276:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f001 fbff 	bl	8006a7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800527e:	e051      	b.n	8005324 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005288:	2b00      	cmp	r3, #0
 800528a:	d014      	beq.n	80052b6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800528c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005294:	2b00      	cmp	r3, #0
 8005296:	d105      	bne.n	80052a4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800529c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d008      	beq.n	80052b6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d03a      	beq.n	8005322 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	4798      	blx	r3
    }
    return;
 80052b4:	e035      	b.n	8005322 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d009      	beq.n	80052d6 <HAL_UART_IRQHandler+0x5da>
 80052c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 ff4c 	bl	800616c <UART_EndTransmit_IT>
    return;
 80052d4:	e026      	b.n	8005324 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80052d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d009      	beq.n	80052f6 <HAL_UART_IRQHandler+0x5fa>
 80052e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f001 fbd8 	bl	8006aa4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052f4:	e016      	b.n	8005324 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80052f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d010      	beq.n	8005324 <HAL_UART_IRQHandler+0x628>
 8005302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005306:	2b00      	cmp	r3, #0
 8005308:	da0c      	bge.n	8005324 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f001 fbc0 	bl	8006a90 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005310:	e008      	b.n	8005324 <HAL_UART_IRQHandler+0x628>
      return;
 8005312:	bf00      	nop
 8005314:	e006      	b.n	8005324 <HAL_UART_IRQHandler+0x628>
    return;
 8005316:	bf00      	nop
 8005318:	e004      	b.n	8005324 <HAL_UART_IRQHandler+0x628>
      return;
 800531a:	bf00      	nop
 800531c:	e002      	b.n	8005324 <HAL_UART_IRQHandler+0x628>
      return;
 800531e:	bf00      	nop
 8005320:	e000      	b.n	8005324 <HAL_UART_IRQHandler+0x628>
    return;
 8005322:	bf00      	nop
  }
}
 8005324:	37e8      	adds	r7, #232	; 0xe8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop

0800532c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800536c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005370:	b08c      	sub	sp, #48	; 0x30
 8005372:	af00      	add	r7, sp, #0
 8005374:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	431a      	orrs	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	431a      	orrs	r2, r3
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	4313      	orrs	r3, r2
 8005392:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4baf      	ldr	r3, [pc, #700]	; (8005658 <UART_SetConfig+0x2ec>)
 800539c:	4013      	ands	r3, r2
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053a4:	430b      	orrs	r3, r1
 80053a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	68da      	ldr	r2, [r3, #12]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4aa4      	ldr	r2, [pc, #656]	; (800565c <UART_SetConfig+0x2f0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053d4:	4313      	orrs	r3, r2
 80053d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80053e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053ec:	430b      	orrs	r3, r1
 80053ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	f023 010f 	bic.w	r1, r3, #15
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a95      	ldr	r2, [pc, #596]	; (8005660 <UART_SetConfig+0x2f4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d125      	bne.n	800545c <UART_SetConfig+0xf0>
 8005410:	2003      	movs	r0, #3
 8005412:	f7ff f99c 	bl	800474e <LL_RCC_GetUSARTClockSource>
 8005416:	4603      	mov	r3, r0
 8005418:	2b03      	cmp	r3, #3
 800541a:	d81b      	bhi.n	8005454 <UART_SetConfig+0xe8>
 800541c:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <UART_SetConfig+0xb8>)
 800541e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005422:	bf00      	nop
 8005424:	08005435 	.word	0x08005435
 8005428:	08005445 	.word	0x08005445
 800542c:	0800543d 	.word	0x0800543d
 8005430:	0800544d 	.word	0x0800544d
 8005434:	2301      	movs	r3, #1
 8005436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800543a:	e042      	b.n	80054c2 <UART_SetConfig+0x156>
 800543c:	2302      	movs	r3, #2
 800543e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005442:	e03e      	b.n	80054c2 <UART_SetConfig+0x156>
 8005444:	2304      	movs	r3, #4
 8005446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800544a:	e03a      	b.n	80054c2 <UART_SetConfig+0x156>
 800544c:	2308      	movs	r3, #8
 800544e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005452:	e036      	b.n	80054c2 <UART_SetConfig+0x156>
 8005454:	2310      	movs	r3, #16
 8005456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800545a:	e032      	b.n	80054c2 <UART_SetConfig+0x156>
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a7e      	ldr	r2, [pc, #504]	; (800565c <UART_SetConfig+0x2f0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d12a      	bne.n	80054bc <UART_SetConfig+0x150>
 8005466:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800546a:	f7ff f980 	bl	800476e <LL_RCC_GetLPUARTClockSource>
 800546e:	4603      	mov	r3, r0
 8005470:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005474:	d01a      	beq.n	80054ac <UART_SetConfig+0x140>
 8005476:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800547a:	d81b      	bhi.n	80054b4 <UART_SetConfig+0x148>
 800547c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005480:	d00c      	beq.n	800549c <UART_SetConfig+0x130>
 8005482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005486:	d815      	bhi.n	80054b4 <UART_SetConfig+0x148>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <UART_SetConfig+0x128>
 800548c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005490:	d008      	beq.n	80054a4 <UART_SetConfig+0x138>
 8005492:	e00f      	b.n	80054b4 <UART_SetConfig+0x148>
 8005494:	2300      	movs	r3, #0
 8005496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800549a:	e012      	b.n	80054c2 <UART_SetConfig+0x156>
 800549c:	2302      	movs	r3, #2
 800549e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054a2:	e00e      	b.n	80054c2 <UART_SetConfig+0x156>
 80054a4:	2304      	movs	r3, #4
 80054a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054aa:	e00a      	b.n	80054c2 <UART_SetConfig+0x156>
 80054ac:	2308      	movs	r3, #8
 80054ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054b2:	e006      	b.n	80054c2 <UART_SetConfig+0x156>
 80054b4:	2310      	movs	r3, #16
 80054b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ba:	e002      	b.n	80054c2 <UART_SetConfig+0x156>
 80054bc:	2310      	movs	r3, #16
 80054be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a65      	ldr	r2, [pc, #404]	; (800565c <UART_SetConfig+0x2f0>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	f040 8097 	bne.w	80055fc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d823      	bhi.n	800551e <UART_SetConfig+0x1b2>
 80054d6:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <UART_SetConfig+0x170>)
 80054d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054dc:	08005501 	.word	0x08005501
 80054e0:	0800551f 	.word	0x0800551f
 80054e4:	08005509 	.word	0x08005509
 80054e8:	0800551f 	.word	0x0800551f
 80054ec:	0800550f 	.word	0x0800550f
 80054f0:	0800551f 	.word	0x0800551f
 80054f4:	0800551f 	.word	0x0800551f
 80054f8:	0800551f 	.word	0x0800551f
 80054fc:	08005517 	.word	0x08005517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005500:	f7fe fc0c 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8005504:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005506:	e010      	b.n	800552a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005508:	4b56      	ldr	r3, [pc, #344]	; (8005664 <UART_SetConfig+0x2f8>)
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800550c:	e00d      	b.n	800552a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800550e:	f7fe fb85 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8005512:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005514:	e009      	b.n	800552a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800551c:	e005      	b.n	800552a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005528:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 812b 	beq.w	8005788 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	4a4c      	ldr	r2, [pc, #304]	; (8005668 <UART_SetConfig+0x2fc>)
 8005538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800553c:	461a      	mov	r2, r3
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	fbb3 f3f2 	udiv	r3, r3, r2
 8005544:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	4413      	add	r3, r2
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	429a      	cmp	r2, r3
 8005554:	d305      	bcc.n	8005562 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	429a      	cmp	r2, r3
 8005560:	d903      	bls.n	800556a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005568:	e10e      	b.n	8005788 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	2200      	movs	r2, #0
 800556e:	60bb      	str	r3, [r7, #8]
 8005570:	60fa      	str	r2, [r7, #12]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	4a3c      	ldr	r2, [pc, #240]	; (8005668 <UART_SetConfig+0x2fc>)
 8005578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800557c:	b29b      	uxth	r3, r3
 800557e:	2200      	movs	r2, #0
 8005580:	603b      	str	r3, [r7, #0]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005588:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800558c:	f7fb fb54 	bl	8000c38 <__aeabi_uldivmod>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4610      	mov	r0, r2
 8005596:	4619      	mov	r1, r3
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	020b      	lsls	r3, r1, #8
 80055a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055a6:	0202      	lsls	r2, r0, #8
 80055a8:	6979      	ldr	r1, [r7, #20]
 80055aa:	6849      	ldr	r1, [r1, #4]
 80055ac:	0849      	lsrs	r1, r1, #1
 80055ae:	2000      	movs	r0, #0
 80055b0:	460c      	mov	r4, r1
 80055b2:	4605      	mov	r5, r0
 80055b4:	eb12 0804 	adds.w	r8, r2, r4
 80055b8:	eb43 0905 	adc.w	r9, r3, r5
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	469a      	mov	sl, r3
 80055c4:	4693      	mov	fp, r2
 80055c6:	4652      	mov	r2, sl
 80055c8:	465b      	mov	r3, fp
 80055ca:	4640      	mov	r0, r8
 80055cc:	4649      	mov	r1, r9
 80055ce:	f7fb fb33 	bl	8000c38 <__aeabi_uldivmod>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4613      	mov	r3, r2
 80055d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e0:	d308      	bcc.n	80055f4 <UART_SetConfig+0x288>
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055e8:	d204      	bcs.n	80055f4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6a3a      	ldr	r2, [r7, #32]
 80055f0:	60da      	str	r2, [r3, #12]
 80055f2:	e0c9      	b.n	8005788 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80055fa:	e0c5      	b.n	8005788 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005604:	d16e      	bne.n	80056e4 <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005606:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800560a:	3b01      	subs	r3, #1
 800560c:	2b07      	cmp	r3, #7
 800560e:	d82d      	bhi.n	800566c <UART_SetConfig+0x300>
 8005610:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <UART_SetConfig+0x2ac>)
 8005612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005616:	bf00      	nop
 8005618:	08005639 	.word	0x08005639
 800561c:	08005641 	.word	0x08005641
 8005620:	0800566d 	.word	0x0800566d
 8005624:	08005647 	.word	0x08005647
 8005628:	0800566d 	.word	0x0800566d
 800562c:	0800566d 	.word	0x0800566d
 8005630:	0800566d 	.word	0x0800566d
 8005634:	0800564f 	.word	0x0800564f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005638:	f7fe fb86 	bl	8003d48 <HAL_RCC_GetPCLK2Freq>
 800563c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800563e:	e01b      	b.n	8005678 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005640:	4b08      	ldr	r3, [pc, #32]	; (8005664 <UART_SetConfig+0x2f8>)
 8005642:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005644:	e018      	b.n	8005678 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005646:	f7fe fae9 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 800564a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800564c:	e014      	b.n	8005678 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800564e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005654:	e010      	b.n	8005678 <UART_SetConfig+0x30c>
 8005656:	bf00      	nop
 8005658:	cfff69f3 	.word	0xcfff69f3
 800565c:	40008000 	.word	0x40008000
 8005660:	40013800 	.word	0x40013800
 8005664:	00f42400 	.word	0x00f42400
 8005668:	0800bc04 	.word	0x0800bc04
      default:
        pclk = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005676:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 8084 	beq.w	8005788 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	4a4b      	ldr	r2, [pc, #300]	; (80057b4 <UART_SetConfig+0x448>)
 8005686:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800568a:	461a      	mov	r2, r3
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005692:	005a      	lsls	r2, r3, #1
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	441a      	add	r2, r3
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	2b0f      	cmp	r3, #15
 80056ac:	d916      	bls.n	80056dc <UART_SetConfig+0x370>
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b4:	d212      	bcs.n	80056dc <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f023 030f 	bic.w	r3, r3, #15
 80056be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	8bfb      	ldrh	r3, [r7, #30]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	8bfa      	ldrh	r2, [r7, #30]
 80056d8:	60da      	str	r2, [r3, #12]
 80056da:	e055      	b.n	8005788 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80056e2:	e051      	b.n	8005788 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056e8:	3b01      	subs	r3, #1
 80056ea:	2b07      	cmp	r3, #7
 80056ec:	d821      	bhi.n	8005732 <UART_SetConfig+0x3c6>
 80056ee:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <UART_SetConfig+0x388>)
 80056f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f4:	08005715 	.word	0x08005715
 80056f8:	0800571d 	.word	0x0800571d
 80056fc:	08005733 	.word	0x08005733
 8005700:	08005723 	.word	0x08005723
 8005704:	08005733 	.word	0x08005733
 8005708:	08005733 	.word	0x08005733
 800570c:	08005733 	.word	0x08005733
 8005710:	0800572b 	.word	0x0800572b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005714:	f7fe fb18 	bl	8003d48 <HAL_RCC_GetPCLK2Freq>
 8005718:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800571a:	e010      	b.n	800573e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800571c:	4b26      	ldr	r3, [pc, #152]	; (80057b8 <UART_SetConfig+0x44c>)
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005720:	e00d      	b.n	800573e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005722:	f7fe fa7b 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8005726:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005728:	e009      	b.n	800573e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800572a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005730:	e005      	b.n	800573e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800573c:	bf00      	nop
    }

    if (pclk != 0U)
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	2b00      	cmp	r3, #0
 8005742:	d021      	beq.n	8005788 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	4a1a      	ldr	r2, [pc, #104]	; (80057b4 <UART_SetConfig+0x448>)
 800574a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800574e:	461a      	mov	r2, r3
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	fbb3 f2f2 	udiv	r2, r3, r2
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	441a      	add	r2, r3
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	fbb2 f3f3 	udiv	r3, r2, r3
 8005766:	b29b      	uxth	r3, r3
 8005768:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	2b0f      	cmp	r3, #15
 800576e:	d908      	bls.n	8005782 <UART_SetConfig+0x416>
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005776:	d204      	bcs.n	8005782 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6a3a      	ldr	r2, [r7, #32]
 800577e:	60da      	str	r2, [r3, #12]
 8005780:	e002      	b.n	8005788 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2201      	movs	r2, #1
 800578c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2201      	movs	r2, #1
 8005794:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	2200      	movs	r2, #0
 800579c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2200      	movs	r2, #0
 80057a2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80057a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3730      	adds	r7, #48	; 0x30
 80057ac:	46bd      	mov	sp, r7
 80057ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057b2:	bf00      	nop
 80057b4:	0800bc04 	.word	0x0800bc04
 80057b8:	00f42400 	.word	0x00f42400

080057bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005850:	f003 0310 	and.w	r3, r3, #16
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01a      	beq.n	80058d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ba:	d10a      	bne.n	80058d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	605a      	str	r2, [r3, #4]
  }
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af02      	add	r7, sp, #8
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005910:	f7fc fca4 	bl	800225c <HAL_GetTick>
 8005914:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b08      	cmp	r3, #8
 8005922:	d10e      	bne.n	8005942 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005924:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f82f 	bl	8005996 <UART_WaitOnFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e025      	b.n	800598e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b04      	cmp	r3, #4
 800594e:	d10e      	bne.n	800596e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005950:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f819 	bl	8005996 <UART_WaitOnFlagUntilTimeout>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e00f      	b.n	800598e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b09c      	sub	sp, #112	; 0x70
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	603b      	str	r3, [r7, #0]
 80059a2:	4613      	mov	r3, r2
 80059a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a6:	e0a9      	b.n	8005afc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ae:	f000 80a5 	beq.w	8005afc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b2:	f7fc fc53 	bl	800225c <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059be:	429a      	cmp	r2, r3
 80059c0:	d302      	bcc.n	80059c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80059c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d140      	bne.n	8005a4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059d0:	e853 3f00 	ldrex	r3, [r3]
 80059d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059dc:	667b      	str	r3, [r7, #100]	; 0x64
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	461a      	mov	r2, r3
 80059e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059ee:	e841 2300 	strex	r3, r2, [r1]
 80059f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1e6      	bne.n	80059c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3308      	adds	r3, #8
 8005a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0c:	f023 0301 	bic.w	r3, r3, #1
 8005a10:	663b      	str	r3, [r7, #96]	; 0x60
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3308      	adds	r3, #8
 8005a18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a22:	e841 2300 	strex	r3, r2, [r1]
 8005a26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1e5      	bne.n	80059fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e069      	b.n	8005b1e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d051      	beq.n	8005afc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a66:	d149      	bne.n	8005afc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a90:	637b      	str	r3, [r7, #52]	; 0x34
 8005a92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e6      	bne.n	8005a72 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f023 0301 	bic.w	r3, r3, #1
 8005aba:	66bb      	str	r3, [r7, #104]	; 0x68
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3308      	adds	r3, #8
 8005ac2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ac4:	623a      	str	r2, [r7, #32]
 8005ac6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	69f9      	ldr	r1, [r7, #28]
 8005aca:	6a3a      	ldr	r2, [r7, #32]
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e5      	bne.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e010      	b.n	8005b1e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69da      	ldr	r2, [r3, #28]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	4013      	ands	r3, r2
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	bf0c      	ite	eq
 8005b0c:	2301      	moveq	r3, #1
 8005b0e:	2300      	movne	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	461a      	mov	r2, r3
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	f43f af46 	beq.w	80059a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3770      	adds	r7, #112	; 0x70
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b09d      	sub	sp, #116	; 0x74
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	4613      	mov	r3, r2
 8005b34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	88fa      	ldrh	r2, [r7, #6]
 8005b40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	88fa      	ldrh	r2, [r7, #6]
 8005b48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5a:	d10e      	bne.n	8005b7a <UART_Start_Receive_IT+0x52>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d105      	bne.n	8005b70 <UART_Start_Receive_IT+0x48>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005b6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b6e:	e02d      	b.n	8005bcc <UART_Start_Receive_IT+0xa4>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	22ff      	movs	r2, #255	; 0xff
 8005b74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b78:	e028      	b.n	8005bcc <UART_Start_Receive_IT+0xa4>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10d      	bne.n	8005b9e <UART_Start_Receive_IT+0x76>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d104      	bne.n	8005b94 <UART_Start_Receive_IT+0x6c>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	22ff      	movs	r2, #255	; 0xff
 8005b8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b92:	e01b      	b.n	8005bcc <UART_Start_Receive_IT+0xa4>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	227f      	movs	r2, #127	; 0x7f
 8005b98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b9c:	e016      	b.n	8005bcc <UART_Start_Receive_IT+0xa4>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ba6:	d10d      	bne.n	8005bc4 <UART_Start_Receive_IT+0x9c>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d104      	bne.n	8005bba <UART_Start_Receive_IT+0x92>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	227f      	movs	r2, #127	; 0x7f
 8005bb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bb8:	e008      	b.n	8005bcc <UART_Start_Receive_IT+0xa4>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	223f      	movs	r2, #63	; 0x3f
 8005bbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bc2:	e003      	b.n	8005bcc <UART_Start_Receive_IT+0xa4>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2222      	movs	r2, #34	; 0x22
 8005bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3308      	adds	r3, #8
 8005be2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bee:	f043 0301 	orr.w	r3, r3, #1
 8005bf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bfc:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005bfe:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e5      	bne.n	8005bdc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c18:	d14d      	bne.n	8005cb6 <UART_Start_Receive_IT+0x18e>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005c20:	88fa      	ldrh	r2, [r7, #6]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d347      	bcc.n	8005cb6 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2e:	d107      	bne.n	8005c40 <UART_Start_Receive_IT+0x118>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d103      	bne.n	8005c40 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4a39      	ldr	r2, [pc, #228]	; (8005d20 <UART_Start_Receive_IT+0x1f8>)
 8005c3c:	671a      	str	r2, [r3, #112]	; 0x70
 8005c3e:	e002      	b.n	8005c46 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4a38      	ldr	r2, [pc, #224]	; (8005d24 <UART_Start_Receive_IT+0x1fc>)
 8005c44:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c56:	e853 3f00 	ldrex	r3, [r3]
 8005c5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c62:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c6e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c74:	e841 2300 	strex	r3, r2, [r1]
 8005c78:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1e6      	bne.n	8005c4e <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3308      	adds	r3, #8
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8a:	e853 3f00 	ldrex	r3, [r3]
 8005c8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c96:	667b      	str	r3, [r7, #100]	; 0x64
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ca0:	637a      	str	r2, [r7, #52]	; 0x34
 8005ca2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ca8:	e841 2300 	strex	r3, r2, [r1]
 8005cac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e5      	bne.n	8005c80 <UART_Start_Receive_IT+0x158>
 8005cb4:	e02c      	b.n	8005d10 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cbe:	d107      	bne.n	8005cd0 <UART_Start_Receive_IT+0x1a8>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d103      	bne.n	8005cd0 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <UART_Start_Receive_IT+0x200>)
 8005ccc:	671a      	str	r2, [r3, #112]	; 0x70
 8005cce:	e002      	b.n	8005cd6 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4a16      	ldr	r2, [pc, #88]	; (8005d2c <UART_Start_Receive_IT+0x204>)
 8005cd4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	613b      	str	r3, [r7, #16]
   return(result);
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005cf2:	663b      	str	r3, [r7, #96]	; 0x60
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cfc:	623b      	str	r3, [r7, #32]
 8005cfe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	69f9      	ldr	r1, [r7, #28]
 8005d02:	6a3a      	ldr	r2, [r7, #32]
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e6      	bne.n	8005cde <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3774      	adds	r7, #116	; 0x74
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	0800677d 	.word	0x0800677d
 8005d24:	08006485 	.word	0x08006485
 8005d28:	08006323 	.word	0x08006323
 8005d2c:	080061c3 	.word	0x080061c3

08005d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b095      	sub	sp, #84	; 0x54
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d56:	643b      	str	r3, [r7, #64]	; 0x40
 8005d58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e6      	bne.n	8005d38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3308      	adds	r3, #8
 8005d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d80:	f023 0301 	bic.w	r3, r3, #1
 8005d84:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e3      	bne.n	8005d6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d118      	bne.n	8005ddc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f023 0310 	bic.w	r3, r3, #16
 8005dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc8:	61bb      	str	r3, [r7, #24]
 8005dca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	6979      	ldr	r1, [r7, #20]
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e6      	bne.n	8005daa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005df0:	bf00      	nop
 8005df2:	3754      	adds	r7, #84	; 0x54
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff fa90 	bl	8005340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b08f      	sub	sp, #60	; 0x3c
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e36:	2b21      	cmp	r3, #33	; 0x21
 8005e38:	d14c      	bne.n	8005ed4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d132      	bne.n	8005eac <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	e853 3f00 	ldrex	r3, [r3]
 8005e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	461a      	mov	r2, r3
 8005e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e66:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e6c:	e841 2300 	strex	r3, r2, [r1]
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1e6      	bne.n	8005e46 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	461a      	mov	r2, r3
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	61bb      	str	r3, [r7, #24]
 8005e98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9a:	6979      	ldr	r1, [r7, #20]
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	e841 2300 	strex	r3, r2, [r1]
 8005ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1e6      	bne.n	8005e78 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005eaa:	e013      	b.n	8005ed4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb0:	781a      	ldrb	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8005ed4:	bf00      	nop
 8005ed6:	373c      	adds	r7, #60	; 0x3c
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b091      	sub	sp, #68	; 0x44
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eee:	2b21      	cmp	r3, #33	; 0x21
 8005ef0:	d151      	bne.n	8005f96 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d132      	bne.n	8005f64 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f12:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f1e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f24:	e841 2300 	strex	r3, r2, [r1]
 8005f28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e6      	bne.n	8005efe <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4e:	61fb      	str	r3, [r7, #28]
 8005f50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	69b9      	ldr	r1, [r7, #24]
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e6      	bne.n	8005f30 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005f62:	e018      	b.n	8005f96 <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f68:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f78:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f7e:	1c9a      	adds	r2, r3, #2
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8005f96:	bf00      	nop
 8005f98:	3744      	adds	r7, #68	; 0x44
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b091      	sub	sp, #68	; 0x44
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fb0:	2b21      	cmp	r3, #33	; 0x21
 8005fb2:	d160      	bne.n	8006076 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005fba:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005fbc:	e057      	b.n	800606e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d133      	bne.n	8006032 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3308      	adds	r3, #8
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	623b      	str	r3, [r7, #32]
   return(result);
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3308      	adds	r3, #8
 8005fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fea:	633a      	str	r2, [r7, #48]	; 0x30
 8005fec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff2:	e841 2300 	strex	r3, r2, [r1]
 8005ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1e5      	bne.n	8005fca <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	60fb      	str	r3, [r7, #12]
   return(result);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006012:	637b      	str	r3, [r7, #52]	; 0x34
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601c:	61fb      	str	r3, [r7, #28]
 800601e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	69b9      	ldr	r1, [r7, #24]
 8006022:	69fa      	ldr	r2, [r7, #28]
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	617b      	str	r3, [r7, #20]
   return(result);
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e6      	bne.n	8005ffe <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8006030:	e021      	b.n	8006076 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603c:	2b00      	cmp	r3, #0
 800603e:	d013      	beq.n	8006068 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006044:	781a      	ldrb	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006068:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800606a:	3b01      	subs	r3, #1
 800606c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800606e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1a4      	bne.n	8005fbe <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006074:	e7ff      	b.n	8006076 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8006076:	bf00      	nop
 8006078:	3744      	adds	r7, #68	; 0x44
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006082:	b480      	push	{r7}
 8006084:	b091      	sub	sp, #68	; 0x44
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006090:	2b21      	cmp	r3, #33	; 0x21
 8006092:	d165      	bne.n	8006160 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800609a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800609c:	e05c      	b.n	8006158 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d133      	bne.n	8006112 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3308      	adds	r3, #8
 80060b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060c0:	637b      	str	r3, [r7, #52]	; 0x34
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3308      	adds	r3, #8
 80060c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e5      	bne.n	80060aa <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f2:	633b      	str	r3, [r7, #48]	; 0x30
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6979      	ldr	r1, [r7, #20]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	613b      	str	r3, [r7, #16]
   return(result);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e6      	bne.n	80060de <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8006110:	e026      	b.n	8006160 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611c:	2b00      	cmp	r3, #0
 800611e:	d018      	beq.n	8006152 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006124:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	461a      	mov	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006134:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800613a:	1c9a      	adds	r2, r3, #2
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006146:	b29b      	uxth	r3, r3
 8006148:	3b01      	subs	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006152:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006154:	3b01      	subs	r3, #1
 8006156:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006158:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800615a:	2b00      	cmp	r3, #0
 800615c:	d19f      	bne.n	800609e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800615e:	e7ff      	b.n	8006160 <UART_TxISR_16BIT_FIFOEN+0xde>
 8006160:	bf00      	nop
 8006162:	3744      	adds	r7, #68	; 0x44
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	60bb      	str	r3, [r7, #8]
   return(result);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006188:	61fb      	str	r3, [r7, #28]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	61bb      	str	r3, [r7, #24]
 8006194:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	6979      	ldr	r1, [r7, #20]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	613b      	str	r3, [r7, #16]
   return(result);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e6      	bne.n	8006174 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff f8b9 	bl	800532c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ba:	bf00      	nop
 80061bc:	3720      	adds	r7, #32
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b096      	sub	sp, #88	; 0x58
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80061d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061da:	2b22      	cmp	r3, #34	; 0x22
 80061dc:	f040 8095 	bne.w	800630a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80061ea:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80061ee:	b2d9      	uxtb	r1, r3
 80061f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fa:	400a      	ands	r2, r1
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006210:	b29b      	uxth	r3, r3
 8006212:	3b01      	subs	r3, #1
 8006214:	b29a      	uxth	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006222:	b29b      	uxth	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d178      	bne.n	800631a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006230:	e853 3f00 	ldrex	r3, [r3]
 8006234:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800623c:	653b      	str	r3, [r7, #80]	; 0x50
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006246:	647b      	str	r3, [r7, #68]	; 0x44
 8006248:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800624c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800624e:	e841 2300 	strex	r3, r2, [r1]
 8006252:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1e6      	bne.n	8006228 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3308      	adds	r3, #8
 8006260:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	623b      	str	r3, [r7, #32]
   return(result);
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	f023 0301 	bic.w	r3, r3, #1
 8006270:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3308      	adds	r3, #8
 8006278:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800627a:	633a      	str	r2, [r7, #48]	; 0x30
 800627c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1e5      	bne.n	800625a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d12e      	bne.n	8006302 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0310 	bic.w	r3, r3, #16
 80062be:	64bb      	str	r3, [r7, #72]	; 0x48
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	461a      	mov	r2, r3
 80062c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c8:	61fb      	str	r3, [r7, #28]
 80062ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062cc:	69b9      	ldr	r1, [r7, #24]
 80062ce:	69fa      	ldr	r2, [r7, #28]
 80062d0:	e841 2300 	strex	r3, r2, [r1]
 80062d4:	617b      	str	r3, [r7, #20]
   return(result);
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1e6      	bne.n	80062aa <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	f003 0310 	and.w	r3, r3, #16
 80062e6:	2b10      	cmp	r3, #16
 80062e8:	d103      	bne.n	80062f2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2210      	movs	r2, #16
 80062f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062f8:	4619      	mov	r1, r3
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7ff f82a 	bl	8005354 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006300:	e00b      	b.n	800631a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fb fb00 	bl	8001908 <HAL_UART_RxCpltCallback>
}
 8006308:	e007      	b.n	800631a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	699a      	ldr	r2, [r3, #24]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0208 	orr.w	r2, r2, #8
 8006318:	619a      	str	r2, [r3, #24]
}
 800631a:	bf00      	nop
 800631c:	3758      	adds	r7, #88	; 0x58
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b096      	sub	sp, #88	; 0x58
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006330:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633a:	2b22      	cmp	r3, #34	; 0x22
 800633c:	f040 8095 	bne.w	800646a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006350:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006354:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006358:	4013      	ands	r3, r2
 800635a:	b29a      	uxth	r2, r3
 800635c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800635e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006364:	1c9a      	adds	r2, r3, #2
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006370:	b29b      	uxth	r3, r3
 8006372:	3b01      	subs	r3, #1
 8006374:	b29a      	uxth	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d178      	bne.n	800647a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800639c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a6:	643b      	str	r3, [r7, #64]	; 0x40
 80063a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1e6      	bne.n	8006388 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3308      	adds	r3, #8
 80063c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	f023 0301 	bic.w	r3, r3, #1
 80063d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3308      	adds	r3, #8
 80063d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e5      	bne.n	80063ba <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006400:	2b01      	cmp	r3, #1
 8006402:	d12e      	bne.n	8006462 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	60bb      	str	r3, [r7, #8]
   return(result);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f023 0310 	bic.w	r3, r3, #16
 800641e:	647b      	str	r3, [r7, #68]	; 0x44
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006428:	61bb      	str	r3, [r7, #24]
 800642a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642c:	6979      	ldr	r1, [r7, #20]
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	e841 2300 	strex	r3, r2, [r1]
 8006434:	613b      	str	r3, [r7, #16]
   return(result);
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e6      	bne.n	800640a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	f003 0310 	and.w	r3, r3, #16
 8006446:	2b10      	cmp	r3, #16
 8006448:	d103      	bne.n	8006452 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2210      	movs	r2, #16
 8006450:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006458:	4619      	mov	r1, r3
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fe ff7a 	bl	8005354 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006460:	e00b      	b.n	800647a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fb fa50 	bl	8001908 <HAL_UART_RxCpltCallback>
}
 8006468:	e007      	b.n	800647a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699a      	ldr	r2, [r3, #24]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f042 0208 	orr.w	r2, r2, #8
 8006478:	619a      	str	r2, [r3, #24]
}
 800647a:	bf00      	nop
 800647c:	3758      	adds	r7, #88	; 0x58
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b0a6      	sub	sp, #152	; 0x98
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006492:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ba:	2b22      	cmp	r3, #34	; 0x22
 80064bc:	f040 814f 	bne.w	800675e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80064c6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80064ca:	e0f6      	b.n	80066ba <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064d6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80064da:	b2d9      	uxtb	r1, r3
 80064dc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e6:	400a      	ands	r2, r1
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006512:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	2b00      	cmp	r3, #0
 800651c:	d053      	beq.n	80065c6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800651e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d011      	beq.n	800654e <UART_RxISR_8BIT_FIFOEN+0xca>
 800652a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800652e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00b      	beq.n	800654e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2201      	movs	r2, #1
 800653c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006544:	f043 0201 	orr.w	r2, r3, #1
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800654e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d011      	beq.n	800657e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800655a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00b      	beq.n	800657e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2202      	movs	r2, #2
 800656c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006574:	f043 0204 	orr.w	r2, r3, #4
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800657e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	d011      	beq.n	80065ae <UART_RxISR_8BIT_FIFOEN+0x12a>
 800658a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00b      	beq.n	80065ae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2204      	movs	r2, #4
 800659c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065a4:	f043 0202 	orr.w	r2, r3, #2
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d006      	beq.n	80065c6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f7fe fec1 	bl	8005340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d173      	bne.n	80066ba <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80065e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80065f6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80065fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065fc:	e841 2300 	strex	r3, r2, [r1]
 8006600:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e4      	bne.n	80065d2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3308      	adds	r3, #8
 800660e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800661a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800661e:	f023 0301 	bic.w	r3, r3, #1
 8006622:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3308      	adds	r3, #8
 800662a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800662c:	657a      	str	r2, [r7, #84]	; 0x54
 800662e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006632:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006634:	e841 2300 	strex	r3, r2, [r1]
 8006638:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800663a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e3      	bne.n	8006608 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006652:	2b01      	cmp	r3, #1
 8006654:	d12e      	bne.n	80066b4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	f023 0310 	bic.w	r3, r3, #16
 8006670:	67bb      	str	r3, [r7, #120]	; 0x78
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800667a:	643b      	str	r3, [r7, #64]	; 0x40
 800667c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006680:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e6      	bne.n	800665c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	2b10      	cmp	r3, #16
 800669a:	d103      	bne.n	80066a4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2210      	movs	r2, #16
 80066a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7fe fe51 	bl	8005354 <HAL_UARTEx_RxEventCallback>
 80066b2:	e002      	b.n	80066ba <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7fb f927 	bl	8001908 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80066ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d006      	beq.n	80066d0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80066c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80066c6:	f003 0320 	and.w	r3, r3, #32
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f47f aefe 	bne.w	80064cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80066da:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d045      	beq.n	800676e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80066e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d23e      	bcs.n	800676e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3308      	adds	r3, #8
 80066f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	e853 3f00 	ldrex	r3, [r3]
 80066fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006706:	673b      	str	r3, [r7, #112]	; 0x70
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3308      	adds	r3, #8
 800670e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006710:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006718:	e841 2300 	strex	r3, r2, [r1]
 800671c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e5      	bne.n	80066f0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a14      	ldr	r2, [pc, #80]	; (8006778 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8006728:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	e853 3f00 	ldrex	r3, [r3]
 8006736:	60bb      	str	r3, [r7, #8]
   return(result);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f043 0320 	orr.w	r3, r3, #32
 800673e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	461a      	mov	r2, r3
 8006746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006748:	61bb      	str	r3, [r7, #24]
 800674a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	6979      	ldr	r1, [r7, #20]
 800674e:	69ba      	ldr	r2, [r7, #24]
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	613b      	str	r3, [r7, #16]
   return(result);
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e6      	bne.n	800672a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800675c:	e007      	b.n	800676e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	699a      	ldr	r2, [r3, #24]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f042 0208 	orr.w	r2, r2, #8
 800676c:	619a      	str	r2, [r3, #24]
}
 800676e:	bf00      	nop
 8006770:	3798      	adds	r7, #152	; 0x98
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	080061c3 	.word	0x080061c3

0800677c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b0a8      	sub	sp, #160	; 0xa0
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800678a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b2:	2b22      	cmp	r3, #34	; 0x22
 80067b4:	f040 8153 	bne.w	8006a5e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80067be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80067c2:	e0fa      	b.n	80069ba <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80067d6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80067da:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80067de:	4013      	ands	r3, r2
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ec:	1c9a      	adds	r2, r3, #2
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	3b01      	subs	r3, #1
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800680e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006812:	f003 0307 	and.w	r3, r3, #7
 8006816:	2b00      	cmp	r3, #0
 8006818:	d053      	beq.n	80068c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800681a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d011      	beq.n	800684a <UART_RxISR_16BIT_FIFOEN+0xce>
 8006826:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800682a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00b      	beq.n	800684a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2201      	movs	r2, #1
 8006838:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006840:	f043 0201 	orr.w	r2, r3, #1
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800684a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d011      	beq.n	800687a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006856:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00b      	beq.n	800687a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2202      	movs	r2, #2
 8006868:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006870:	f043 0204 	orr.w	r2, r3, #4
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800687a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b00      	cmp	r3, #0
 8006884:	d011      	beq.n	80068aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006886:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00b      	beq.n	80068aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2204      	movs	r2, #4
 8006898:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068a0:	f043 0202 	orr.w	r2, r3, #2
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d006      	beq.n	80068c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7fe fd43 	bl	8005340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d175      	bne.n	80069ba <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068d6:	e853 3f00 	ldrex	r3, [r3]
 80068da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068f2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e4      	bne.n	80068ce <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3308      	adds	r3, #8
 800690a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800691a:	f023 0301 	bic.w	r3, r3, #1
 800691e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3308      	adds	r3, #8
 8006928:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800692c:	65ba      	str	r2, [r7, #88]	; 0x58
 800692e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006930:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006932:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006934:	e841 2300 	strex	r3, r2, [r1]
 8006938:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800693a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1e1      	bne.n	8006904 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006952:	2b01      	cmp	r3, #1
 8006954:	d12e      	bne.n	80069b4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800696a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696c:	f023 0310 	bic.w	r3, r3, #16
 8006970:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800697a:	647b      	str	r3, [r7, #68]	; 0x44
 800697c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e6      	bne.n	800695c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	f003 0310 	and.w	r3, r3, #16
 8006998:	2b10      	cmp	r3, #16
 800699a:	d103      	bne.n	80069a4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2210      	movs	r2, #16
 80069a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7fe fcd1 	bl	8005354 <HAL_UARTEx_RxEventCallback>
 80069b2:	e002      	b.n	80069ba <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7fa ffa7 	bl	8001908 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80069ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d006      	beq.n	80069d0 <UART_RxISR_16BIT_FIFOEN+0x254>
 80069c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f47f aefa 	bne.w	80067c4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069d6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80069da:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d045      	beq.n	8006a6e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80069e8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d23e      	bcs.n	8006a6e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3308      	adds	r3, #8
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	e853 3f00 	ldrex	r3, [r3]
 80069fe:	623b      	str	r3, [r7, #32]
   return(result);
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a06:	677b      	str	r3, [r7, #116]	; 0x74
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006a10:	633a      	str	r2, [r7, #48]	; 0x30
 8006a12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a18:	e841 2300 	strex	r3, r2, [r1]
 8006a1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1e5      	bne.n	80069f0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a14      	ldr	r2, [pc, #80]	; (8006a78 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8006a28:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	e853 3f00 	ldrex	r3, [r3]
 8006a36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f043 0320 	orr.w	r3, r3, #32
 8006a3e:	673b      	str	r3, [r7, #112]	; 0x70
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a48:	61fb      	str	r3, [r7, #28]
 8006a4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4c:	69b9      	ldr	r1, [r7, #24]
 8006a4e:	69fa      	ldr	r2, [r7, #28]
 8006a50:	e841 2300 	strex	r3, r2, [r1]
 8006a54:	617b      	str	r3, [r7, #20]
   return(result);
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1e6      	bne.n	8006a2a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a5c:	e007      	b.n	8006a6e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	699a      	ldr	r2, [r3, #24]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f042 0208 	orr.w	r2, r2, #8
 8006a6c:	619a      	str	r2, [r3, #24]
}
 8006a6e:	bf00      	nop
 8006a70:	37a0      	adds	r7, #160	; 0xa0
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	08006323 	.word	0x08006323

08006a7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d101      	bne.n	8006ace <HAL_UARTEx_DisableFifoMode+0x16>
 8006aca:	2302      	movs	r3, #2
 8006acc:	e027      	b.n	8006b1e <HAL_UARTEx_DisableFifoMode+0x66>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2224      	movs	r2, #36	; 0x24
 8006ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0201 	bic.w	r2, r2, #1
 8006af4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006afc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d101      	bne.n	8006b42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b3e:	2302      	movs	r3, #2
 8006b40:	e02d      	b.n	8006b9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2224      	movs	r2, #36	; 0x24
 8006b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0201 	bic.w	r2, r2, #1
 8006b68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f850 	bl	8006c24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d101      	bne.n	8006bbe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e02d      	b.n	8006c1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2224      	movs	r2, #36	; 0x24
 8006bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f022 0201 	bic.w	r2, r2, #1
 8006be4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f812 	bl	8006c24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
	...

08006c24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d108      	bne.n	8006c46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c44:	e031      	b.n	8006caa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c46:	2308      	movs	r3, #8
 8006c48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c4a:	2308      	movs	r3, #8
 8006c4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	0e5b      	lsrs	r3, r3, #25
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	0f5b      	lsrs	r3, r3, #29
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c6e:	7bbb      	ldrb	r3, [r7, #14]
 8006c70:	7b3a      	ldrb	r2, [r7, #12]
 8006c72:	4911      	ldr	r1, [pc, #68]	; (8006cb8 <UARTEx_SetNbDataToProcess+0x94>)
 8006c74:	5c8a      	ldrb	r2, [r1, r2]
 8006c76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c7a:	7b3a      	ldrb	r2, [r7, #12]
 8006c7c:	490f      	ldr	r1, [pc, #60]	; (8006cbc <UARTEx_SetNbDataToProcess+0x98>)
 8006c7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c80:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	7b7a      	ldrb	r2, [r7, #13]
 8006c90:	4909      	ldr	r1, [pc, #36]	; (8006cb8 <UARTEx_SetNbDataToProcess+0x94>)
 8006c92:	5c8a      	ldrb	r2, [r1, r2]
 8006c94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c98:	7b7a      	ldrb	r2, [r7, #13]
 8006c9a:	4908      	ldr	r1, [pc, #32]	; (8006cbc <UARTEx_SetNbDataToProcess+0x98>)
 8006c9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006caa:	bf00      	nop
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	0800bc1c 	.word	0x0800bc1c
 8006cbc:	0800bc24 	.word	0x0800bc24

08006cc0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006cc8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006ccc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	43db      	mvns	r3, r3
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	4013      	ands	r3, r2
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	f107 0014 	add.w	r0, r7, #20
 8006d04:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	b004      	add	sp, #16
 8006d36:	4770      	bx	lr

08006d38 <atoi>:
 8006d38:	220a      	movs	r2, #10
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	f001 be5c 	b.w	80089f8 <strtol>

08006d40 <__errno>:
 8006d40:	4b01      	ldr	r3, [pc, #4]	; (8006d48 <__errno+0x8>)
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	20000014 	.word	0x20000014

08006d4c <__libc_init_array>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	4d0d      	ldr	r5, [pc, #52]	; (8006d84 <__libc_init_array+0x38>)
 8006d50:	4c0d      	ldr	r4, [pc, #52]	; (8006d88 <__libc_init_array+0x3c>)
 8006d52:	1b64      	subs	r4, r4, r5
 8006d54:	10a4      	asrs	r4, r4, #2
 8006d56:	2600      	movs	r6, #0
 8006d58:	42a6      	cmp	r6, r4
 8006d5a:	d109      	bne.n	8006d70 <__libc_init_array+0x24>
 8006d5c:	4d0b      	ldr	r5, [pc, #44]	; (8006d8c <__libc_init_array+0x40>)
 8006d5e:	4c0c      	ldr	r4, [pc, #48]	; (8006d90 <__libc_init_array+0x44>)
 8006d60:	f004 fd94 	bl	800b88c <_init>
 8006d64:	1b64      	subs	r4, r4, r5
 8006d66:	10a4      	asrs	r4, r4, #2
 8006d68:	2600      	movs	r6, #0
 8006d6a:	42a6      	cmp	r6, r4
 8006d6c:	d105      	bne.n	8006d7a <__libc_init_array+0x2e>
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}
 8006d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d74:	4798      	blx	r3
 8006d76:	3601      	adds	r6, #1
 8006d78:	e7ee      	b.n	8006d58 <__libc_init_array+0xc>
 8006d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d7e:	4798      	blx	r3
 8006d80:	3601      	adds	r6, #1
 8006d82:	e7f2      	b.n	8006d6a <__libc_init_array+0x1e>
 8006d84:	0800c0e4 	.word	0x0800c0e4
 8006d88:	0800c0e4 	.word	0x0800c0e4
 8006d8c:	0800c0e4 	.word	0x0800c0e4
 8006d90:	0800c0e8 	.word	0x0800c0e8

08006d94 <memset>:
 8006d94:	4402      	add	r2, r0
 8006d96:	4603      	mov	r3, r0
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d100      	bne.n	8006d9e <memset+0xa>
 8006d9c:	4770      	bx	lr
 8006d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006da2:	e7f9      	b.n	8006d98 <memset+0x4>

08006da4 <__cvt>:
 8006da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da8:	ec55 4b10 	vmov	r4, r5, d0
 8006dac:	2d00      	cmp	r5, #0
 8006dae:	460e      	mov	r6, r1
 8006db0:	4619      	mov	r1, r3
 8006db2:	462b      	mov	r3, r5
 8006db4:	bfbb      	ittet	lt
 8006db6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006dba:	461d      	movlt	r5, r3
 8006dbc:	2300      	movge	r3, #0
 8006dbe:	232d      	movlt	r3, #45	; 0x2d
 8006dc0:	700b      	strb	r3, [r1, #0]
 8006dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006dc8:	4691      	mov	r9, r2
 8006dca:	f023 0820 	bic.w	r8, r3, #32
 8006dce:	bfbc      	itt	lt
 8006dd0:	4622      	movlt	r2, r4
 8006dd2:	4614      	movlt	r4, r2
 8006dd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dd8:	d005      	beq.n	8006de6 <__cvt+0x42>
 8006dda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006dde:	d100      	bne.n	8006de2 <__cvt+0x3e>
 8006de0:	3601      	adds	r6, #1
 8006de2:	2102      	movs	r1, #2
 8006de4:	e000      	b.n	8006de8 <__cvt+0x44>
 8006de6:	2103      	movs	r1, #3
 8006de8:	ab03      	add	r3, sp, #12
 8006dea:	9301      	str	r3, [sp, #4]
 8006dec:	ab02      	add	r3, sp, #8
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	ec45 4b10 	vmov	d0, r4, r5
 8006df4:	4653      	mov	r3, sl
 8006df6:	4632      	mov	r2, r6
 8006df8:	f001 fe96 	bl	8008b28 <_dtoa_r>
 8006dfc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e00:	4607      	mov	r7, r0
 8006e02:	d102      	bne.n	8006e0a <__cvt+0x66>
 8006e04:	f019 0f01 	tst.w	r9, #1
 8006e08:	d022      	beq.n	8006e50 <__cvt+0xac>
 8006e0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e0e:	eb07 0906 	add.w	r9, r7, r6
 8006e12:	d110      	bne.n	8006e36 <__cvt+0x92>
 8006e14:	783b      	ldrb	r3, [r7, #0]
 8006e16:	2b30      	cmp	r3, #48	; 0x30
 8006e18:	d10a      	bne.n	8006e30 <__cvt+0x8c>
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	4620      	mov	r0, r4
 8006e20:	4629      	mov	r1, r5
 8006e22:	f7f9 fe29 	bl	8000a78 <__aeabi_dcmpeq>
 8006e26:	b918      	cbnz	r0, 8006e30 <__cvt+0x8c>
 8006e28:	f1c6 0601 	rsb	r6, r6, #1
 8006e2c:	f8ca 6000 	str.w	r6, [sl]
 8006e30:	f8da 3000 	ldr.w	r3, [sl]
 8006e34:	4499      	add	r9, r3
 8006e36:	2200      	movs	r2, #0
 8006e38:	2300      	movs	r3, #0
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	f7f9 fe1b 	bl	8000a78 <__aeabi_dcmpeq>
 8006e42:	b108      	cbz	r0, 8006e48 <__cvt+0xa4>
 8006e44:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e48:	2230      	movs	r2, #48	; 0x30
 8006e4a:	9b03      	ldr	r3, [sp, #12]
 8006e4c:	454b      	cmp	r3, r9
 8006e4e:	d307      	bcc.n	8006e60 <__cvt+0xbc>
 8006e50:	9b03      	ldr	r3, [sp, #12]
 8006e52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e54:	1bdb      	subs	r3, r3, r7
 8006e56:	4638      	mov	r0, r7
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	b004      	add	sp, #16
 8006e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e60:	1c59      	adds	r1, r3, #1
 8006e62:	9103      	str	r1, [sp, #12]
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	e7f0      	b.n	8006e4a <__cvt+0xa6>

08006e68 <__exponent>:
 8006e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2900      	cmp	r1, #0
 8006e6e:	bfb8      	it	lt
 8006e70:	4249      	neglt	r1, r1
 8006e72:	f803 2b02 	strb.w	r2, [r3], #2
 8006e76:	bfb4      	ite	lt
 8006e78:	222d      	movlt	r2, #45	; 0x2d
 8006e7a:	222b      	movge	r2, #43	; 0x2b
 8006e7c:	2909      	cmp	r1, #9
 8006e7e:	7042      	strb	r2, [r0, #1]
 8006e80:	dd2a      	ble.n	8006ed8 <__exponent+0x70>
 8006e82:	f10d 0407 	add.w	r4, sp, #7
 8006e86:	46a4      	mov	ip, r4
 8006e88:	270a      	movs	r7, #10
 8006e8a:	46a6      	mov	lr, r4
 8006e8c:	460a      	mov	r2, r1
 8006e8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e92:	fb07 1516 	mls	r5, r7, r6, r1
 8006e96:	3530      	adds	r5, #48	; 0x30
 8006e98:	2a63      	cmp	r2, #99	; 0x63
 8006e9a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006e9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	dcf1      	bgt.n	8006e8a <__exponent+0x22>
 8006ea6:	3130      	adds	r1, #48	; 0x30
 8006ea8:	f1ae 0502 	sub.w	r5, lr, #2
 8006eac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006eb0:	1c44      	adds	r4, r0, #1
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	4561      	cmp	r1, ip
 8006eb6:	d30a      	bcc.n	8006ece <__exponent+0x66>
 8006eb8:	f10d 0209 	add.w	r2, sp, #9
 8006ebc:	eba2 020e 	sub.w	r2, r2, lr
 8006ec0:	4565      	cmp	r5, ip
 8006ec2:	bf88      	it	hi
 8006ec4:	2200      	movhi	r2, #0
 8006ec6:	4413      	add	r3, r2
 8006ec8:	1a18      	subs	r0, r3, r0
 8006eca:	b003      	add	sp, #12
 8006ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ece:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ed2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ed6:	e7ed      	b.n	8006eb4 <__exponent+0x4c>
 8006ed8:	2330      	movs	r3, #48	; 0x30
 8006eda:	3130      	adds	r1, #48	; 0x30
 8006edc:	7083      	strb	r3, [r0, #2]
 8006ede:	70c1      	strb	r1, [r0, #3]
 8006ee0:	1d03      	adds	r3, r0, #4
 8006ee2:	e7f1      	b.n	8006ec8 <__exponent+0x60>

08006ee4 <_printf_float>:
 8006ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee8:	ed2d 8b02 	vpush	{d8}
 8006eec:	b08d      	sub	sp, #52	; 0x34
 8006eee:	460c      	mov	r4, r1
 8006ef0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ef4:	4616      	mov	r6, r2
 8006ef6:	461f      	mov	r7, r3
 8006ef8:	4605      	mov	r5, r0
 8006efa:	f003 f929 	bl	800a150 <_localeconv_r>
 8006efe:	f8d0 a000 	ldr.w	sl, [r0]
 8006f02:	4650      	mov	r0, sl
 8006f04:	f7f9 f93c 	bl	8000180 <strlen>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	9305      	str	r3, [sp, #20]
 8006f10:	f8d8 3000 	ldr.w	r3, [r8]
 8006f14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f18:	3307      	adds	r3, #7
 8006f1a:	f023 0307 	bic.w	r3, r3, #7
 8006f1e:	f103 0208 	add.w	r2, r3, #8
 8006f22:	f8c8 2000 	str.w	r2, [r8]
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006f32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f36:	9307      	str	r3, [sp, #28]
 8006f38:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f3c:	ee08 0a10 	vmov	s16, r0
 8006f40:	4b9f      	ldr	r3, [pc, #636]	; (80071c0 <_printf_float+0x2dc>)
 8006f42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f4a:	f7f9 fdc7 	bl	8000adc <__aeabi_dcmpun>
 8006f4e:	bb88      	cbnz	r0, 8006fb4 <_printf_float+0xd0>
 8006f50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f54:	4b9a      	ldr	r3, [pc, #616]	; (80071c0 <_printf_float+0x2dc>)
 8006f56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f5a:	f7f9 fda1 	bl	8000aa0 <__aeabi_dcmple>
 8006f5e:	bb48      	cbnz	r0, 8006fb4 <_printf_float+0xd0>
 8006f60:	2200      	movs	r2, #0
 8006f62:	2300      	movs	r3, #0
 8006f64:	4640      	mov	r0, r8
 8006f66:	4649      	mov	r1, r9
 8006f68:	f7f9 fd90 	bl	8000a8c <__aeabi_dcmplt>
 8006f6c:	b110      	cbz	r0, 8006f74 <_printf_float+0x90>
 8006f6e:	232d      	movs	r3, #45	; 0x2d
 8006f70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f74:	4b93      	ldr	r3, [pc, #588]	; (80071c4 <_printf_float+0x2e0>)
 8006f76:	4894      	ldr	r0, [pc, #592]	; (80071c8 <_printf_float+0x2e4>)
 8006f78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f7c:	bf94      	ite	ls
 8006f7e:	4698      	movls	r8, r3
 8006f80:	4680      	movhi	r8, r0
 8006f82:	2303      	movs	r3, #3
 8006f84:	6123      	str	r3, [r4, #16]
 8006f86:	9b05      	ldr	r3, [sp, #20]
 8006f88:	f023 0204 	bic.w	r2, r3, #4
 8006f8c:	6022      	str	r2, [r4, #0]
 8006f8e:	f04f 0900 	mov.w	r9, #0
 8006f92:	9700      	str	r7, [sp, #0]
 8006f94:	4633      	mov	r3, r6
 8006f96:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f98:	4621      	mov	r1, r4
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f000 f9d8 	bl	8007350 <_printf_common>
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	f040 8090 	bne.w	80070c6 <_printf_float+0x1e2>
 8006fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006faa:	b00d      	add	sp, #52	; 0x34
 8006fac:	ecbd 8b02 	vpop	{d8}
 8006fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb4:	4642      	mov	r2, r8
 8006fb6:	464b      	mov	r3, r9
 8006fb8:	4640      	mov	r0, r8
 8006fba:	4649      	mov	r1, r9
 8006fbc:	f7f9 fd8e 	bl	8000adc <__aeabi_dcmpun>
 8006fc0:	b140      	cbz	r0, 8006fd4 <_printf_float+0xf0>
 8006fc2:	464b      	mov	r3, r9
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bfbc      	itt	lt
 8006fc8:	232d      	movlt	r3, #45	; 0x2d
 8006fca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006fce:	487f      	ldr	r0, [pc, #508]	; (80071cc <_printf_float+0x2e8>)
 8006fd0:	4b7f      	ldr	r3, [pc, #508]	; (80071d0 <_printf_float+0x2ec>)
 8006fd2:	e7d1      	b.n	8006f78 <_printf_float+0x94>
 8006fd4:	6863      	ldr	r3, [r4, #4]
 8006fd6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006fda:	9206      	str	r2, [sp, #24]
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	d13f      	bne.n	8007060 <_printf_float+0x17c>
 8006fe0:	2306      	movs	r3, #6
 8006fe2:	6063      	str	r3, [r4, #4]
 8006fe4:	9b05      	ldr	r3, [sp, #20]
 8006fe6:	6861      	ldr	r1, [r4, #4]
 8006fe8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006fec:	2300      	movs	r3, #0
 8006fee:	9303      	str	r3, [sp, #12]
 8006ff0:	ab0a      	add	r3, sp, #40	; 0x28
 8006ff2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ff6:	ab09      	add	r3, sp, #36	; 0x24
 8006ff8:	ec49 8b10 	vmov	d0, r8, r9
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	6022      	str	r2, [r4, #0]
 8007000:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007004:	4628      	mov	r0, r5
 8007006:	f7ff fecd 	bl	8006da4 <__cvt>
 800700a:	9b06      	ldr	r3, [sp, #24]
 800700c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800700e:	2b47      	cmp	r3, #71	; 0x47
 8007010:	4680      	mov	r8, r0
 8007012:	d108      	bne.n	8007026 <_printf_float+0x142>
 8007014:	1cc8      	adds	r0, r1, #3
 8007016:	db02      	blt.n	800701e <_printf_float+0x13a>
 8007018:	6863      	ldr	r3, [r4, #4]
 800701a:	4299      	cmp	r1, r3
 800701c:	dd41      	ble.n	80070a2 <_printf_float+0x1be>
 800701e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007022:	fa5f fb8b 	uxtb.w	fp, fp
 8007026:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800702a:	d820      	bhi.n	800706e <_printf_float+0x18a>
 800702c:	3901      	subs	r1, #1
 800702e:	465a      	mov	r2, fp
 8007030:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007034:	9109      	str	r1, [sp, #36]	; 0x24
 8007036:	f7ff ff17 	bl	8006e68 <__exponent>
 800703a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800703c:	1813      	adds	r3, r2, r0
 800703e:	2a01      	cmp	r2, #1
 8007040:	4681      	mov	r9, r0
 8007042:	6123      	str	r3, [r4, #16]
 8007044:	dc02      	bgt.n	800704c <_printf_float+0x168>
 8007046:	6822      	ldr	r2, [r4, #0]
 8007048:	07d2      	lsls	r2, r2, #31
 800704a:	d501      	bpl.n	8007050 <_printf_float+0x16c>
 800704c:	3301      	adds	r3, #1
 800704e:	6123      	str	r3, [r4, #16]
 8007050:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007054:	2b00      	cmp	r3, #0
 8007056:	d09c      	beq.n	8006f92 <_printf_float+0xae>
 8007058:	232d      	movs	r3, #45	; 0x2d
 800705a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800705e:	e798      	b.n	8006f92 <_printf_float+0xae>
 8007060:	9a06      	ldr	r2, [sp, #24]
 8007062:	2a47      	cmp	r2, #71	; 0x47
 8007064:	d1be      	bne.n	8006fe4 <_printf_float+0x100>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1bc      	bne.n	8006fe4 <_printf_float+0x100>
 800706a:	2301      	movs	r3, #1
 800706c:	e7b9      	b.n	8006fe2 <_printf_float+0xfe>
 800706e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007072:	d118      	bne.n	80070a6 <_printf_float+0x1c2>
 8007074:	2900      	cmp	r1, #0
 8007076:	6863      	ldr	r3, [r4, #4]
 8007078:	dd0b      	ble.n	8007092 <_printf_float+0x1ae>
 800707a:	6121      	str	r1, [r4, #16]
 800707c:	b913      	cbnz	r3, 8007084 <_printf_float+0x1a0>
 800707e:	6822      	ldr	r2, [r4, #0]
 8007080:	07d0      	lsls	r0, r2, #31
 8007082:	d502      	bpl.n	800708a <_printf_float+0x1a6>
 8007084:	3301      	adds	r3, #1
 8007086:	440b      	add	r3, r1
 8007088:	6123      	str	r3, [r4, #16]
 800708a:	65a1      	str	r1, [r4, #88]	; 0x58
 800708c:	f04f 0900 	mov.w	r9, #0
 8007090:	e7de      	b.n	8007050 <_printf_float+0x16c>
 8007092:	b913      	cbnz	r3, 800709a <_printf_float+0x1b6>
 8007094:	6822      	ldr	r2, [r4, #0]
 8007096:	07d2      	lsls	r2, r2, #31
 8007098:	d501      	bpl.n	800709e <_printf_float+0x1ba>
 800709a:	3302      	adds	r3, #2
 800709c:	e7f4      	b.n	8007088 <_printf_float+0x1a4>
 800709e:	2301      	movs	r3, #1
 80070a0:	e7f2      	b.n	8007088 <_printf_float+0x1a4>
 80070a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80070a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a8:	4299      	cmp	r1, r3
 80070aa:	db05      	blt.n	80070b8 <_printf_float+0x1d4>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	6121      	str	r1, [r4, #16]
 80070b0:	07d8      	lsls	r0, r3, #31
 80070b2:	d5ea      	bpl.n	800708a <_printf_float+0x1a6>
 80070b4:	1c4b      	adds	r3, r1, #1
 80070b6:	e7e7      	b.n	8007088 <_printf_float+0x1a4>
 80070b8:	2900      	cmp	r1, #0
 80070ba:	bfd4      	ite	le
 80070bc:	f1c1 0202 	rsble	r2, r1, #2
 80070c0:	2201      	movgt	r2, #1
 80070c2:	4413      	add	r3, r2
 80070c4:	e7e0      	b.n	8007088 <_printf_float+0x1a4>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	055a      	lsls	r2, r3, #21
 80070ca:	d407      	bmi.n	80070dc <_printf_float+0x1f8>
 80070cc:	6923      	ldr	r3, [r4, #16]
 80070ce:	4642      	mov	r2, r8
 80070d0:	4631      	mov	r1, r6
 80070d2:	4628      	mov	r0, r5
 80070d4:	47b8      	blx	r7
 80070d6:	3001      	adds	r0, #1
 80070d8:	d12c      	bne.n	8007134 <_printf_float+0x250>
 80070da:	e764      	b.n	8006fa6 <_printf_float+0xc2>
 80070dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070e0:	f240 80e0 	bls.w	80072a4 <_printf_float+0x3c0>
 80070e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070e8:	2200      	movs	r2, #0
 80070ea:	2300      	movs	r3, #0
 80070ec:	f7f9 fcc4 	bl	8000a78 <__aeabi_dcmpeq>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d034      	beq.n	800715e <_printf_float+0x27a>
 80070f4:	4a37      	ldr	r2, [pc, #220]	; (80071d4 <_printf_float+0x2f0>)
 80070f6:	2301      	movs	r3, #1
 80070f8:	4631      	mov	r1, r6
 80070fa:	4628      	mov	r0, r5
 80070fc:	47b8      	blx	r7
 80070fe:	3001      	adds	r0, #1
 8007100:	f43f af51 	beq.w	8006fa6 <_printf_float+0xc2>
 8007104:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007108:	429a      	cmp	r2, r3
 800710a:	db02      	blt.n	8007112 <_printf_float+0x22e>
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	07d8      	lsls	r0, r3, #31
 8007110:	d510      	bpl.n	8007134 <_printf_float+0x250>
 8007112:	ee18 3a10 	vmov	r3, s16
 8007116:	4652      	mov	r2, sl
 8007118:	4631      	mov	r1, r6
 800711a:	4628      	mov	r0, r5
 800711c:	47b8      	blx	r7
 800711e:	3001      	adds	r0, #1
 8007120:	f43f af41 	beq.w	8006fa6 <_printf_float+0xc2>
 8007124:	f04f 0800 	mov.w	r8, #0
 8007128:	f104 091a 	add.w	r9, r4, #26
 800712c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800712e:	3b01      	subs	r3, #1
 8007130:	4543      	cmp	r3, r8
 8007132:	dc09      	bgt.n	8007148 <_printf_float+0x264>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	079b      	lsls	r3, r3, #30
 8007138:	f100 8105 	bmi.w	8007346 <_printf_float+0x462>
 800713c:	68e0      	ldr	r0, [r4, #12]
 800713e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007140:	4298      	cmp	r0, r3
 8007142:	bfb8      	it	lt
 8007144:	4618      	movlt	r0, r3
 8007146:	e730      	b.n	8006faa <_printf_float+0xc6>
 8007148:	2301      	movs	r3, #1
 800714a:	464a      	mov	r2, r9
 800714c:	4631      	mov	r1, r6
 800714e:	4628      	mov	r0, r5
 8007150:	47b8      	blx	r7
 8007152:	3001      	adds	r0, #1
 8007154:	f43f af27 	beq.w	8006fa6 <_printf_float+0xc2>
 8007158:	f108 0801 	add.w	r8, r8, #1
 800715c:	e7e6      	b.n	800712c <_printf_float+0x248>
 800715e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007160:	2b00      	cmp	r3, #0
 8007162:	dc39      	bgt.n	80071d8 <_printf_float+0x2f4>
 8007164:	4a1b      	ldr	r2, [pc, #108]	; (80071d4 <_printf_float+0x2f0>)
 8007166:	2301      	movs	r3, #1
 8007168:	4631      	mov	r1, r6
 800716a:	4628      	mov	r0, r5
 800716c:	47b8      	blx	r7
 800716e:	3001      	adds	r0, #1
 8007170:	f43f af19 	beq.w	8006fa6 <_printf_float+0xc2>
 8007174:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007178:	4313      	orrs	r3, r2
 800717a:	d102      	bne.n	8007182 <_printf_float+0x29e>
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	07d9      	lsls	r1, r3, #31
 8007180:	d5d8      	bpl.n	8007134 <_printf_float+0x250>
 8007182:	ee18 3a10 	vmov	r3, s16
 8007186:	4652      	mov	r2, sl
 8007188:	4631      	mov	r1, r6
 800718a:	4628      	mov	r0, r5
 800718c:	47b8      	blx	r7
 800718e:	3001      	adds	r0, #1
 8007190:	f43f af09 	beq.w	8006fa6 <_printf_float+0xc2>
 8007194:	f04f 0900 	mov.w	r9, #0
 8007198:	f104 0a1a 	add.w	sl, r4, #26
 800719c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800719e:	425b      	negs	r3, r3
 80071a0:	454b      	cmp	r3, r9
 80071a2:	dc01      	bgt.n	80071a8 <_printf_float+0x2c4>
 80071a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071a6:	e792      	b.n	80070ce <_printf_float+0x1ea>
 80071a8:	2301      	movs	r3, #1
 80071aa:	4652      	mov	r2, sl
 80071ac:	4631      	mov	r1, r6
 80071ae:	4628      	mov	r0, r5
 80071b0:	47b8      	blx	r7
 80071b2:	3001      	adds	r0, #1
 80071b4:	f43f aef7 	beq.w	8006fa6 <_printf_float+0xc2>
 80071b8:	f109 0901 	add.w	r9, r9, #1
 80071bc:	e7ee      	b.n	800719c <_printf_float+0x2b8>
 80071be:	bf00      	nop
 80071c0:	7fefffff 	.word	0x7fefffff
 80071c4:	0800bc30 	.word	0x0800bc30
 80071c8:	0800bc34 	.word	0x0800bc34
 80071cc:	0800bc3c 	.word	0x0800bc3c
 80071d0:	0800bc38 	.word	0x0800bc38
 80071d4:	0800bc40 	.word	0x0800bc40
 80071d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071dc:	429a      	cmp	r2, r3
 80071de:	bfa8      	it	ge
 80071e0:	461a      	movge	r2, r3
 80071e2:	2a00      	cmp	r2, #0
 80071e4:	4691      	mov	r9, r2
 80071e6:	dc37      	bgt.n	8007258 <_printf_float+0x374>
 80071e8:	f04f 0b00 	mov.w	fp, #0
 80071ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071f0:	f104 021a 	add.w	r2, r4, #26
 80071f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071f6:	9305      	str	r3, [sp, #20]
 80071f8:	eba3 0309 	sub.w	r3, r3, r9
 80071fc:	455b      	cmp	r3, fp
 80071fe:	dc33      	bgt.n	8007268 <_printf_float+0x384>
 8007200:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007204:	429a      	cmp	r2, r3
 8007206:	db3b      	blt.n	8007280 <_printf_float+0x39c>
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	07da      	lsls	r2, r3, #31
 800720c:	d438      	bmi.n	8007280 <_printf_float+0x39c>
 800720e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007210:	9a05      	ldr	r2, [sp, #20]
 8007212:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007214:	1a9a      	subs	r2, r3, r2
 8007216:	eba3 0901 	sub.w	r9, r3, r1
 800721a:	4591      	cmp	r9, r2
 800721c:	bfa8      	it	ge
 800721e:	4691      	movge	r9, r2
 8007220:	f1b9 0f00 	cmp.w	r9, #0
 8007224:	dc35      	bgt.n	8007292 <_printf_float+0x3ae>
 8007226:	f04f 0800 	mov.w	r8, #0
 800722a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800722e:	f104 0a1a 	add.w	sl, r4, #26
 8007232:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007236:	1a9b      	subs	r3, r3, r2
 8007238:	eba3 0309 	sub.w	r3, r3, r9
 800723c:	4543      	cmp	r3, r8
 800723e:	f77f af79 	ble.w	8007134 <_printf_float+0x250>
 8007242:	2301      	movs	r3, #1
 8007244:	4652      	mov	r2, sl
 8007246:	4631      	mov	r1, r6
 8007248:	4628      	mov	r0, r5
 800724a:	47b8      	blx	r7
 800724c:	3001      	adds	r0, #1
 800724e:	f43f aeaa 	beq.w	8006fa6 <_printf_float+0xc2>
 8007252:	f108 0801 	add.w	r8, r8, #1
 8007256:	e7ec      	b.n	8007232 <_printf_float+0x34e>
 8007258:	4613      	mov	r3, r2
 800725a:	4631      	mov	r1, r6
 800725c:	4642      	mov	r2, r8
 800725e:	4628      	mov	r0, r5
 8007260:	47b8      	blx	r7
 8007262:	3001      	adds	r0, #1
 8007264:	d1c0      	bne.n	80071e8 <_printf_float+0x304>
 8007266:	e69e      	b.n	8006fa6 <_printf_float+0xc2>
 8007268:	2301      	movs	r3, #1
 800726a:	4631      	mov	r1, r6
 800726c:	4628      	mov	r0, r5
 800726e:	9205      	str	r2, [sp, #20]
 8007270:	47b8      	blx	r7
 8007272:	3001      	adds	r0, #1
 8007274:	f43f ae97 	beq.w	8006fa6 <_printf_float+0xc2>
 8007278:	9a05      	ldr	r2, [sp, #20]
 800727a:	f10b 0b01 	add.w	fp, fp, #1
 800727e:	e7b9      	b.n	80071f4 <_printf_float+0x310>
 8007280:	ee18 3a10 	vmov	r3, s16
 8007284:	4652      	mov	r2, sl
 8007286:	4631      	mov	r1, r6
 8007288:	4628      	mov	r0, r5
 800728a:	47b8      	blx	r7
 800728c:	3001      	adds	r0, #1
 800728e:	d1be      	bne.n	800720e <_printf_float+0x32a>
 8007290:	e689      	b.n	8006fa6 <_printf_float+0xc2>
 8007292:	9a05      	ldr	r2, [sp, #20]
 8007294:	464b      	mov	r3, r9
 8007296:	4442      	add	r2, r8
 8007298:	4631      	mov	r1, r6
 800729a:	4628      	mov	r0, r5
 800729c:	47b8      	blx	r7
 800729e:	3001      	adds	r0, #1
 80072a0:	d1c1      	bne.n	8007226 <_printf_float+0x342>
 80072a2:	e680      	b.n	8006fa6 <_printf_float+0xc2>
 80072a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072a6:	2a01      	cmp	r2, #1
 80072a8:	dc01      	bgt.n	80072ae <_printf_float+0x3ca>
 80072aa:	07db      	lsls	r3, r3, #31
 80072ac:	d538      	bpl.n	8007320 <_printf_float+0x43c>
 80072ae:	2301      	movs	r3, #1
 80072b0:	4642      	mov	r2, r8
 80072b2:	4631      	mov	r1, r6
 80072b4:	4628      	mov	r0, r5
 80072b6:	47b8      	blx	r7
 80072b8:	3001      	adds	r0, #1
 80072ba:	f43f ae74 	beq.w	8006fa6 <_printf_float+0xc2>
 80072be:	ee18 3a10 	vmov	r3, s16
 80072c2:	4652      	mov	r2, sl
 80072c4:	4631      	mov	r1, r6
 80072c6:	4628      	mov	r0, r5
 80072c8:	47b8      	blx	r7
 80072ca:	3001      	adds	r0, #1
 80072cc:	f43f ae6b 	beq.w	8006fa6 <_printf_float+0xc2>
 80072d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072d4:	2200      	movs	r2, #0
 80072d6:	2300      	movs	r3, #0
 80072d8:	f7f9 fbce 	bl	8000a78 <__aeabi_dcmpeq>
 80072dc:	b9d8      	cbnz	r0, 8007316 <_printf_float+0x432>
 80072de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e0:	f108 0201 	add.w	r2, r8, #1
 80072e4:	3b01      	subs	r3, #1
 80072e6:	4631      	mov	r1, r6
 80072e8:	4628      	mov	r0, r5
 80072ea:	47b8      	blx	r7
 80072ec:	3001      	adds	r0, #1
 80072ee:	d10e      	bne.n	800730e <_printf_float+0x42a>
 80072f0:	e659      	b.n	8006fa6 <_printf_float+0xc2>
 80072f2:	2301      	movs	r3, #1
 80072f4:	4652      	mov	r2, sl
 80072f6:	4631      	mov	r1, r6
 80072f8:	4628      	mov	r0, r5
 80072fa:	47b8      	blx	r7
 80072fc:	3001      	adds	r0, #1
 80072fe:	f43f ae52 	beq.w	8006fa6 <_printf_float+0xc2>
 8007302:	f108 0801 	add.w	r8, r8, #1
 8007306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007308:	3b01      	subs	r3, #1
 800730a:	4543      	cmp	r3, r8
 800730c:	dcf1      	bgt.n	80072f2 <_printf_float+0x40e>
 800730e:	464b      	mov	r3, r9
 8007310:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007314:	e6dc      	b.n	80070d0 <_printf_float+0x1ec>
 8007316:	f04f 0800 	mov.w	r8, #0
 800731a:	f104 0a1a 	add.w	sl, r4, #26
 800731e:	e7f2      	b.n	8007306 <_printf_float+0x422>
 8007320:	2301      	movs	r3, #1
 8007322:	4642      	mov	r2, r8
 8007324:	e7df      	b.n	80072e6 <_printf_float+0x402>
 8007326:	2301      	movs	r3, #1
 8007328:	464a      	mov	r2, r9
 800732a:	4631      	mov	r1, r6
 800732c:	4628      	mov	r0, r5
 800732e:	47b8      	blx	r7
 8007330:	3001      	adds	r0, #1
 8007332:	f43f ae38 	beq.w	8006fa6 <_printf_float+0xc2>
 8007336:	f108 0801 	add.w	r8, r8, #1
 800733a:	68e3      	ldr	r3, [r4, #12]
 800733c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800733e:	1a5b      	subs	r3, r3, r1
 8007340:	4543      	cmp	r3, r8
 8007342:	dcf0      	bgt.n	8007326 <_printf_float+0x442>
 8007344:	e6fa      	b.n	800713c <_printf_float+0x258>
 8007346:	f04f 0800 	mov.w	r8, #0
 800734a:	f104 0919 	add.w	r9, r4, #25
 800734e:	e7f4      	b.n	800733a <_printf_float+0x456>

08007350 <_printf_common>:
 8007350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007354:	4616      	mov	r6, r2
 8007356:	4699      	mov	r9, r3
 8007358:	688a      	ldr	r2, [r1, #8]
 800735a:	690b      	ldr	r3, [r1, #16]
 800735c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007360:	4293      	cmp	r3, r2
 8007362:	bfb8      	it	lt
 8007364:	4613      	movlt	r3, r2
 8007366:	6033      	str	r3, [r6, #0]
 8007368:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800736c:	4607      	mov	r7, r0
 800736e:	460c      	mov	r4, r1
 8007370:	b10a      	cbz	r2, 8007376 <_printf_common+0x26>
 8007372:	3301      	adds	r3, #1
 8007374:	6033      	str	r3, [r6, #0]
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	0699      	lsls	r1, r3, #26
 800737a:	bf42      	ittt	mi
 800737c:	6833      	ldrmi	r3, [r6, #0]
 800737e:	3302      	addmi	r3, #2
 8007380:	6033      	strmi	r3, [r6, #0]
 8007382:	6825      	ldr	r5, [r4, #0]
 8007384:	f015 0506 	ands.w	r5, r5, #6
 8007388:	d106      	bne.n	8007398 <_printf_common+0x48>
 800738a:	f104 0a19 	add.w	sl, r4, #25
 800738e:	68e3      	ldr	r3, [r4, #12]
 8007390:	6832      	ldr	r2, [r6, #0]
 8007392:	1a9b      	subs	r3, r3, r2
 8007394:	42ab      	cmp	r3, r5
 8007396:	dc26      	bgt.n	80073e6 <_printf_common+0x96>
 8007398:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800739c:	1e13      	subs	r3, r2, #0
 800739e:	6822      	ldr	r2, [r4, #0]
 80073a0:	bf18      	it	ne
 80073a2:	2301      	movne	r3, #1
 80073a4:	0692      	lsls	r2, r2, #26
 80073a6:	d42b      	bmi.n	8007400 <_printf_common+0xb0>
 80073a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073ac:	4649      	mov	r1, r9
 80073ae:	4638      	mov	r0, r7
 80073b0:	47c0      	blx	r8
 80073b2:	3001      	adds	r0, #1
 80073b4:	d01e      	beq.n	80073f4 <_printf_common+0xa4>
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	68e5      	ldr	r5, [r4, #12]
 80073ba:	6832      	ldr	r2, [r6, #0]
 80073bc:	f003 0306 	and.w	r3, r3, #6
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	bf08      	it	eq
 80073c4:	1aad      	subeq	r5, r5, r2
 80073c6:	68a3      	ldr	r3, [r4, #8]
 80073c8:	6922      	ldr	r2, [r4, #16]
 80073ca:	bf0c      	ite	eq
 80073cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073d0:	2500      	movne	r5, #0
 80073d2:	4293      	cmp	r3, r2
 80073d4:	bfc4      	itt	gt
 80073d6:	1a9b      	subgt	r3, r3, r2
 80073d8:	18ed      	addgt	r5, r5, r3
 80073da:	2600      	movs	r6, #0
 80073dc:	341a      	adds	r4, #26
 80073de:	42b5      	cmp	r5, r6
 80073e0:	d11a      	bne.n	8007418 <_printf_common+0xc8>
 80073e2:	2000      	movs	r0, #0
 80073e4:	e008      	b.n	80073f8 <_printf_common+0xa8>
 80073e6:	2301      	movs	r3, #1
 80073e8:	4652      	mov	r2, sl
 80073ea:	4649      	mov	r1, r9
 80073ec:	4638      	mov	r0, r7
 80073ee:	47c0      	blx	r8
 80073f0:	3001      	adds	r0, #1
 80073f2:	d103      	bne.n	80073fc <_printf_common+0xac>
 80073f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fc:	3501      	adds	r5, #1
 80073fe:	e7c6      	b.n	800738e <_printf_common+0x3e>
 8007400:	18e1      	adds	r1, r4, r3
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	2030      	movs	r0, #48	; 0x30
 8007406:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800740a:	4422      	add	r2, r4
 800740c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007410:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007414:	3302      	adds	r3, #2
 8007416:	e7c7      	b.n	80073a8 <_printf_common+0x58>
 8007418:	2301      	movs	r3, #1
 800741a:	4622      	mov	r2, r4
 800741c:	4649      	mov	r1, r9
 800741e:	4638      	mov	r0, r7
 8007420:	47c0      	blx	r8
 8007422:	3001      	adds	r0, #1
 8007424:	d0e6      	beq.n	80073f4 <_printf_common+0xa4>
 8007426:	3601      	adds	r6, #1
 8007428:	e7d9      	b.n	80073de <_printf_common+0x8e>
	...

0800742c <_printf_i>:
 800742c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007430:	7e0f      	ldrb	r7, [r1, #24]
 8007432:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007434:	2f78      	cmp	r7, #120	; 0x78
 8007436:	4691      	mov	r9, r2
 8007438:	4680      	mov	r8, r0
 800743a:	460c      	mov	r4, r1
 800743c:	469a      	mov	sl, r3
 800743e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007442:	d807      	bhi.n	8007454 <_printf_i+0x28>
 8007444:	2f62      	cmp	r7, #98	; 0x62
 8007446:	d80a      	bhi.n	800745e <_printf_i+0x32>
 8007448:	2f00      	cmp	r7, #0
 800744a:	f000 80d8 	beq.w	80075fe <_printf_i+0x1d2>
 800744e:	2f58      	cmp	r7, #88	; 0x58
 8007450:	f000 80a3 	beq.w	800759a <_printf_i+0x16e>
 8007454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007458:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800745c:	e03a      	b.n	80074d4 <_printf_i+0xa8>
 800745e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007462:	2b15      	cmp	r3, #21
 8007464:	d8f6      	bhi.n	8007454 <_printf_i+0x28>
 8007466:	a101      	add	r1, pc, #4	; (adr r1, 800746c <_printf_i+0x40>)
 8007468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800746c:	080074c5 	.word	0x080074c5
 8007470:	080074d9 	.word	0x080074d9
 8007474:	08007455 	.word	0x08007455
 8007478:	08007455 	.word	0x08007455
 800747c:	08007455 	.word	0x08007455
 8007480:	08007455 	.word	0x08007455
 8007484:	080074d9 	.word	0x080074d9
 8007488:	08007455 	.word	0x08007455
 800748c:	08007455 	.word	0x08007455
 8007490:	08007455 	.word	0x08007455
 8007494:	08007455 	.word	0x08007455
 8007498:	080075e5 	.word	0x080075e5
 800749c:	08007509 	.word	0x08007509
 80074a0:	080075c7 	.word	0x080075c7
 80074a4:	08007455 	.word	0x08007455
 80074a8:	08007455 	.word	0x08007455
 80074ac:	08007607 	.word	0x08007607
 80074b0:	08007455 	.word	0x08007455
 80074b4:	08007509 	.word	0x08007509
 80074b8:	08007455 	.word	0x08007455
 80074bc:	08007455 	.word	0x08007455
 80074c0:	080075cf 	.word	0x080075cf
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	1d1a      	adds	r2, r3, #4
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	602a      	str	r2, [r5, #0]
 80074cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074d4:	2301      	movs	r3, #1
 80074d6:	e0a3      	b.n	8007620 <_printf_i+0x1f4>
 80074d8:	6820      	ldr	r0, [r4, #0]
 80074da:	6829      	ldr	r1, [r5, #0]
 80074dc:	0606      	lsls	r6, r0, #24
 80074de:	f101 0304 	add.w	r3, r1, #4
 80074e2:	d50a      	bpl.n	80074fa <_printf_i+0xce>
 80074e4:	680e      	ldr	r6, [r1, #0]
 80074e6:	602b      	str	r3, [r5, #0]
 80074e8:	2e00      	cmp	r6, #0
 80074ea:	da03      	bge.n	80074f4 <_printf_i+0xc8>
 80074ec:	232d      	movs	r3, #45	; 0x2d
 80074ee:	4276      	negs	r6, r6
 80074f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074f4:	485e      	ldr	r0, [pc, #376]	; (8007670 <_printf_i+0x244>)
 80074f6:	230a      	movs	r3, #10
 80074f8:	e019      	b.n	800752e <_printf_i+0x102>
 80074fa:	680e      	ldr	r6, [r1, #0]
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007502:	bf18      	it	ne
 8007504:	b236      	sxthne	r6, r6
 8007506:	e7ef      	b.n	80074e8 <_printf_i+0xbc>
 8007508:	682b      	ldr	r3, [r5, #0]
 800750a:	6820      	ldr	r0, [r4, #0]
 800750c:	1d19      	adds	r1, r3, #4
 800750e:	6029      	str	r1, [r5, #0]
 8007510:	0601      	lsls	r1, r0, #24
 8007512:	d501      	bpl.n	8007518 <_printf_i+0xec>
 8007514:	681e      	ldr	r6, [r3, #0]
 8007516:	e002      	b.n	800751e <_printf_i+0xf2>
 8007518:	0646      	lsls	r6, r0, #25
 800751a:	d5fb      	bpl.n	8007514 <_printf_i+0xe8>
 800751c:	881e      	ldrh	r6, [r3, #0]
 800751e:	4854      	ldr	r0, [pc, #336]	; (8007670 <_printf_i+0x244>)
 8007520:	2f6f      	cmp	r7, #111	; 0x6f
 8007522:	bf0c      	ite	eq
 8007524:	2308      	moveq	r3, #8
 8007526:	230a      	movne	r3, #10
 8007528:	2100      	movs	r1, #0
 800752a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800752e:	6865      	ldr	r5, [r4, #4]
 8007530:	60a5      	str	r5, [r4, #8]
 8007532:	2d00      	cmp	r5, #0
 8007534:	bfa2      	ittt	ge
 8007536:	6821      	ldrge	r1, [r4, #0]
 8007538:	f021 0104 	bicge.w	r1, r1, #4
 800753c:	6021      	strge	r1, [r4, #0]
 800753e:	b90e      	cbnz	r6, 8007544 <_printf_i+0x118>
 8007540:	2d00      	cmp	r5, #0
 8007542:	d04d      	beq.n	80075e0 <_printf_i+0x1b4>
 8007544:	4615      	mov	r5, r2
 8007546:	fbb6 f1f3 	udiv	r1, r6, r3
 800754a:	fb03 6711 	mls	r7, r3, r1, r6
 800754e:	5dc7      	ldrb	r7, [r0, r7]
 8007550:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007554:	4637      	mov	r7, r6
 8007556:	42bb      	cmp	r3, r7
 8007558:	460e      	mov	r6, r1
 800755a:	d9f4      	bls.n	8007546 <_printf_i+0x11a>
 800755c:	2b08      	cmp	r3, #8
 800755e:	d10b      	bne.n	8007578 <_printf_i+0x14c>
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	07de      	lsls	r6, r3, #31
 8007564:	d508      	bpl.n	8007578 <_printf_i+0x14c>
 8007566:	6923      	ldr	r3, [r4, #16]
 8007568:	6861      	ldr	r1, [r4, #4]
 800756a:	4299      	cmp	r1, r3
 800756c:	bfde      	ittt	le
 800756e:	2330      	movle	r3, #48	; 0x30
 8007570:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007574:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007578:	1b52      	subs	r2, r2, r5
 800757a:	6122      	str	r2, [r4, #16]
 800757c:	f8cd a000 	str.w	sl, [sp]
 8007580:	464b      	mov	r3, r9
 8007582:	aa03      	add	r2, sp, #12
 8007584:	4621      	mov	r1, r4
 8007586:	4640      	mov	r0, r8
 8007588:	f7ff fee2 	bl	8007350 <_printf_common>
 800758c:	3001      	adds	r0, #1
 800758e:	d14c      	bne.n	800762a <_printf_i+0x1fe>
 8007590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007594:	b004      	add	sp, #16
 8007596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800759a:	4835      	ldr	r0, [pc, #212]	; (8007670 <_printf_i+0x244>)
 800759c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80075a0:	6829      	ldr	r1, [r5, #0]
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80075a8:	6029      	str	r1, [r5, #0]
 80075aa:	061d      	lsls	r5, r3, #24
 80075ac:	d514      	bpl.n	80075d8 <_printf_i+0x1ac>
 80075ae:	07df      	lsls	r7, r3, #31
 80075b0:	bf44      	itt	mi
 80075b2:	f043 0320 	orrmi.w	r3, r3, #32
 80075b6:	6023      	strmi	r3, [r4, #0]
 80075b8:	b91e      	cbnz	r6, 80075c2 <_printf_i+0x196>
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	f023 0320 	bic.w	r3, r3, #32
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	2310      	movs	r3, #16
 80075c4:	e7b0      	b.n	8007528 <_printf_i+0xfc>
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	f043 0320 	orr.w	r3, r3, #32
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	2378      	movs	r3, #120	; 0x78
 80075d0:	4828      	ldr	r0, [pc, #160]	; (8007674 <_printf_i+0x248>)
 80075d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075d6:	e7e3      	b.n	80075a0 <_printf_i+0x174>
 80075d8:	0659      	lsls	r1, r3, #25
 80075da:	bf48      	it	mi
 80075dc:	b2b6      	uxthmi	r6, r6
 80075de:	e7e6      	b.n	80075ae <_printf_i+0x182>
 80075e0:	4615      	mov	r5, r2
 80075e2:	e7bb      	b.n	800755c <_printf_i+0x130>
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	6826      	ldr	r6, [r4, #0]
 80075e8:	6961      	ldr	r1, [r4, #20]
 80075ea:	1d18      	adds	r0, r3, #4
 80075ec:	6028      	str	r0, [r5, #0]
 80075ee:	0635      	lsls	r5, r6, #24
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	d501      	bpl.n	80075f8 <_printf_i+0x1cc>
 80075f4:	6019      	str	r1, [r3, #0]
 80075f6:	e002      	b.n	80075fe <_printf_i+0x1d2>
 80075f8:	0670      	lsls	r0, r6, #25
 80075fa:	d5fb      	bpl.n	80075f4 <_printf_i+0x1c8>
 80075fc:	8019      	strh	r1, [r3, #0]
 80075fe:	2300      	movs	r3, #0
 8007600:	6123      	str	r3, [r4, #16]
 8007602:	4615      	mov	r5, r2
 8007604:	e7ba      	b.n	800757c <_printf_i+0x150>
 8007606:	682b      	ldr	r3, [r5, #0]
 8007608:	1d1a      	adds	r2, r3, #4
 800760a:	602a      	str	r2, [r5, #0]
 800760c:	681d      	ldr	r5, [r3, #0]
 800760e:	6862      	ldr	r2, [r4, #4]
 8007610:	2100      	movs	r1, #0
 8007612:	4628      	mov	r0, r5
 8007614:	f7f8 fdbc 	bl	8000190 <memchr>
 8007618:	b108      	cbz	r0, 800761e <_printf_i+0x1f2>
 800761a:	1b40      	subs	r0, r0, r5
 800761c:	6060      	str	r0, [r4, #4]
 800761e:	6863      	ldr	r3, [r4, #4]
 8007620:	6123      	str	r3, [r4, #16]
 8007622:	2300      	movs	r3, #0
 8007624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007628:	e7a8      	b.n	800757c <_printf_i+0x150>
 800762a:	6923      	ldr	r3, [r4, #16]
 800762c:	462a      	mov	r2, r5
 800762e:	4649      	mov	r1, r9
 8007630:	4640      	mov	r0, r8
 8007632:	47d0      	blx	sl
 8007634:	3001      	adds	r0, #1
 8007636:	d0ab      	beq.n	8007590 <_printf_i+0x164>
 8007638:	6823      	ldr	r3, [r4, #0]
 800763a:	079b      	lsls	r3, r3, #30
 800763c:	d413      	bmi.n	8007666 <_printf_i+0x23a>
 800763e:	68e0      	ldr	r0, [r4, #12]
 8007640:	9b03      	ldr	r3, [sp, #12]
 8007642:	4298      	cmp	r0, r3
 8007644:	bfb8      	it	lt
 8007646:	4618      	movlt	r0, r3
 8007648:	e7a4      	b.n	8007594 <_printf_i+0x168>
 800764a:	2301      	movs	r3, #1
 800764c:	4632      	mov	r2, r6
 800764e:	4649      	mov	r1, r9
 8007650:	4640      	mov	r0, r8
 8007652:	47d0      	blx	sl
 8007654:	3001      	adds	r0, #1
 8007656:	d09b      	beq.n	8007590 <_printf_i+0x164>
 8007658:	3501      	adds	r5, #1
 800765a:	68e3      	ldr	r3, [r4, #12]
 800765c:	9903      	ldr	r1, [sp, #12]
 800765e:	1a5b      	subs	r3, r3, r1
 8007660:	42ab      	cmp	r3, r5
 8007662:	dcf2      	bgt.n	800764a <_printf_i+0x21e>
 8007664:	e7eb      	b.n	800763e <_printf_i+0x212>
 8007666:	2500      	movs	r5, #0
 8007668:	f104 0619 	add.w	r6, r4, #25
 800766c:	e7f5      	b.n	800765a <_printf_i+0x22e>
 800766e:	bf00      	nop
 8007670:	0800bc42 	.word	0x0800bc42
 8007674:	0800bc53 	.word	0x0800bc53

08007678 <_scanf_float>:
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	b087      	sub	sp, #28
 800767e:	4617      	mov	r7, r2
 8007680:	9303      	str	r3, [sp, #12]
 8007682:	688b      	ldr	r3, [r1, #8]
 8007684:	1e5a      	subs	r2, r3, #1
 8007686:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800768a:	bf83      	ittte	hi
 800768c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007690:	195b      	addhi	r3, r3, r5
 8007692:	9302      	strhi	r3, [sp, #8]
 8007694:	2300      	movls	r3, #0
 8007696:	bf86      	itte	hi
 8007698:	f240 135d 	movwhi	r3, #349	; 0x15d
 800769c:	608b      	strhi	r3, [r1, #8]
 800769e:	9302      	strls	r3, [sp, #8]
 80076a0:	680b      	ldr	r3, [r1, #0]
 80076a2:	468b      	mov	fp, r1
 80076a4:	2500      	movs	r5, #0
 80076a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80076aa:	f84b 3b1c 	str.w	r3, [fp], #28
 80076ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80076b2:	4680      	mov	r8, r0
 80076b4:	460c      	mov	r4, r1
 80076b6:	465e      	mov	r6, fp
 80076b8:	46aa      	mov	sl, r5
 80076ba:	46a9      	mov	r9, r5
 80076bc:	9501      	str	r5, [sp, #4]
 80076be:	68a2      	ldr	r2, [r4, #8]
 80076c0:	b152      	cbz	r2, 80076d8 <_scanf_float+0x60>
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	2b4e      	cmp	r3, #78	; 0x4e
 80076c8:	d864      	bhi.n	8007794 <_scanf_float+0x11c>
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d83c      	bhi.n	8007748 <_scanf_float+0xd0>
 80076ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80076d2:	b2c8      	uxtb	r0, r1
 80076d4:	280e      	cmp	r0, #14
 80076d6:	d93a      	bls.n	800774e <_scanf_float+0xd6>
 80076d8:	f1b9 0f00 	cmp.w	r9, #0
 80076dc:	d003      	beq.n	80076e6 <_scanf_float+0x6e>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80076ea:	f1ba 0f01 	cmp.w	sl, #1
 80076ee:	f200 8113 	bhi.w	8007918 <_scanf_float+0x2a0>
 80076f2:	455e      	cmp	r6, fp
 80076f4:	f200 8105 	bhi.w	8007902 <_scanf_float+0x28a>
 80076f8:	2501      	movs	r5, #1
 80076fa:	4628      	mov	r0, r5
 80076fc:	b007      	add	sp, #28
 80076fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007702:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007706:	2a0d      	cmp	r2, #13
 8007708:	d8e6      	bhi.n	80076d8 <_scanf_float+0x60>
 800770a:	a101      	add	r1, pc, #4	; (adr r1, 8007710 <_scanf_float+0x98>)
 800770c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007710:	0800784f 	.word	0x0800784f
 8007714:	080076d9 	.word	0x080076d9
 8007718:	080076d9 	.word	0x080076d9
 800771c:	080076d9 	.word	0x080076d9
 8007720:	080078af 	.word	0x080078af
 8007724:	08007887 	.word	0x08007887
 8007728:	080076d9 	.word	0x080076d9
 800772c:	080076d9 	.word	0x080076d9
 8007730:	0800785d 	.word	0x0800785d
 8007734:	080076d9 	.word	0x080076d9
 8007738:	080076d9 	.word	0x080076d9
 800773c:	080076d9 	.word	0x080076d9
 8007740:	080076d9 	.word	0x080076d9
 8007744:	08007815 	.word	0x08007815
 8007748:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800774c:	e7db      	b.n	8007706 <_scanf_float+0x8e>
 800774e:	290e      	cmp	r1, #14
 8007750:	d8c2      	bhi.n	80076d8 <_scanf_float+0x60>
 8007752:	a001      	add	r0, pc, #4	; (adr r0, 8007758 <_scanf_float+0xe0>)
 8007754:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007758:	08007807 	.word	0x08007807
 800775c:	080076d9 	.word	0x080076d9
 8007760:	08007807 	.word	0x08007807
 8007764:	0800789b 	.word	0x0800789b
 8007768:	080076d9 	.word	0x080076d9
 800776c:	080077b5 	.word	0x080077b5
 8007770:	080077f1 	.word	0x080077f1
 8007774:	080077f1 	.word	0x080077f1
 8007778:	080077f1 	.word	0x080077f1
 800777c:	080077f1 	.word	0x080077f1
 8007780:	080077f1 	.word	0x080077f1
 8007784:	080077f1 	.word	0x080077f1
 8007788:	080077f1 	.word	0x080077f1
 800778c:	080077f1 	.word	0x080077f1
 8007790:	080077f1 	.word	0x080077f1
 8007794:	2b6e      	cmp	r3, #110	; 0x6e
 8007796:	d809      	bhi.n	80077ac <_scanf_float+0x134>
 8007798:	2b60      	cmp	r3, #96	; 0x60
 800779a:	d8b2      	bhi.n	8007702 <_scanf_float+0x8a>
 800779c:	2b54      	cmp	r3, #84	; 0x54
 800779e:	d077      	beq.n	8007890 <_scanf_float+0x218>
 80077a0:	2b59      	cmp	r3, #89	; 0x59
 80077a2:	d199      	bne.n	80076d8 <_scanf_float+0x60>
 80077a4:	2d07      	cmp	r5, #7
 80077a6:	d197      	bne.n	80076d8 <_scanf_float+0x60>
 80077a8:	2508      	movs	r5, #8
 80077aa:	e029      	b.n	8007800 <_scanf_float+0x188>
 80077ac:	2b74      	cmp	r3, #116	; 0x74
 80077ae:	d06f      	beq.n	8007890 <_scanf_float+0x218>
 80077b0:	2b79      	cmp	r3, #121	; 0x79
 80077b2:	e7f6      	b.n	80077a2 <_scanf_float+0x12a>
 80077b4:	6821      	ldr	r1, [r4, #0]
 80077b6:	05c8      	lsls	r0, r1, #23
 80077b8:	d51a      	bpl.n	80077f0 <_scanf_float+0x178>
 80077ba:	9b02      	ldr	r3, [sp, #8]
 80077bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80077c0:	6021      	str	r1, [r4, #0]
 80077c2:	f109 0901 	add.w	r9, r9, #1
 80077c6:	b11b      	cbz	r3, 80077d0 <_scanf_float+0x158>
 80077c8:	3b01      	subs	r3, #1
 80077ca:	3201      	adds	r2, #1
 80077cc:	9302      	str	r3, [sp, #8]
 80077ce:	60a2      	str	r2, [r4, #8]
 80077d0:	68a3      	ldr	r3, [r4, #8]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	60a3      	str	r3, [r4, #8]
 80077d6:	6923      	ldr	r3, [r4, #16]
 80077d8:	3301      	adds	r3, #1
 80077da:	6123      	str	r3, [r4, #16]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3b01      	subs	r3, #1
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	607b      	str	r3, [r7, #4]
 80077e4:	f340 8084 	ble.w	80078f0 <_scanf_float+0x278>
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	3301      	adds	r3, #1
 80077ec:	603b      	str	r3, [r7, #0]
 80077ee:	e766      	b.n	80076be <_scanf_float+0x46>
 80077f0:	eb1a 0f05 	cmn.w	sl, r5
 80077f4:	f47f af70 	bne.w	80076d8 <_scanf_float+0x60>
 80077f8:	6822      	ldr	r2, [r4, #0]
 80077fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80077fe:	6022      	str	r2, [r4, #0]
 8007800:	f806 3b01 	strb.w	r3, [r6], #1
 8007804:	e7e4      	b.n	80077d0 <_scanf_float+0x158>
 8007806:	6822      	ldr	r2, [r4, #0]
 8007808:	0610      	lsls	r0, r2, #24
 800780a:	f57f af65 	bpl.w	80076d8 <_scanf_float+0x60>
 800780e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007812:	e7f4      	b.n	80077fe <_scanf_float+0x186>
 8007814:	f1ba 0f00 	cmp.w	sl, #0
 8007818:	d10e      	bne.n	8007838 <_scanf_float+0x1c0>
 800781a:	f1b9 0f00 	cmp.w	r9, #0
 800781e:	d10e      	bne.n	800783e <_scanf_float+0x1c6>
 8007820:	6822      	ldr	r2, [r4, #0]
 8007822:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007826:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800782a:	d108      	bne.n	800783e <_scanf_float+0x1c6>
 800782c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007830:	6022      	str	r2, [r4, #0]
 8007832:	f04f 0a01 	mov.w	sl, #1
 8007836:	e7e3      	b.n	8007800 <_scanf_float+0x188>
 8007838:	f1ba 0f02 	cmp.w	sl, #2
 800783c:	d055      	beq.n	80078ea <_scanf_float+0x272>
 800783e:	2d01      	cmp	r5, #1
 8007840:	d002      	beq.n	8007848 <_scanf_float+0x1d0>
 8007842:	2d04      	cmp	r5, #4
 8007844:	f47f af48 	bne.w	80076d8 <_scanf_float+0x60>
 8007848:	3501      	adds	r5, #1
 800784a:	b2ed      	uxtb	r5, r5
 800784c:	e7d8      	b.n	8007800 <_scanf_float+0x188>
 800784e:	f1ba 0f01 	cmp.w	sl, #1
 8007852:	f47f af41 	bne.w	80076d8 <_scanf_float+0x60>
 8007856:	f04f 0a02 	mov.w	sl, #2
 800785a:	e7d1      	b.n	8007800 <_scanf_float+0x188>
 800785c:	b97d      	cbnz	r5, 800787e <_scanf_float+0x206>
 800785e:	f1b9 0f00 	cmp.w	r9, #0
 8007862:	f47f af3c 	bne.w	80076de <_scanf_float+0x66>
 8007866:	6822      	ldr	r2, [r4, #0]
 8007868:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800786c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007870:	f47f af39 	bne.w	80076e6 <_scanf_float+0x6e>
 8007874:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007878:	6022      	str	r2, [r4, #0]
 800787a:	2501      	movs	r5, #1
 800787c:	e7c0      	b.n	8007800 <_scanf_float+0x188>
 800787e:	2d03      	cmp	r5, #3
 8007880:	d0e2      	beq.n	8007848 <_scanf_float+0x1d0>
 8007882:	2d05      	cmp	r5, #5
 8007884:	e7de      	b.n	8007844 <_scanf_float+0x1cc>
 8007886:	2d02      	cmp	r5, #2
 8007888:	f47f af26 	bne.w	80076d8 <_scanf_float+0x60>
 800788c:	2503      	movs	r5, #3
 800788e:	e7b7      	b.n	8007800 <_scanf_float+0x188>
 8007890:	2d06      	cmp	r5, #6
 8007892:	f47f af21 	bne.w	80076d8 <_scanf_float+0x60>
 8007896:	2507      	movs	r5, #7
 8007898:	e7b2      	b.n	8007800 <_scanf_float+0x188>
 800789a:	6822      	ldr	r2, [r4, #0]
 800789c:	0591      	lsls	r1, r2, #22
 800789e:	f57f af1b 	bpl.w	80076d8 <_scanf_float+0x60>
 80078a2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80078a6:	6022      	str	r2, [r4, #0]
 80078a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80078ac:	e7a8      	b.n	8007800 <_scanf_float+0x188>
 80078ae:	6822      	ldr	r2, [r4, #0]
 80078b0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80078b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80078b8:	d006      	beq.n	80078c8 <_scanf_float+0x250>
 80078ba:	0550      	lsls	r0, r2, #21
 80078bc:	f57f af0c 	bpl.w	80076d8 <_scanf_float+0x60>
 80078c0:	f1b9 0f00 	cmp.w	r9, #0
 80078c4:	f43f af0f 	beq.w	80076e6 <_scanf_float+0x6e>
 80078c8:	0591      	lsls	r1, r2, #22
 80078ca:	bf58      	it	pl
 80078cc:	9901      	ldrpl	r1, [sp, #4]
 80078ce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80078d2:	bf58      	it	pl
 80078d4:	eba9 0101 	subpl.w	r1, r9, r1
 80078d8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80078dc:	bf58      	it	pl
 80078de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80078e2:	6022      	str	r2, [r4, #0]
 80078e4:	f04f 0900 	mov.w	r9, #0
 80078e8:	e78a      	b.n	8007800 <_scanf_float+0x188>
 80078ea:	f04f 0a03 	mov.w	sl, #3
 80078ee:	e787      	b.n	8007800 <_scanf_float+0x188>
 80078f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80078f4:	4639      	mov	r1, r7
 80078f6:	4640      	mov	r0, r8
 80078f8:	4798      	blx	r3
 80078fa:	2800      	cmp	r0, #0
 80078fc:	f43f aedf 	beq.w	80076be <_scanf_float+0x46>
 8007900:	e6ea      	b.n	80076d8 <_scanf_float+0x60>
 8007902:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007906:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800790a:	463a      	mov	r2, r7
 800790c:	4640      	mov	r0, r8
 800790e:	4798      	blx	r3
 8007910:	6923      	ldr	r3, [r4, #16]
 8007912:	3b01      	subs	r3, #1
 8007914:	6123      	str	r3, [r4, #16]
 8007916:	e6ec      	b.n	80076f2 <_scanf_float+0x7a>
 8007918:	1e6b      	subs	r3, r5, #1
 800791a:	2b06      	cmp	r3, #6
 800791c:	d825      	bhi.n	800796a <_scanf_float+0x2f2>
 800791e:	2d02      	cmp	r5, #2
 8007920:	d836      	bhi.n	8007990 <_scanf_float+0x318>
 8007922:	455e      	cmp	r6, fp
 8007924:	f67f aee8 	bls.w	80076f8 <_scanf_float+0x80>
 8007928:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800792c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007930:	463a      	mov	r2, r7
 8007932:	4640      	mov	r0, r8
 8007934:	4798      	blx	r3
 8007936:	6923      	ldr	r3, [r4, #16]
 8007938:	3b01      	subs	r3, #1
 800793a:	6123      	str	r3, [r4, #16]
 800793c:	e7f1      	b.n	8007922 <_scanf_float+0x2aa>
 800793e:	9802      	ldr	r0, [sp, #8]
 8007940:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007944:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007948:	9002      	str	r0, [sp, #8]
 800794a:	463a      	mov	r2, r7
 800794c:	4640      	mov	r0, r8
 800794e:	4798      	blx	r3
 8007950:	6923      	ldr	r3, [r4, #16]
 8007952:	3b01      	subs	r3, #1
 8007954:	6123      	str	r3, [r4, #16]
 8007956:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800795a:	fa5f fa8a 	uxtb.w	sl, sl
 800795e:	f1ba 0f02 	cmp.w	sl, #2
 8007962:	d1ec      	bne.n	800793e <_scanf_float+0x2c6>
 8007964:	3d03      	subs	r5, #3
 8007966:	b2ed      	uxtb	r5, r5
 8007968:	1b76      	subs	r6, r6, r5
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	05da      	lsls	r2, r3, #23
 800796e:	d52f      	bpl.n	80079d0 <_scanf_float+0x358>
 8007970:	055b      	lsls	r3, r3, #21
 8007972:	d510      	bpl.n	8007996 <_scanf_float+0x31e>
 8007974:	455e      	cmp	r6, fp
 8007976:	f67f aebf 	bls.w	80076f8 <_scanf_float+0x80>
 800797a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800797e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007982:	463a      	mov	r2, r7
 8007984:	4640      	mov	r0, r8
 8007986:	4798      	blx	r3
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	3b01      	subs	r3, #1
 800798c:	6123      	str	r3, [r4, #16]
 800798e:	e7f1      	b.n	8007974 <_scanf_float+0x2fc>
 8007990:	46aa      	mov	sl, r5
 8007992:	9602      	str	r6, [sp, #8]
 8007994:	e7df      	b.n	8007956 <_scanf_float+0x2de>
 8007996:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800799a:	6923      	ldr	r3, [r4, #16]
 800799c:	2965      	cmp	r1, #101	; 0x65
 800799e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80079a2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80079a6:	6123      	str	r3, [r4, #16]
 80079a8:	d00c      	beq.n	80079c4 <_scanf_float+0x34c>
 80079aa:	2945      	cmp	r1, #69	; 0x45
 80079ac:	d00a      	beq.n	80079c4 <_scanf_float+0x34c>
 80079ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079b2:	463a      	mov	r2, r7
 80079b4:	4640      	mov	r0, r8
 80079b6:	4798      	blx	r3
 80079b8:	6923      	ldr	r3, [r4, #16]
 80079ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80079be:	3b01      	subs	r3, #1
 80079c0:	1eb5      	subs	r5, r6, #2
 80079c2:	6123      	str	r3, [r4, #16]
 80079c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079c8:	463a      	mov	r2, r7
 80079ca:	4640      	mov	r0, r8
 80079cc:	4798      	blx	r3
 80079ce:	462e      	mov	r6, r5
 80079d0:	6825      	ldr	r5, [r4, #0]
 80079d2:	f015 0510 	ands.w	r5, r5, #16
 80079d6:	d159      	bne.n	8007a8c <_scanf_float+0x414>
 80079d8:	7035      	strb	r5, [r6, #0]
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80079e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079e4:	d11b      	bne.n	8007a1e <_scanf_float+0x3a6>
 80079e6:	9b01      	ldr	r3, [sp, #4]
 80079e8:	454b      	cmp	r3, r9
 80079ea:	eba3 0209 	sub.w	r2, r3, r9
 80079ee:	d123      	bne.n	8007a38 <_scanf_float+0x3c0>
 80079f0:	2200      	movs	r2, #0
 80079f2:	4659      	mov	r1, fp
 80079f4:	4640      	mov	r0, r8
 80079f6:	f000 ff75 	bl	80088e4 <_strtod_r>
 80079fa:	6822      	ldr	r2, [r4, #0]
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	f012 0f02 	tst.w	r2, #2
 8007a02:	ec57 6b10 	vmov	r6, r7, d0
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	d021      	beq.n	8007a4e <_scanf_float+0x3d6>
 8007a0a:	9903      	ldr	r1, [sp, #12]
 8007a0c:	1d1a      	adds	r2, r3, #4
 8007a0e:	600a      	str	r2, [r1, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	e9c3 6700 	strd	r6, r7, [r3]
 8007a16:	68e3      	ldr	r3, [r4, #12]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	60e3      	str	r3, [r4, #12]
 8007a1c:	e66d      	b.n	80076fa <_scanf_float+0x82>
 8007a1e:	9b04      	ldr	r3, [sp, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0e5      	beq.n	80079f0 <_scanf_float+0x378>
 8007a24:	9905      	ldr	r1, [sp, #20]
 8007a26:	230a      	movs	r3, #10
 8007a28:	462a      	mov	r2, r5
 8007a2a:	3101      	adds	r1, #1
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	f000 ffe1 	bl	80089f4 <_strtol_r>
 8007a32:	9b04      	ldr	r3, [sp, #16]
 8007a34:	9e05      	ldr	r6, [sp, #20]
 8007a36:	1ac2      	subs	r2, r0, r3
 8007a38:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007a3c:	429e      	cmp	r6, r3
 8007a3e:	bf28      	it	cs
 8007a40:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007a44:	4912      	ldr	r1, [pc, #72]	; (8007a90 <_scanf_float+0x418>)
 8007a46:	4630      	mov	r0, r6
 8007a48:	f000 f90a 	bl	8007c60 <siprintf>
 8007a4c:	e7d0      	b.n	80079f0 <_scanf_float+0x378>
 8007a4e:	9903      	ldr	r1, [sp, #12]
 8007a50:	f012 0f04 	tst.w	r2, #4
 8007a54:	f103 0204 	add.w	r2, r3, #4
 8007a58:	600a      	str	r2, [r1, #0]
 8007a5a:	d1d9      	bne.n	8007a10 <_scanf_float+0x398>
 8007a5c:	f8d3 8000 	ldr.w	r8, [r3]
 8007a60:	ee10 2a10 	vmov	r2, s0
 8007a64:	ee10 0a10 	vmov	r0, s0
 8007a68:	463b      	mov	r3, r7
 8007a6a:	4639      	mov	r1, r7
 8007a6c:	f7f9 f836 	bl	8000adc <__aeabi_dcmpun>
 8007a70:	b128      	cbz	r0, 8007a7e <_scanf_float+0x406>
 8007a72:	4808      	ldr	r0, [pc, #32]	; (8007a94 <_scanf_float+0x41c>)
 8007a74:	f000 f8ee 	bl	8007c54 <nanf>
 8007a78:	ed88 0a00 	vstr	s0, [r8]
 8007a7c:	e7cb      	b.n	8007a16 <_scanf_float+0x39e>
 8007a7e:	4630      	mov	r0, r6
 8007a80:	4639      	mov	r1, r7
 8007a82:	f7f9 f889 	bl	8000b98 <__aeabi_d2f>
 8007a86:	f8c8 0000 	str.w	r0, [r8]
 8007a8a:	e7c4      	b.n	8007a16 <_scanf_float+0x39e>
 8007a8c:	2500      	movs	r5, #0
 8007a8e:	e634      	b.n	80076fa <_scanf_float+0x82>
 8007a90:	0800bc64 	.word	0x0800bc64
 8007a94:	0800c0d8 	.word	0x0800c0d8

08007a98 <iprintf>:
 8007a98:	b40f      	push	{r0, r1, r2, r3}
 8007a9a:	4b0a      	ldr	r3, [pc, #40]	; (8007ac4 <iprintf+0x2c>)
 8007a9c:	b513      	push	{r0, r1, r4, lr}
 8007a9e:	681c      	ldr	r4, [r3, #0]
 8007aa0:	b124      	cbz	r4, 8007aac <iprintf+0x14>
 8007aa2:	69a3      	ldr	r3, [r4, #24]
 8007aa4:	b913      	cbnz	r3, 8007aac <iprintf+0x14>
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f001 ff46 	bl	8009938 <__sinit>
 8007aac:	ab05      	add	r3, sp, #20
 8007aae:	9a04      	ldr	r2, [sp, #16]
 8007ab0:	68a1      	ldr	r1, [r4, #8]
 8007ab2:	9301      	str	r3, [sp, #4]
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f003 fb1d 	bl	800b0f4 <_vfiprintf_r>
 8007aba:	b002      	add	sp, #8
 8007abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ac0:	b004      	add	sp, #16
 8007ac2:	4770      	bx	lr
 8007ac4:	20000014 	.word	0x20000014

08007ac8 <setvbuf>:
 8007ac8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007acc:	461d      	mov	r5, r3
 8007ace:	4b5d      	ldr	r3, [pc, #372]	; (8007c44 <setvbuf+0x17c>)
 8007ad0:	681f      	ldr	r7, [r3, #0]
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	460e      	mov	r6, r1
 8007ad6:	4690      	mov	r8, r2
 8007ad8:	b127      	cbz	r7, 8007ae4 <setvbuf+0x1c>
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	b913      	cbnz	r3, 8007ae4 <setvbuf+0x1c>
 8007ade:	4638      	mov	r0, r7
 8007ae0:	f001 ff2a 	bl	8009938 <__sinit>
 8007ae4:	4b58      	ldr	r3, [pc, #352]	; (8007c48 <setvbuf+0x180>)
 8007ae6:	429c      	cmp	r4, r3
 8007ae8:	d167      	bne.n	8007bba <setvbuf+0xf2>
 8007aea:	687c      	ldr	r4, [r7, #4]
 8007aec:	f1b8 0f02 	cmp.w	r8, #2
 8007af0:	d006      	beq.n	8007b00 <setvbuf+0x38>
 8007af2:	f1b8 0f01 	cmp.w	r8, #1
 8007af6:	f200 809f 	bhi.w	8007c38 <setvbuf+0x170>
 8007afa:	2d00      	cmp	r5, #0
 8007afc:	f2c0 809c 	blt.w	8007c38 <setvbuf+0x170>
 8007b00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b02:	07db      	lsls	r3, r3, #31
 8007b04:	d405      	bmi.n	8007b12 <setvbuf+0x4a>
 8007b06:	89a3      	ldrh	r3, [r4, #12]
 8007b08:	0598      	lsls	r0, r3, #22
 8007b0a:	d402      	bmi.n	8007b12 <setvbuf+0x4a>
 8007b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b0e:	f002 fb24 	bl	800a15a <__retarget_lock_acquire_recursive>
 8007b12:	4621      	mov	r1, r4
 8007b14:	4638      	mov	r0, r7
 8007b16:	f001 fe7b 	bl	8009810 <_fflush_r>
 8007b1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b1c:	b141      	cbz	r1, 8007b30 <setvbuf+0x68>
 8007b1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b22:	4299      	cmp	r1, r3
 8007b24:	d002      	beq.n	8007b2c <setvbuf+0x64>
 8007b26:	4638      	mov	r0, r7
 8007b28:	f003 f87e 	bl	800ac28 <_free_r>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	6363      	str	r3, [r4, #52]	; 0x34
 8007b30:	2300      	movs	r3, #0
 8007b32:	61a3      	str	r3, [r4, #24]
 8007b34:	6063      	str	r3, [r4, #4]
 8007b36:	89a3      	ldrh	r3, [r4, #12]
 8007b38:	0619      	lsls	r1, r3, #24
 8007b3a:	d503      	bpl.n	8007b44 <setvbuf+0x7c>
 8007b3c:	6921      	ldr	r1, [r4, #16]
 8007b3e:	4638      	mov	r0, r7
 8007b40:	f003 f872 	bl	800ac28 <_free_r>
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007b4a:	f023 0303 	bic.w	r3, r3, #3
 8007b4e:	f1b8 0f02 	cmp.w	r8, #2
 8007b52:	81a3      	strh	r3, [r4, #12]
 8007b54:	d06c      	beq.n	8007c30 <setvbuf+0x168>
 8007b56:	ab01      	add	r3, sp, #4
 8007b58:	466a      	mov	r2, sp
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	4638      	mov	r0, r7
 8007b5e:	f002 fafe 	bl	800a15e <__swhatbuf_r>
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	4318      	orrs	r0, r3
 8007b66:	81a0      	strh	r0, [r4, #12]
 8007b68:	2d00      	cmp	r5, #0
 8007b6a:	d130      	bne.n	8007bce <setvbuf+0x106>
 8007b6c:	9d00      	ldr	r5, [sp, #0]
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f002 fb5a 	bl	800a228 <malloc>
 8007b74:	4606      	mov	r6, r0
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d155      	bne.n	8007c26 <setvbuf+0x15e>
 8007b7a:	f8dd 9000 	ldr.w	r9, [sp]
 8007b7e:	45a9      	cmp	r9, r5
 8007b80:	d14a      	bne.n	8007c18 <setvbuf+0x150>
 8007b82:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007b86:	2200      	movs	r2, #0
 8007b88:	60a2      	str	r2, [r4, #8]
 8007b8a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007b8e:	6022      	str	r2, [r4, #0]
 8007b90:	6122      	str	r2, [r4, #16]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b98:	6162      	str	r2, [r4, #20]
 8007b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b9c:	f043 0302 	orr.w	r3, r3, #2
 8007ba0:	07d2      	lsls	r2, r2, #31
 8007ba2:	81a3      	strh	r3, [r4, #12]
 8007ba4:	d405      	bmi.n	8007bb2 <setvbuf+0xea>
 8007ba6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007baa:	d102      	bne.n	8007bb2 <setvbuf+0xea>
 8007bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bae:	f002 fad5 	bl	800a15c <__retarget_lock_release_recursive>
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	b003      	add	sp, #12
 8007bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bba:	4b24      	ldr	r3, [pc, #144]	; (8007c4c <setvbuf+0x184>)
 8007bbc:	429c      	cmp	r4, r3
 8007bbe:	d101      	bne.n	8007bc4 <setvbuf+0xfc>
 8007bc0:	68bc      	ldr	r4, [r7, #8]
 8007bc2:	e793      	b.n	8007aec <setvbuf+0x24>
 8007bc4:	4b22      	ldr	r3, [pc, #136]	; (8007c50 <setvbuf+0x188>)
 8007bc6:	429c      	cmp	r4, r3
 8007bc8:	bf08      	it	eq
 8007bca:	68fc      	ldreq	r4, [r7, #12]
 8007bcc:	e78e      	b.n	8007aec <setvbuf+0x24>
 8007bce:	2e00      	cmp	r6, #0
 8007bd0:	d0cd      	beq.n	8007b6e <setvbuf+0xa6>
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	b913      	cbnz	r3, 8007bdc <setvbuf+0x114>
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	f001 feae 	bl	8009938 <__sinit>
 8007bdc:	f1b8 0f01 	cmp.w	r8, #1
 8007be0:	bf08      	it	eq
 8007be2:	89a3      	ldrheq	r3, [r4, #12]
 8007be4:	6026      	str	r6, [r4, #0]
 8007be6:	bf04      	itt	eq
 8007be8:	f043 0301 	orreq.w	r3, r3, #1
 8007bec:	81a3      	strheq	r3, [r4, #12]
 8007bee:	89a2      	ldrh	r2, [r4, #12]
 8007bf0:	f012 0308 	ands.w	r3, r2, #8
 8007bf4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007bf8:	d01c      	beq.n	8007c34 <setvbuf+0x16c>
 8007bfa:	07d3      	lsls	r3, r2, #31
 8007bfc:	bf41      	itttt	mi
 8007bfe:	2300      	movmi	r3, #0
 8007c00:	426d      	negmi	r5, r5
 8007c02:	60a3      	strmi	r3, [r4, #8]
 8007c04:	61a5      	strmi	r5, [r4, #24]
 8007c06:	bf58      	it	pl
 8007c08:	60a5      	strpl	r5, [r4, #8]
 8007c0a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007c0c:	f015 0501 	ands.w	r5, r5, #1
 8007c10:	d115      	bne.n	8007c3e <setvbuf+0x176>
 8007c12:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007c16:	e7c8      	b.n	8007baa <setvbuf+0xe2>
 8007c18:	4648      	mov	r0, r9
 8007c1a:	f002 fb05 	bl	800a228 <malloc>
 8007c1e:	4606      	mov	r6, r0
 8007c20:	2800      	cmp	r0, #0
 8007c22:	d0ae      	beq.n	8007b82 <setvbuf+0xba>
 8007c24:	464d      	mov	r5, r9
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2c:	81a3      	strh	r3, [r4, #12]
 8007c2e:	e7d0      	b.n	8007bd2 <setvbuf+0x10a>
 8007c30:	2500      	movs	r5, #0
 8007c32:	e7a8      	b.n	8007b86 <setvbuf+0xbe>
 8007c34:	60a3      	str	r3, [r4, #8]
 8007c36:	e7e8      	b.n	8007c0a <setvbuf+0x142>
 8007c38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007c3c:	e7b9      	b.n	8007bb2 <setvbuf+0xea>
 8007c3e:	2500      	movs	r5, #0
 8007c40:	e7b7      	b.n	8007bb2 <setvbuf+0xea>
 8007c42:	bf00      	nop
 8007c44:	20000014 	.word	0x20000014
 8007c48:	0800be74 	.word	0x0800be74
 8007c4c:	0800be94 	.word	0x0800be94
 8007c50:	0800be54 	.word	0x0800be54

08007c54 <nanf>:
 8007c54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007c5c <nanf+0x8>
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	7fc00000 	.word	0x7fc00000

08007c60 <siprintf>:
 8007c60:	b40e      	push	{r1, r2, r3}
 8007c62:	b500      	push	{lr}
 8007c64:	b09c      	sub	sp, #112	; 0x70
 8007c66:	ab1d      	add	r3, sp, #116	; 0x74
 8007c68:	9002      	str	r0, [sp, #8]
 8007c6a:	9006      	str	r0, [sp, #24]
 8007c6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c70:	4809      	ldr	r0, [pc, #36]	; (8007c98 <siprintf+0x38>)
 8007c72:	9107      	str	r1, [sp, #28]
 8007c74:	9104      	str	r1, [sp, #16]
 8007c76:	4909      	ldr	r1, [pc, #36]	; (8007c9c <siprintf+0x3c>)
 8007c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c7c:	9105      	str	r1, [sp, #20]
 8007c7e:	6800      	ldr	r0, [r0, #0]
 8007c80:	9301      	str	r3, [sp, #4]
 8007c82:	a902      	add	r1, sp, #8
 8007c84:	f003 f90c 	bl	800aea0 <_svfiprintf_r>
 8007c88:	9b02      	ldr	r3, [sp, #8]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	701a      	strb	r2, [r3, #0]
 8007c8e:	b01c      	add	sp, #112	; 0x70
 8007c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c94:	b003      	add	sp, #12
 8007c96:	4770      	bx	lr
 8007c98:	20000014 	.word	0x20000014
 8007c9c:	ffff0208 	.word	0xffff0208

08007ca0 <sulp>:
 8007ca0:	b570      	push	{r4, r5, r6, lr}
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	460d      	mov	r5, r1
 8007ca6:	ec45 4b10 	vmov	d0, r4, r5
 8007caa:	4616      	mov	r6, r2
 8007cac:	f002 fe56 	bl	800a95c <__ulp>
 8007cb0:	ec51 0b10 	vmov	r0, r1, d0
 8007cb4:	b17e      	cbz	r6, 8007cd6 <sulp+0x36>
 8007cb6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007cba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	dd09      	ble.n	8007cd6 <sulp+0x36>
 8007cc2:	051b      	lsls	r3, r3, #20
 8007cc4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007cc8:	2400      	movs	r4, #0
 8007cca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007cce:	4622      	mov	r2, r4
 8007cd0:	462b      	mov	r3, r5
 8007cd2:	f7f8 fc69 	bl	80005a8 <__aeabi_dmul>
 8007cd6:	bd70      	pop	{r4, r5, r6, pc}

08007cd8 <_strtod_l>:
 8007cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cdc:	ed2d 8b02 	vpush	{d8}
 8007ce0:	b09d      	sub	sp, #116	; 0x74
 8007ce2:	461f      	mov	r7, r3
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9318      	str	r3, [sp, #96]	; 0x60
 8007ce8:	4ba2      	ldr	r3, [pc, #648]	; (8007f74 <_strtod_l+0x29c>)
 8007cea:	9213      	str	r2, [sp, #76]	; 0x4c
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	9305      	str	r3, [sp, #20]
 8007cf0:	4604      	mov	r4, r0
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	4688      	mov	r8, r1
 8007cf6:	f7f8 fa43 	bl	8000180 <strlen>
 8007cfa:	f04f 0a00 	mov.w	sl, #0
 8007cfe:	4605      	mov	r5, r0
 8007d00:	f04f 0b00 	mov.w	fp, #0
 8007d04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007d08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d0a:	781a      	ldrb	r2, [r3, #0]
 8007d0c:	2a2b      	cmp	r2, #43	; 0x2b
 8007d0e:	d04e      	beq.n	8007dae <_strtod_l+0xd6>
 8007d10:	d83b      	bhi.n	8007d8a <_strtod_l+0xb2>
 8007d12:	2a0d      	cmp	r2, #13
 8007d14:	d834      	bhi.n	8007d80 <_strtod_l+0xa8>
 8007d16:	2a08      	cmp	r2, #8
 8007d18:	d834      	bhi.n	8007d84 <_strtod_l+0xac>
 8007d1a:	2a00      	cmp	r2, #0
 8007d1c:	d03e      	beq.n	8007d9c <_strtod_l+0xc4>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	930a      	str	r3, [sp, #40]	; 0x28
 8007d22:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007d24:	7833      	ldrb	r3, [r6, #0]
 8007d26:	2b30      	cmp	r3, #48	; 0x30
 8007d28:	f040 80b0 	bne.w	8007e8c <_strtod_l+0x1b4>
 8007d2c:	7873      	ldrb	r3, [r6, #1]
 8007d2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d32:	2b58      	cmp	r3, #88	; 0x58
 8007d34:	d168      	bne.n	8007e08 <_strtod_l+0x130>
 8007d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d38:	9301      	str	r3, [sp, #4]
 8007d3a:	ab18      	add	r3, sp, #96	; 0x60
 8007d3c:	9702      	str	r7, [sp, #8]
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	4a8d      	ldr	r2, [pc, #564]	; (8007f78 <_strtod_l+0x2a0>)
 8007d42:	ab19      	add	r3, sp, #100	; 0x64
 8007d44:	a917      	add	r1, sp, #92	; 0x5c
 8007d46:	4620      	mov	r0, r4
 8007d48:	f001 fefa 	bl	8009b40 <__gethex>
 8007d4c:	f010 0707 	ands.w	r7, r0, #7
 8007d50:	4605      	mov	r5, r0
 8007d52:	d005      	beq.n	8007d60 <_strtod_l+0x88>
 8007d54:	2f06      	cmp	r7, #6
 8007d56:	d12c      	bne.n	8007db2 <_strtod_l+0xda>
 8007d58:	3601      	adds	r6, #1
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	9617      	str	r6, [sp, #92]	; 0x5c
 8007d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f040 8590 	bne.w	8008888 <_strtod_l+0xbb0>
 8007d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d6a:	b1eb      	cbz	r3, 8007da8 <_strtod_l+0xd0>
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d72:	ec43 2b10 	vmov	d0, r2, r3
 8007d76:	b01d      	add	sp, #116	; 0x74
 8007d78:	ecbd 8b02 	vpop	{d8}
 8007d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d80:	2a20      	cmp	r2, #32
 8007d82:	d1cc      	bne.n	8007d1e <_strtod_l+0x46>
 8007d84:	3301      	adds	r3, #1
 8007d86:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d88:	e7be      	b.n	8007d08 <_strtod_l+0x30>
 8007d8a:	2a2d      	cmp	r2, #45	; 0x2d
 8007d8c:	d1c7      	bne.n	8007d1e <_strtod_l+0x46>
 8007d8e:	2201      	movs	r2, #1
 8007d90:	920a      	str	r2, [sp, #40]	; 0x28
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d96:	785b      	ldrb	r3, [r3, #1]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1c2      	bne.n	8007d22 <_strtod_l+0x4a>
 8007d9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d9e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f040 856e 	bne.w	8008884 <_strtod_l+0xbac>
 8007da8:	4652      	mov	r2, sl
 8007daa:	465b      	mov	r3, fp
 8007dac:	e7e1      	b.n	8007d72 <_strtod_l+0x9a>
 8007dae:	2200      	movs	r2, #0
 8007db0:	e7ee      	b.n	8007d90 <_strtod_l+0xb8>
 8007db2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007db4:	b13a      	cbz	r2, 8007dc6 <_strtod_l+0xee>
 8007db6:	2135      	movs	r1, #53	; 0x35
 8007db8:	a81a      	add	r0, sp, #104	; 0x68
 8007dba:	f002 feda 	bl	800ab72 <__copybits>
 8007dbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f002 fa99 	bl	800a2f8 <_Bfree>
 8007dc6:	3f01      	subs	r7, #1
 8007dc8:	2f04      	cmp	r7, #4
 8007dca:	d806      	bhi.n	8007dda <_strtod_l+0x102>
 8007dcc:	e8df f007 	tbb	[pc, r7]
 8007dd0:	1714030a 	.word	0x1714030a
 8007dd4:	0a          	.byte	0x0a
 8007dd5:	00          	.byte	0x00
 8007dd6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007dda:	0728      	lsls	r0, r5, #28
 8007ddc:	d5c0      	bpl.n	8007d60 <_strtod_l+0x88>
 8007dde:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007de2:	e7bd      	b.n	8007d60 <_strtod_l+0x88>
 8007de4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007de8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007dea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007dee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007df2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007df6:	e7f0      	b.n	8007dda <_strtod_l+0x102>
 8007df8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007f7c <_strtod_l+0x2a4>
 8007dfc:	e7ed      	b.n	8007dda <_strtod_l+0x102>
 8007dfe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007e02:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007e06:	e7e8      	b.n	8007dda <_strtod_l+0x102>
 8007e08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e0a:	1c5a      	adds	r2, r3, #1
 8007e0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e0e:	785b      	ldrb	r3, [r3, #1]
 8007e10:	2b30      	cmp	r3, #48	; 0x30
 8007e12:	d0f9      	beq.n	8007e08 <_strtod_l+0x130>
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0a3      	beq.n	8007d60 <_strtod_l+0x88>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	f04f 0900 	mov.w	r9, #0
 8007e1e:	9304      	str	r3, [sp, #16]
 8007e20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e22:	9308      	str	r3, [sp, #32]
 8007e24:	f8cd 901c 	str.w	r9, [sp, #28]
 8007e28:	464f      	mov	r7, r9
 8007e2a:	220a      	movs	r2, #10
 8007e2c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007e2e:	7806      	ldrb	r6, [r0, #0]
 8007e30:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007e34:	b2d9      	uxtb	r1, r3
 8007e36:	2909      	cmp	r1, #9
 8007e38:	d92a      	bls.n	8007e90 <_strtod_l+0x1b8>
 8007e3a:	9905      	ldr	r1, [sp, #20]
 8007e3c:	462a      	mov	r2, r5
 8007e3e:	f003 fae6 	bl	800b40e <strncmp>
 8007e42:	b398      	cbz	r0, 8007eac <_strtod_l+0x1d4>
 8007e44:	2000      	movs	r0, #0
 8007e46:	4632      	mov	r2, r6
 8007e48:	463d      	mov	r5, r7
 8007e4a:	9005      	str	r0, [sp, #20]
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2a65      	cmp	r2, #101	; 0x65
 8007e50:	d001      	beq.n	8007e56 <_strtod_l+0x17e>
 8007e52:	2a45      	cmp	r2, #69	; 0x45
 8007e54:	d118      	bne.n	8007e88 <_strtod_l+0x1b0>
 8007e56:	b91d      	cbnz	r5, 8007e60 <_strtod_l+0x188>
 8007e58:	9a04      	ldr	r2, [sp, #16]
 8007e5a:	4302      	orrs	r2, r0
 8007e5c:	d09e      	beq.n	8007d9c <_strtod_l+0xc4>
 8007e5e:	2500      	movs	r5, #0
 8007e60:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007e64:	f108 0201 	add.w	r2, r8, #1
 8007e68:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e6a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007e6e:	2a2b      	cmp	r2, #43	; 0x2b
 8007e70:	d075      	beq.n	8007f5e <_strtod_l+0x286>
 8007e72:	2a2d      	cmp	r2, #45	; 0x2d
 8007e74:	d07b      	beq.n	8007f6e <_strtod_l+0x296>
 8007e76:	f04f 0c00 	mov.w	ip, #0
 8007e7a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007e7e:	2909      	cmp	r1, #9
 8007e80:	f240 8082 	bls.w	8007f88 <_strtod_l+0x2b0>
 8007e84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007e88:	2600      	movs	r6, #0
 8007e8a:	e09d      	b.n	8007fc8 <_strtod_l+0x2f0>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	e7c4      	b.n	8007e1a <_strtod_l+0x142>
 8007e90:	2f08      	cmp	r7, #8
 8007e92:	bfd8      	it	le
 8007e94:	9907      	ldrle	r1, [sp, #28]
 8007e96:	f100 0001 	add.w	r0, r0, #1
 8007e9a:	bfda      	itte	le
 8007e9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ea0:	9307      	strle	r3, [sp, #28]
 8007ea2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007ea6:	3701      	adds	r7, #1
 8007ea8:	9017      	str	r0, [sp, #92]	; 0x5c
 8007eaa:	e7bf      	b.n	8007e2c <_strtod_l+0x154>
 8007eac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007eae:	195a      	adds	r2, r3, r5
 8007eb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8007eb2:	5d5a      	ldrb	r2, [r3, r5]
 8007eb4:	2f00      	cmp	r7, #0
 8007eb6:	d037      	beq.n	8007f28 <_strtod_l+0x250>
 8007eb8:	9005      	str	r0, [sp, #20]
 8007eba:	463d      	mov	r5, r7
 8007ebc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007ec0:	2b09      	cmp	r3, #9
 8007ec2:	d912      	bls.n	8007eea <_strtod_l+0x212>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e7c2      	b.n	8007e4e <_strtod_l+0x176>
 8007ec8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ece:	785a      	ldrb	r2, [r3, #1]
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	2a30      	cmp	r2, #48	; 0x30
 8007ed4:	d0f8      	beq.n	8007ec8 <_strtod_l+0x1f0>
 8007ed6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007eda:	2b08      	cmp	r3, #8
 8007edc:	f200 84d9 	bhi.w	8008892 <_strtod_l+0xbba>
 8007ee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ee2:	9005      	str	r0, [sp, #20]
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	9308      	str	r3, [sp, #32]
 8007ee8:	4605      	mov	r5, r0
 8007eea:	3a30      	subs	r2, #48	; 0x30
 8007eec:	f100 0301 	add.w	r3, r0, #1
 8007ef0:	d014      	beq.n	8007f1c <_strtod_l+0x244>
 8007ef2:	9905      	ldr	r1, [sp, #20]
 8007ef4:	4419      	add	r1, r3
 8007ef6:	9105      	str	r1, [sp, #20]
 8007ef8:	462b      	mov	r3, r5
 8007efa:	eb00 0e05 	add.w	lr, r0, r5
 8007efe:	210a      	movs	r1, #10
 8007f00:	4573      	cmp	r3, lr
 8007f02:	d113      	bne.n	8007f2c <_strtod_l+0x254>
 8007f04:	182b      	adds	r3, r5, r0
 8007f06:	2b08      	cmp	r3, #8
 8007f08:	f105 0501 	add.w	r5, r5, #1
 8007f0c:	4405      	add	r5, r0
 8007f0e:	dc1c      	bgt.n	8007f4a <_strtod_l+0x272>
 8007f10:	9907      	ldr	r1, [sp, #28]
 8007f12:	230a      	movs	r3, #10
 8007f14:	fb03 2301 	mla	r3, r3, r1, r2
 8007f18:	9307      	str	r3, [sp, #28]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f1e:	1c51      	adds	r1, r2, #1
 8007f20:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f22:	7852      	ldrb	r2, [r2, #1]
 8007f24:	4618      	mov	r0, r3
 8007f26:	e7c9      	b.n	8007ebc <_strtod_l+0x1e4>
 8007f28:	4638      	mov	r0, r7
 8007f2a:	e7d2      	b.n	8007ed2 <_strtod_l+0x1fa>
 8007f2c:	2b08      	cmp	r3, #8
 8007f2e:	dc04      	bgt.n	8007f3a <_strtod_l+0x262>
 8007f30:	9e07      	ldr	r6, [sp, #28]
 8007f32:	434e      	muls	r6, r1
 8007f34:	9607      	str	r6, [sp, #28]
 8007f36:	3301      	adds	r3, #1
 8007f38:	e7e2      	b.n	8007f00 <_strtod_l+0x228>
 8007f3a:	f103 0c01 	add.w	ip, r3, #1
 8007f3e:	f1bc 0f10 	cmp.w	ip, #16
 8007f42:	bfd8      	it	le
 8007f44:	fb01 f909 	mulle.w	r9, r1, r9
 8007f48:	e7f5      	b.n	8007f36 <_strtod_l+0x25e>
 8007f4a:	2d10      	cmp	r5, #16
 8007f4c:	bfdc      	itt	le
 8007f4e:	230a      	movle	r3, #10
 8007f50:	fb03 2909 	mlale	r9, r3, r9, r2
 8007f54:	e7e1      	b.n	8007f1a <_strtod_l+0x242>
 8007f56:	2300      	movs	r3, #0
 8007f58:	9305      	str	r3, [sp, #20]
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e77c      	b.n	8007e58 <_strtod_l+0x180>
 8007f5e:	f04f 0c00 	mov.w	ip, #0
 8007f62:	f108 0202 	add.w	r2, r8, #2
 8007f66:	9217      	str	r2, [sp, #92]	; 0x5c
 8007f68:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007f6c:	e785      	b.n	8007e7a <_strtod_l+0x1a2>
 8007f6e:	f04f 0c01 	mov.w	ip, #1
 8007f72:	e7f6      	b.n	8007f62 <_strtod_l+0x28a>
 8007f74:	0800bf1c 	.word	0x0800bf1c
 8007f78:	0800bc6c 	.word	0x0800bc6c
 8007f7c:	7ff00000 	.word	0x7ff00000
 8007f80:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f82:	1c51      	adds	r1, r2, #1
 8007f84:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f86:	7852      	ldrb	r2, [r2, #1]
 8007f88:	2a30      	cmp	r2, #48	; 0x30
 8007f8a:	d0f9      	beq.n	8007f80 <_strtod_l+0x2a8>
 8007f8c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007f90:	2908      	cmp	r1, #8
 8007f92:	f63f af79 	bhi.w	8007e88 <_strtod_l+0x1b0>
 8007f96:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007f9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f9c:	9206      	str	r2, [sp, #24]
 8007f9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007fa0:	1c51      	adds	r1, r2, #1
 8007fa2:	9117      	str	r1, [sp, #92]	; 0x5c
 8007fa4:	7852      	ldrb	r2, [r2, #1]
 8007fa6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007faa:	2e09      	cmp	r6, #9
 8007fac:	d937      	bls.n	800801e <_strtod_l+0x346>
 8007fae:	9e06      	ldr	r6, [sp, #24]
 8007fb0:	1b89      	subs	r1, r1, r6
 8007fb2:	2908      	cmp	r1, #8
 8007fb4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007fb8:	dc02      	bgt.n	8007fc0 <_strtod_l+0x2e8>
 8007fba:	4576      	cmp	r6, lr
 8007fbc:	bfa8      	it	ge
 8007fbe:	4676      	movge	r6, lr
 8007fc0:	f1bc 0f00 	cmp.w	ip, #0
 8007fc4:	d000      	beq.n	8007fc8 <_strtod_l+0x2f0>
 8007fc6:	4276      	negs	r6, r6
 8007fc8:	2d00      	cmp	r5, #0
 8007fca:	d14d      	bne.n	8008068 <_strtod_l+0x390>
 8007fcc:	9904      	ldr	r1, [sp, #16]
 8007fce:	4301      	orrs	r1, r0
 8007fd0:	f47f aec6 	bne.w	8007d60 <_strtod_l+0x88>
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f47f aee1 	bne.w	8007d9c <_strtod_l+0xc4>
 8007fda:	2a69      	cmp	r2, #105	; 0x69
 8007fdc:	d027      	beq.n	800802e <_strtod_l+0x356>
 8007fde:	dc24      	bgt.n	800802a <_strtod_l+0x352>
 8007fe0:	2a49      	cmp	r2, #73	; 0x49
 8007fe2:	d024      	beq.n	800802e <_strtod_l+0x356>
 8007fe4:	2a4e      	cmp	r2, #78	; 0x4e
 8007fe6:	f47f aed9 	bne.w	8007d9c <_strtod_l+0xc4>
 8007fea:	499f      	ldr	r1, [pc, #636]	; (8008268 <_strtod_l+0x590>)
 8007fec:	a817      	add	r0, sp, #92	; 0x5c
 8007fee:	f001 ffff 	bl	8009ff0 <__match>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	f43f aed2 	beq.w	8007d9c <_strtod_l+0xc4>
 8007ff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	2b28      	cmp	r3, #40	; 0x28
 8007ffe:	d12d      	bne.n	800805c <_strtod_l+0x384>
 8008000:	499a      	ldr	r1, [pc, #616]	; (800826c <_strtod_l+0x594>)
 8008002:	aa1a      	add	r2, sp, #104	; 0x68
 8008004:	a817      	add	r0, sp, #92	; 0x5c
 8008006:	f002 f807 	bl	800a018 <__hexnan>
 800800a:	2805      	cmp	r0, #5
 800800c:	d126      	bne.n	800805c <_strtod_l+0x384>
 800800e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008010:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008014:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008018:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800801c:	e6a0      	b.n	8007d60 <_strtod_l+0x88>
 800801e:	210a      	movs	r1, #10
 8008020:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008024:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008028:	e7b9      	b.n	8007f9e <_strtod_l+0x2c6>
 800802a:	2a6e      	cmp	r2, #110	; 0x6e
 800802c:	e7db      	b.n	8007fe6 <_strtod_l+0x30e>
 800802e:	4990      	ldr	r1, [pc, #576]	; (8008270 <_strtod_l+0x598>)
 8008030:	a817      	add	r0, sp, #92	; 0x5c
 8008032:	f001 ffdd 	bl	8009ff0 <__match>
 8008036:	2800      	cmp	r0, #0
 8008038:	f43f aeb0 	beq.w	8007d9c <_strtod_l+0xc4>
 800803c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800803e:	498d      	ldr	r1, [pc, #564]	; (8008274 <_strtod_l+0x59c>)
 8008040:	3b01      	subs	r3, #1
 8008042:	a817      	add	r0, sp, #92	; 0x5c
 8008044:	9317      	str	r3, [sp, #92]	; 0x5c
 8008046:	f001 ffd3 	bl	8009ff0 <__match>
 800804a:	b910      	cbnz	r0, 8008052 <_strtod_l+0x37a>
 800804c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800804e:	3301      	adds	r3, #1
 8008050:	9317      	str	r3, [sp, #92]	; 0x5c
 8008052:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008284 <_strtod_l+0x5ac>
 8008056:	f04f 0a00 	mov.w	sl, #0
 800805a:	e681      	b.n	8007d60 <_strtod_l+0x88>
 800805c:	4886      	ldr	r0, [pc, #536]	; (8008278 <_strtod_l+0x5a0>)
 800805e:	f003 f97b 	bl	800b358 <nan>
 8008062:	ec5b ab10 	vmov	sl, fp, d0
 8008066:	e67b      	b.n	8007d60 <_strtod_l+0x88>
 8008068:	9b05      	ldr	r3, [sp, #20]
 800806a:	9807      	ldr	r0, [sp, #28]
 800806c:	1af3      	subs	r3, r6, r3
 800806e:	2f00      	cmp	r7, #0
 8008070:	bf08      	it	eq
 8008072:	462f      	moveq	r7, r5
 8008074:	2d10      	cmp	r5, #16
 8008076:	9306      	str	r3, [sp, #24]
 8008078:	46a8      	mov	r8, r5
 800807a:	bfa8      	it	ge
 800807c:	f04f 0810 	movge.w	r8, #16
 8008080:	f7f8 fa18 	bl	80004b4 <__aeabi_ui2d>
 8008084:	2d09      	cmp	r5, #9
 8008086:	4682      	mov	sl, r0
 8008088:	468b      	mov	fp, r1
 800808a:	dd13      	ble.n	80080b4 <_strtod_l+0x3dc>
 800808c:	4b7b      	ldr	r3, [pc, #492]	; (800827c <_strtod_l+0x5a4>)
 800808e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008092:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008096:	f7f8 fa87 	bl	80005a8 <__aeabi_dmul>
 800809a:	4682      	mov	sl, r0
 800809c:	4648      	mov	r0, r9
 800809e:	468b      	mov	fp, r1
 80080a0:	f7f8 fa08 	bl	80004b4 <__aeabi_ui2d>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4650      	mov	r0, sl
 80080aa:	4659      	mov	r1, fp
 80080ac:	f7f8 f8c6 	bl	800023c <__adddf3>
 80080b0:	4682      	mov	sl, r0
 80080b2:	468b      	mov	fp, r1
 80080b4:	2d0f      	cmp	r5, #15
 80080b6:	dc38      	bgt.n	800812a <_strtod_l+0x452>
 80080b8:	9b06      	ldr	r3, [sp, #24]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f43f ae50 	beq.w	8007d60 <_strtod_l+0x88>
 80080c0:	dd24      	ble.n	800810c <_strtod_l+0x434>
 80080c2:	2b16      	cmp	r3, #22
 80080c4:	dc0b      	bgt.n	80080de <_strtod_l+0x406>
 80080c6:	496d      	ldr	r1, [pc, #436]	; (800827c <_strtod_l+0x5a4>)
 80080c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080d0:	4652      	mov	r2, sl
 80080d2:	465b      	mov	r3, fp
 80080d4:	f7f8 fa68 	bl	80005a8 <__aeabi_dmul>
 80080d8:	4682      	mov	sl, r0
 80080da:	468b      	mov	fp, r1
 80080dc:	e640      	b.n	8007d60 <_strtod_l+0x88>
 80080de:	9a06      	ldr	r2, [sp, #24]
 80080e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80080e4:	4293      	cmp	r3, r2
 80080e6:	db20      	blt.n	800812a <_strtod_l+0x452>
 80080e8:	4c64      	ldr	r4, [pc, #400]	; (800827c <_strtod_l+0x5a4>)
 80080ea:	f1c5 050f 	rsb	r5, r5, #15
 80080ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80080f2:	4652      	mov	r2, sl
 80080f4:	465b      	mov	r3, fp
 80080f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080fa:	f7f8 fa55 	bl	80005a8 <__aeabi_dmul>
 80080fe:	9b06      	ldr	r3, [sp, #24]
 8008100:	1b5d      	subs	r5, r3, r5
 8008102:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008106:	e9d4 2300 	ldrd	r2, r3, [r4]
 800810a:	e7e3      	b.n	80080d4 <_strtod_l+0x3fc>
 800810c:	9b06      	ldr	r3, [sp, #24]
 800810e:	3316      	adds	r3, #22
 8008110:	db0b      	blt.n	800812a <_strtod_l+0x452>
 8008112:	9b05      	ldr	r3, [sp, #20]
 8008114:	1b9e      	subs	r6, r3, r6
 8008116:	4b59      	ldr	r3, [pc, #356]	; (800827c <_strtod_l+0x5a4>)
 8008118:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800811c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008120:	4650      	mov	r0, sl
 8008122:	4659      	mov	r1, fp
 8008124:	f7f8 fb6a 	bl	80007fc <__aeabi_ddiv>
 8008128:	e7d6      	b.n	80080d8 <_strtod_l+0x400>
 800812a:	9b06      	ldr	r3, [sp, #24]
 800812c:	eba5 0808 	sub.w	r8, r5, r8
 8008130:	4498      	add	r8, r3
 8008132:	f1b8 0f00 	cmp.w	r8, #0
 8008136:	dd74      	ble.n	8008222 <_strtod_l+0x54a>
 8008138:	f018 030f 	ands.w	r3, r8, #15
 800813c:	d00a      	beq.n	8008154 <_strtod_l+0x47c>
 800813e:	494f      	ldr	r1, [pc, #316]	; (800827c <_strtod_l+0x5a4>)
 8008140:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008144:	4652      	mov	r2, sl
 8008146:	465b      	mov	r3, fp
 8008148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800814c:	f7f8 fa2c 	bl	80005a8 <__aeabi_dmul>
 8008150:	4682      	mov	sl, r0
 8008152:	468b      	mov	fp, r1
 8008154:	f038 080f 	bics.w	r8, r8, #15
 8008158:	d04f      	beq.n	80081fa <_strtod_l+0x522>
 800815a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800815e:	dd22      	ble.n	80081a6 <_strtod_l+0x4ce>
 8008160:	2500      	movs	r5, #0
 8008162:	462e      	mov	r6, r5
 8008164:	9507      	str	r5, [sp, #28]
 8008166:	9505      	str	r5, [sp, #20]
 8008168:	2322      	movs	r3, #34	; 0x22
 800816a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008284 <_strtod_l+0x5ac>
 800816e:	6023      	str	r3, [r4, #0]
 8008170:	f04f 0a00 	mov.w	sl, #0
 8008174:	9b07      	ldr	r3, [sp, #28]
 8008176:	2b00      	cmp	r3, #0
 8008178:	f43f adf2 	beq.w	8007d60 <_strtod_l+0x88>
 800817c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800817e:	4620      	mov	r0, r4
 8008180:	f002 f8ba 	bl	800a2f8 <_Bfree>
 8008184:	9905      	ldr	r1, [sp, #20]
 8008186:	4620      	mov	r0, r4
 8008188:	f002 f8b6 	bl	800a2f8 <_Bfree>
 800818c:	4631      	mov	r1, r6
 800818e:	4620      	mov	r0, r4
 8008190:	f002 f8b2 	bl	800a2f8 <_Bfree>
 8008194:	9907      	ldr	r1, [sp, #28]
 8008196:	4620      	mov	r0, r4
 8008198:	f002 f8ae 	bl	800a2f8 <_Bfree>
 800819c:	4629      	mov	r1, r5
 800819e:	4620      	mov	r0, r4
 80081a0:	f002 f8aa 	bl	800a2f8 <_Bfree>
 80081a4:	e5dc      	b.n	8007d60 <_strtod_l+0x88>
 80081a6:	4b36      	ldr	r3, [pc, #216]	; (8008280 <_strtod_l+0x5a8>)
 80081a8:	9304      	str	r3, [sp, #16]
 80081aa:	2300      	movs	r3, #0
 80081ac:	ea4f 1828 	mov.w	r8, r8, asr #4
 80081b0:	4650      	mov	r0, sl
 80081b2:	4659      	mov	r1, fp
 80081b4:	4699      	mov	r9, r3
 80081b6:	f1b8 0f01 	cmp.w	r8, #1
 80081ba:	dc21      	bgt.n	8008200 <_strtod_l+0x528>
 80081bc:	b10b      	cbz	r3, 80081c2 <_strtod_l+0x4ea>
 80081be:	4682      	mov	sl, r0
 80081c0:	468b      	mov	fp, r1
 80081c2:	4b2f      	ldr	r3, [pc, #188]	; (8008280 <_strtod_l+0x5a8>)
 80081c4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80081c8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80081cc:	4652      	mov	r2, sl
 80081ce:	465b      	mov	r3, fp
 80081d0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80081d4:	f7f8 f9e8 	bl	80005a8 <__aeabi_dmul>
 80081d8:	4b2a      	ldr	r3, [pc, #168]	; (8008284 <_strtod_l+0x5ac>)
 80081da:	460a      	mov	r2, r1
 80081dc:	400b      	ands	r3, r1
 80081de:	492a      	ldr	r1, [pc, #168]	; (8008288 <_strtod_l+0x5b0>)
 80081e0:	428b      	cmp	r3, r1
 80081e2:	4682      	mov	sl, r0
 80081e4:	d8bc      	bhi.n	8008160 <_strtod_l+0x488>
 80081e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80081ea:	428b      	cmp	r3, r1
 80081ec:	bf86      	itte	hi
 80081ee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800828c <_strtod_l+0x5b4>
 80081f2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80081f6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80081fa:	2300      	movs	r3, #0
 80081fc:	9304      	str	r3, [sp, #16]
 80081fe:	e084      	b.n	800830a <_strtod_l+0x632>
 8008200:	f018 0f01 	tst.w	r8, #1
 8008204:	d005      	beq.n	8008212 <_strtod_l+0x53a>
 8008206:	9b04      	ldr	r3, [sp, #16]
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f7f8 f9cc 	bl	80005a8 <__aeabi_dmul>
 8008210:	2301      	movs	r3, #1
 8008212:	9a04      	ldr	r2, [sp, #16]
 8008214:	3208      	adds	r2, #8
 8008216:	f109 0901 	add.w	r9, r9, #1
 800821a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800821e:	9204      	str	r2, [sp, #16]
 8008220:	e7c9      	b.n	80081b6 <_strtod_l+0x4de>
 8008222:	d0ea      	beq.n	80081fa <_strtod_l+0x522>
 8008224:	f1c8 0800 	rsb	r8, r8, #0
 8008228:	f018 020f 	ands.w	r2, r8, #15
 800822c:	d00a      	beq.n	8008244 <_strtod_l+0x56c>
 800822e:	4b13      	ldr	r3, [pc, #76]	; (800827c <_strtod_l+0x5a4>)
 8008230:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008234:	4650      	mov	r0, sl
 8008236:	4659      	mov	r1, fp
 8008238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823c:	f7f8 fade 	bl	80007fc <__aeabi_ddiv>
 8008240:	4682      	mov	sl, r0
 8008242:	468b      	mov	fp, r1
 8008244:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008248:	d0d7      	beq.n	80081fa <_strtod_l+0x522>
 800824a:	f1b8 0f1f 	cmp.w	r8, #31
 800824e:	dd1f      	ble.n	8008290 <_strtod_l+0x5b8>
 8008250:	2500      	movs	r5, #0
 8008252:	462e      	mov	r6, r5
 8008254:	9507      	str	r5, [sp, #28]
 8008256:	9505      	str	r5, [sp, #20]
 8008258:	2322      	movs	r3, #34	; 0x22
 800825a:	f04f 0a00 	mov.w	sl, #0
 800825e:	f04f 0b00 	mov.w	fp, #0
 8008262:	6023      	str	r3, [r4, #0]
 8008264:	e786      	b.n	8008174 <_strtod_l+0x49c>
 8008266:	bf00      	nop
 8008268:	0800bc3d 	.word	0x0800bc3d
 800826c:	0800bc80 	.word	0x0800bc80
 8008270:	0800bc35 	.word	0x0800bc35
 8008274:	0800bdc4 	.word	0x0800bdc4
 8008278:	0800c0d8 	.word	0x0800c0d8
 800827c:	0800bfb8 	.word	0x0800bfb8
 8008280:	0800bf90 	.word	0x0800bf90
 8008284:	7ff00000 	.word	0x7ff00000
 8008288:	7ca00000 	.word	0x7ca00000
 800828c:	7fefffff 	.word	0x7fefffff
 8008290:	f018 0310 	ands.w	r3, r8, #16
 8008294:	bf18      	it	ne
 8008296:	236a      	movne	r3, #106	; 0x6a
 8008298:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008648 <_strtod_l+0x970>
 800829c:	9304      	str	r3, [sp, #16]
 800829e:	4650      	mov	r0, sl
 80082a0:	4659      	mov	r1, fp
 80082a2:	2300      	movs	r3, #0
 80082a4:	f018 0f01 	tst.w	r8, #1
 80082a8:	d004      	beq.n	80082b4 <_strtod_l+0x5dc>
 80082aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80082ae:	f7f8 f97b 	bl	80005a8 <__aeabi_dmul>
 80082b2:	2301      	movs	r3, #1
 80082b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80082b8:	f109 0908 	add.w	r9, r9, #8
 80082bc:	d1f2      	bne.n	80082a4 <_strtod_l+0x5cc>
 80082be:	b10b      	cbz	r3, 80082c4 <_strtod_l+0x5ec>
 80082c0:	4682      	mov	sl, r0
 80082c2:	468b      	mov	fp, r1
 80082c4:	9b04      	ldr	r3, [sp, #16]
 80082c6:	b1c3      	cbz	r3, 80082fa <_strtod_l+0x622>
 80082c8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80082cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	4659      	mov	r1, fp
 80082d4:	dd11      	ble.n	80082fa <_strtod_l+0x622>
 80082d6:	2b1f      	cmp	r3, #31
 80082d8:	f340 8124 	ble.w	8008524 <_strtod_l+0x84c>
 80082dc:	2b34      	cmp	r3, #52	; 0x34
 80082de:	bfde      	ittt	le
 80082e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80082e4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80082e8:	fa03 f202 	lslle.w	r2, r3, r2
 80082ec:	f04f 0a00 	mov.w	sl, #0
 80082f0:	bfcc      	ite	gt
 80082f2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80082f6:	ea02 0b01 	andle.w	fp, r2, r1
 80082fa:	2200      	movs	r2, #0
 80082fc:	2300      	movs	r3, #0
 80082fe:	4650      	mov	r0, sl
 8008300:	4659      	mov	r1, fp
 8008302:	f7f8 fbb9 	bl	8000a78 <__aeabi_dcmpeq>
 8008306:	2800      	cmp	r0, #0
 8008308:	d1a2      	bne.n	8008250 <_strtod_l+0x578>
 800830a:	9b07      	ldr	r3, [sp, #28]
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	9908      	ldr	r1, [sp, #32]
 8008310:	462b      	mov	r3, r5
 8008312:	463a      	mov	r2, r7
 8008314:	4620      	mov	r0, r4
 8008316:	f002 f857 	bl	800a3c8 <__s2b>
 800831a:	9007      	str	r0, [sp, #28]
 800831c:	2800      	cmp	r0, #0
 800831e:	f43f af1f 	beq.w	8008160 <_strtod_l+0x488>
 8008322:	9b05      	ldr	r3, [sp, #20]
 8008324:	1b9e      	subs	r6, r3, r6
 8008326:	9b06      	ldr	r3, [sp, #24]
 8008328:	2b00      	cmp	r3, #0
 800832a:	bfb4      	ite	lt
 800832c:	4633      	movlt	r3, r6
 800832e:	2300      	movge	r3, #0
 8008330:	930c      	str	r3, [sp, #48]	; 0x30
 8008332:	9b06      	ldr	r3, [sp, #24]
 8008334:	2500      	movs	r5, #0
 8008336:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800833a:	9312      	str	r3, [sp, #72]	; 0x48
 800833c:	462e      	mov	r6, r5
 800833e:	9b07      	ldr	r3, [sp, #28]
 8008340:	4620      	mov	r0, r4
 8008342:	6859      	ldr	r1, [r3, #4]
 8008344:	f001 ff98 	bl	800a278 <_Balloc>
 8008348:	9005      	str	r0, [sp, #20]
 800834a:	2800      	cmp	r0, #0
 800834c:	f43f af0c 	beq.w	8008168 <_strtod_l+0x490>
 8008350:	9b07      	ldr	r3, [sp, #28]
 8008352:	691a      	ldr	r2, [r3, #16]
 8008354:	3202      	adds	r2, #2
 8008356:	f103 010c 	add.w	r1, r3, #12
 800835a:	0092      	lsls	r2, r2, #2
 800835c:	300c      	adds	r0, #12
 800835e:	f001 ff7d 	bl	800a25c <memcpy>
 8008362:	ec4b ab10 	vmov	d0, sl, fp
 8008366:	aa1a      	add	r2, sp, #104	; 0x68
 8008368:	a919      	add	r1, sp, #100	; 0x64
 800836a:	4620      	mov	r0, r4
 800836c:	f002 fb72 	bl	800aa54 <__d2b>
 8008370:	ec4b ab18 	vmov	d8, sl, fp
 8008374:	9018      	str	r0, [sp, #96]	; 0x60
 8008376:	2800      	cmp	r0, #0
 8008378:	f43f aef6 	beq.w	8008168 <_strtod_l+0x490>
 800837c:	2101      	movs	r1, #1
 800837e:	4620      	mov	r0, r4
 8008380:	f002 f8bc 	bl	800a4fc <__i2b>
 8008384:	4606      	mov	r6, r0
 8008386:	2800      	cmp	r0, #0
 8008388:	f43f aeee 	beq.w	8008168 <_strtod_l+0x490>
 800838c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800838e:	9904      	ldr	r1, [sp, #16]
 8008390:	2b00      	cmp	r3, #0
 8008392:	bfab      	itete	ge
 8008394:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008396:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008398:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800839a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800839e:	bfac      	ite	ge
 80083a0:	eb03 0902 	addge.w	r9, r3, r2
 80083a4:	1ad7      	sublt	r7, r2, r3
 80083a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80083a8:	eba3 0801 	sub.w	r8, r3, r1
 80083ac:	4490      	add	r8, r2
 80083ae:	4ba1      	ldr	r3, [pc, #644]	; (8008634 <_strtod_l+0x95c>)
 80083b0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80083b4:	4598      	cmp	r8, r3
 80083b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80083ba:	f280 80c7 	bge.w	800854c <_strtod_l+0x874>
 80083be:	eba3 0308 	sub.w	r3, r3, r8
 80083c2:	2b1f      	cmp	r3, #31
 80083c4:	eba2 0203 	sub.w	r2, r2, r3
 80083c8:	f04f 0101 	mov.w	r1, #1
 80083cc:	f300 80b1 	bgt.w	8008532 <_strtod_l+0x85a>
 80083d0:	fa01 f303 	lsl.w	r3, r1, r3
 80083d4:	930d      	str	r3, [sp, #52]	; 0x34
 80083d6:	2300      	movs	r3, #0
 80083d8:	9308      	str	r3, [sp, #32]
 80083da:	eb09 0802 	add.w	r8, r9, r2
 80083de:	9b04      	ldr	r3, [sp, #16]
 80083e0:	45c1      	cmp	r9, r8
 80083e2:	4417      	add	r7, r2
 80083e4:	441f      	add	r7, r3
 80083e6:	464b      	mov	r3, r9
 80083e8:	bfa8      	it	ge
 80083ea:	4643      	movge	r3, r8
 80083ec:	42bb      	cmp	r3, r7
 80083ee:	bfa8      	it	ge
 80083f0:	463b      	movge	r3, r7
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	bfc2      	ittt	gt
 80083f6:	eba8 0803 	subgt.w	r8, r8, r3
 80083fa:	1aff      	subgt	r7, r7, r3
 80083fc:	eba9 0903 	subgt.w	r9, r9, r3
 8008400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008402:	2b00      	cmp	r3, #0
 8008404:	dd17      	ble.n	8008436 <_strtod_l+0x75e>
 8008406:	4631      	mov	r1, r6
 8008408:	461a      	mov	r2, r3
 800840a:	4620      	mov	r0, r4
 800840c:	f002 f936 	bl	800a67c <__pow5mult>
 8008410:	4606      	mov	r6, r0
 8008412:	2800      	cmp	r0, #0
 8008414:	f43f aea8 	beq.w	8008168 <_strtod_l+0x490>
 8008418:	4601      	mov	r1, r0
 800841a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800841c:	4620      	mov	r0, r4
 800841e:	f002 f883 	bl	800a528 <__multiply>
 8008422:	900b      	str	r0, [sp, #44]	; 0x2c
 8008424:	2800      	cmp	r0, #0
 8008426:	f43f ae9f 	beq.w	8008168 <_strtod_l+0x490>
 800842a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800842c:	4620      	mov	r0, r4
 800842e:	f001 ff63 	bl	800a2f8 <_Bfree>
 8008432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008434:	9318      	str	r3, [sp, #96]	; 0x60
 8008436:	f1b8 0f00 	cmp.w	r8, #0
 800843a:	f300 808c 	bgt.w	8008556 <_strtod_l+0x87e>
 800843e:	9b06      	ldr	r3, [sp, #24]
 8008440:	2b00      	cmp	r3, #0
 8008442:	dd08      	ble.n	8008456 <_strtod_l+0x77e>
 8008444:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008446:	9905      	ldr	r1, [sp, #20]
 8008448:	4620      	mov	r0, r4
 800844a:	f002 f917 	bl	800a67c <__pow5mult>
 800844e:	9005      	str	r0, [sp, #20]
 8008450:	2800      	cmp	r0, #0
 8008452:	f43f ae89 	beq.w	8008168 <_strtod_l+0x490>
 8008456:	2f00      	cmp	r7, #0
 8008458:	dd08      	ble.n	800846c <_strtod_l+0x794>
 800845a:	9905      	ldr	r1, [sp, #20]
 800845c:	463a      	mov	r2, r7
 800845e:	4620      	mov	r0, r4
 8008460:	f002 f966 	bl	800a730 <__lshift>
 8008464:	9005      	str	r0, [sp, #20]
 8008466:	2800      	cmp	r0, #0
 8008468:	f43f ae7e 	beq.w	8008168 <_strtod_l+0x490>
 800846c:	f1b9 0f00 	cmp.w	r9, #0
 8008470:	dd08      	ble.n	8008484 <_strtod_l+0x7ac>
 8008472:	4631      	mov	r1, r6
 8008474:	464a      	mov	r2, r9
 8008476:	4620      	mov	r0, r4
 8008478:	f002 f95a 	bl	800a730 <__lshift>
 800847c:	4606      	mov	r6, r0
 800847e:	2800      	cmp	r0, #0
 8008480:	f43f ae72 	beq.w	8008168 <_strtod_l+0x490>
 8008484:	9a05      	ldr	r2, [sp, #20]
 8008486:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008488:	4620      	mov	r0, r4
 800848a:	f002 f9dd 	bl	800a848 <__mdiff>
 800848e:	4605      	mov	r5, r0
 8008490:	2800      	cmp	r0, #0
 8008492:	f43f ae69 	beq.w	8008168 <_strtod_l+0x490>
 8008496:	68c3      	ldr	r3, [r0, #12]
 8008498:	930b      	str	r3, [sp, #44]	; 0x2c
 800849a:	2300      	movs	r3, #0
 800849c:	60c3      	str	r3, [r0, #12]
 800849e:	4631      	mov	r1, r6
 80084a0:	f002 f9b6 	bl	800a810 <__mcmp>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	da60      	bge.n	800856a <_strtod_l+0x892>
 80084a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084aa:	ea53 030a 	orrs.w	r3, r3, sl
 80084ae:	f040 8082 	bne.w	80085b6 <_strtod_l+0x8de>
 80084b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d17d      	bne.n	80085b6 <_strtod_l+0x8de>
 80084ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80084be:	0d1b      	lsrs	r3, r3, #20
 80084c0:	051b      	lsls	r3, r3, #20
 80084c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80084c6:	d976      	bls.n	80085b6 <_strtod_l+0x8de>
 80084c8:	696b      	ldr	r3, [r5, #20]
 80084ca:	b913      	cbnz	r3, 80084d2 <_strtod_l+0x7fa>
 80084cc:	692b      	ldr	r3, [r5, #16]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	dd71      	ble.n	80085b6 <_strtod_l+0x8de>
 80084d2:	4629      	mov	r1, r5
 80084d4:	2201      	movs	r2, #1
 80084d6:	4620      	mov	r0, r4
 80084d8:	f002 f92a 	bl	800a730 <__lshift>
 80084dc:	4631      	mov	r1, r6
 80084de:	4605      	mov	r5, r0
 80084e0:	f002 f996 	bl	800a810 <__mcmp>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	dd66      	ble.n	80085b6 <_strtod_l+0x8de>
 80084e8:	9904      	ldr	r1, [sp, #16]
 80084ea:	4a53      	ldr	r2, [pc, #332]	; (8008638 <_strtod_l+0x960>)
 80084ec:	465b      	mov	r3, fp
 80084ee:	2900      	cmp	r1, #0
 80084f0:	f000 8081 	beq.w	80085f6 <_strtod_l+0x91e>
 80084f4:	ea02 010b 	and.w	r1, r2, fp
 80084f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80084fc:	dc7b      	bgt.n	80085f6 <_strtod_l+0x91e>
 80084fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008502:	f77f aea9 	ble.w	8008258 <_strtod_l+0x580>
 8008506:	4b4d      	ldr	r3, [pc, #308]	; (800863c <_strtod_l+0x964>)
 8008508:	4650      	mov	r0, sl
 800850a:	4659      	mov	r1, fp
 800850c:	2200      	movs	r2, #0
 800850e:	f7f8 f84b 	bl	80005a8 <__aeabi_dmul>
 8008512:	460b      	mov	r3, r1
 8008514:	4303      	orrs	r3, r0
 8008516:	bf08      	it	eq
 8008518:	2322      	moveq	r3, #34	; 0x22
 800851a:	4682      	mov	sl, r0
 800851c:	468b      	mov	fp, r1
 800851e:	bf08      	it	eq
 8008520:	6023      	streq	r3, [r4, #0]
 8008522:	e62b      	b.n	800817c <_strtod_l+0x4a4>
 8008524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008528:	fa02 f303 	lsl.w	r3, r2, r3
 800852c:	ea03 0a0a 	and.w	sl, r3, sl
 8008530:	e6e3      	b.n	80082fa <_strtod_l+0x622>
 8008532:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008536:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800853a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800853e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008542:	fa01 f308 	lsl.w	r3, r1, r8
 8008546:	9308      	str	r3, [sp, #32]
 8008548:	910d      	str	r1, [sp, #52]	; 0x34
 800854a:	e746      	b.n	80083da <_strtod_l+0x702>
 800854c:	2300      	movs	r3, #0
 800854e:	9308      	str	r3, [sp, #32]
 8008550:	2301      	movs	r3, #1
 8008552:	930d      	str	r3, [sp, #52]	; 0x34
 8008554:	e741      	b.n	80083da <_strtod_l+0x702>
 8008556:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008558:	4642      	mov	r2, r8
 800855a:	4620      	mov	r0, r4
 800855c:	f002 f8e8 	bl	800a730 <__lshift>
 8008560:	9018      	str	r0, [sp, #96]	; 0x60
 8008562:	2800      	cmp	r0, #0
 8008564:	f47f af6b 	bne.w	800843e <_strtod_l+0x766>
 8008568:	e5fe      	b.n	8008168 <_strtod_l+0x490>
 800856a:	465f      	mov	r7, fp
 800856c:	d16e      	bne.n	800864c <_strtod_l+0x974>
 800856e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008570:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008574:	b342      	cbz	r2, 80085c8 <_strtod_l+0x8f0>
 8008576:	4a32      	ldr	r2, [pc, #200]	; (8008640 <_strtod_l+0x968>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d128      	bne.n	80085ce <_strtod_l+0x8f6>
 800857c:	9b04      	ldr	r3, [sp, #16]
 800857e:	4651      	mov	r1, sl
 8008580:	b1eb      	cbz	r3, 80085be <_strtod_l+0x8e6>
 8008582:	4b2d      	ldr	r3, [pc, #180]	; (8008638 <_strtod_l+0x960>)
 8008584:	403b      	ands	r3, r7
 8008586:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800858a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800858e:	d819      	bhi.n	80085c4 <_strtod_l+0x8ec>
 8008590:	0d1b      	lsrs	r3, r3, #20
 8008592:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008596:	fa02 f303 	lsl.w	r3, r2, r3
 800859a:	4299      	cmp	r1, r3
 800859c:	d117      	bne.n	80085ce <_strtod_l+0x8f6>
 800859e:	4b29      	ldr	r3, [pc, #164]	; (8008644 <_strtod_l+0x96c>)
 80085a0:	429f      	cmp	r7, r3
 80085a2:	d102      	bne.n	80085aa <_strtod_l+0x8d2>
 80085a4:	3101      	adds	r1, #1
 80085a6:	f43f addf 	beq.w	8008168 <_strtod_l+0x490>
 80085aa:	4b23      	ldr	r3, [pc, #140]	; (8008638 <_strtod_l+0x960>)
 80085ac:	403b      	ands	r3, r7
 80085ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80085b2:	f04f 0a00 	mov.w	sl, #0
 80085b6:	9b04      	ldr	r3, [sp, #16]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1a4      	bne.n	8008506 <_strtod_l+0x82e>
 80085bc:	e5de      	b.n	800817c <_strtod_l+0x4a4>
 80085be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085c2:	e7ea      	b.n	800859a <_strtod_l+0x8c2>
 80085c4:	4613      	mov	r3, r2
 80085c6:	e7e8      	b.n	800859a <_strtod_l+0x8c2>
 80085c8:	ea53 030a 	orrs.w	r3, r3, sl
 80085cc:	d08c      	beq.n	80084e8 <_strtod_l+0x810>
 80085ce:	9b08      	ldr	r3, [sp, #32]
 80085d0:	b1db      	cbz	r3, 800860a <_strtod_l+0x932>
 80085d2:	423b      	tst	r3, r7
 80085d4:	d0ef      	beq.n	80085b6 <_strtod_l+0x8de>
 80085d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085d8:	9a04      	ldr	r2, [sp, #16]
 80085da:	4650      	mov	r0, sl
 80085dc:	4659      	mov	r1, fp
 80085de:	b1c3      	cbz	r3, 8008612 <_strtod_l+0x93a>
 80085e0:	f7ff fb5e 	bl	8007ca0 <sulp>
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	ec51 0b18 	vmov	r0, r1, d8
 80085ec:	f7f7 fe26 	bl	800023c <__adddf3>
 80085f0:	4682      	mov	sl, r0
 80085f2:	468b      	mov	fp, r1
 80085f4:	e7df      	b.n	80085b6 <_strtod_l+0x8de>
 80085f6:	4013      	ands	r3, r2
 80085f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80085fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008600:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008604:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008608:	e7d5      	b.n	80085b6 <_strtod_l+0x8de>
 800860a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800860c:	ea13 0f0a 	tst.w	r3, sl
 8008610:	e7e0      	b.n	80085d4 <_strtod_l+0x8fc>
 8008612:	f7ff fb45 	bl	8007ca0 <sulp>
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	ec51 0b18 	vmov	r0, r1, d8
 800861e:	f7f7 fe0b 	bl	8000238 <__aeabi_dsub>
 8008622:	2200      	movs	r2, #0
 8008624:	2300      	movs	r3, #0
 8008626:	4682      	mov	sl, r0
 8008628:	468b      	mov	fp, r1
 800862a:	f7f8 fa25 	bl	8000a78 <__aeabi_dcmpeq>
 800862e:	2800      	cmp	r0, #0
 8008630:	d0c1      	beq.n	80085b6 <_strtod_l+0x8de>
 8008632:	e611      	b.n	8008258 <_strtod_l+0x580>
 8008634:	fffffc02 	.word	0xfffffc02
 8008638:	7ff00000 	.word	0x7ff00000
 800863c:	39500000 	.word	0x39500000
 8008640:	000fffff 	.word	0x000fffff
 8008644:	7fefffff 	.word	0x7fefffff
 8008648:	0800bc98 	.word	0x0800bc98
 800864c:	4631      	mov	r1, r6
 800864e:	4628      	mov	r0, r5
 8008650:	f002 fa5c 	bl	800ab0c <__ratio>
 8008654:	ec59 8b10 	vmov	r8, r9, d0
 8008658:	ee10 0a10 	vmov	r0, s0
 800865c:	2200      	movs	r2, #0
 800865e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008662:	4649      	mov	r1, r9
 8008664:	f7f8 fa1c 	bl	8000aa0 <__aeabi_dcmple>
 8008668:	2800      	cmp	r0, #0
 800866a:	d07a      	beq.n	8008762 <_strtod_l+0xa8a>
 800866c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800866e:	2b00      	cmp	r3, #0
 8008670:	d04a      	beq.n	8008708 <_strtod_l+0xa30>
 8008672:	4b95      	ldr	r3, [pc, #596]	; (80088c8 <_strtod_l+0xbf0>)
 8008674:	2200      	movs	r2, #0
 8008676:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800867a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80088c8 <_strtod_l+0xbf0>
 800867e:	f04f 0800 	mov.w	r8, #0
 8008682:	4b92      	ldr	r3, [pc, #584]	; (80088cc <_strtod_l+0xbf4>)
 8008684:	403b      	ands	r3, r7
 8008686:	930d      	str	r3, [sp, #52]	; 0x34
 8008688:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800868a:	4b91      	ldr	r3, [pc, #580]	; (80088d0 <_strtod_l+0xbf8>)
 800868c:	429a      	cmp	r2, r3
 800868e:	f040 80b0 	bne.w	80087f2 <_strtod_l+0xb1a>
 8008692:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008696:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800869a:	ec4b ab10 	vmov	d0, sl, fp
 800869e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086a2:	f002 f95b 	bl	800a95c <__ulp>
 80086a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086aa:	ec53 2b10 	vmov	r2, r3, d0
 80086ae:	f7f7 ff7b 	bl	80005a8 <__aeabi_dmul>
 80086b2:	4652      	mov	r2, sl
 80086b4:	465b      	mov	r3, fp
 80086b6:	f7f7 fdc1 	bl	800023c <__adddf3>
 80086ba:	460b      	mov	r3, r1
 80086bc:	4983      	ldr	r1, [pc, #524]	; (80088cc <_strtod_l+0xbf4>)
 80086be:	4a85      	ldr	r2, [pc, #532]	; (80088d4 <_strtod_l+0xbfc>)
 80086c0:	4019      	ands	r1, r3
 80086c2:	4291      	cmp	r1, r2
 80086c4:	4682      	mov	sl, r0
 80086c6:	d960      	bls.n	800878a <_strtod_l+0xab2>
 80086c8:	ee18 3a90 	vmov	r3, s17
 80086cc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d104      	bne.n	80086de <_strtod_l+0xa06>
 80086d4:	ee18 3a10 	vmov	r3, s16
 80086d8:	3301      	adds	r3, #1
 80086da:	f43f ad45 	beq.w	8008168 <_strtod_l+0x490>
 80086de:	f8df b200 	ldr.w	fp, [pc, #512]	; 80088e0 <_strtod_l+0xc08>
 80086e2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80086e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086e8:	4620      	mov	r0, r4
 80086ea:	f001 fe05 	bl	800a2f8 <_Bfree>
 80086ee:	9905      	ldr	r1, [sp, #20]
 80086f0:	4620      	mov	r0, r4
 80086f2:	f001 fe01 	bl	800a2f8 <_Bfree>
 80086f6:	4631      	mov	r1, r6
 80086f8:	4620      	mov	r0, r4
 80086fa:	f001 fdfd 	bl	800a2f8 <_Bfree>
 80086fe:	4629      	mov	r1, r5
 8008700:	4620      	mov	r0, r4
 8008702:	f001 fdf9 	bl	800a2f8 <_Bfree>
 8008706:	e61a      	b.n	800833e <_strtod_l+0x666>
 8008708:	f1ba 0f00 	cmp.w	sl, #0
 800870c:	d11b      	bne.n	8008746 <_strtod_l+0xa6e>
 800870e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008712:	b9f3      	cbnz	r3, 8008752 <_strtod_l+0xa7a>
 8008714:	4b6c      	ldr	r3, [pc, #432]	; (80088c8 <_strtod_l+0xbf0>)
 8008716:	2200      	movs	r2, #0
 8008718:	4640      	mov	r0, r8
 800871a:	4649      	mov	r1, r9
 800871c:	f7f8 f9b6 	bl	8000a8c <__aeabi_dcmplt>
 8008720:	b9d0      	cbnz	r0, 8008758 <_strtod_l+0xa80>
 8008722:	4640      	mov	r0, r8
 8008724:	4649      	mov	r1, r9
 8008726:	4b6c      	ldr	r3, [pc, #432]	; (80088d8 <_strtod_l+0xc00>)
 8008728:	2200      	movs	r2, #0
 800872a:	f7f7 ff3d 	bl	80005a8 <__aeabi_dmul>
 800872e:	4680      	mov	r8, r0
 8008730:	4689      	mov	r9, r1
 8008732:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008736:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800873a:	9315      	str	r3, [sp, #84]	; 0x54
 800873c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008740:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008744:	e79d      	b.n	8008682 <_strtod_l+0x9aa>
 8008746:	f1ba 0f01 	cmp.w	sl, #1
 800874a:	d102      	bne.n	8008752 <_strtod_l+0xa7a>
 800874c:	2f00      	cmp	r7, #0
 800874e:	f43f ad83 	beq.w	8008258 <_strtod_l+0x580>
 8008752:	4b62      	ldr	r3, [pc, #392]	; (80088dc <_strtod_l+0xc04>)
 8008754:	2200      	movs	r2, #0
 8008756:	e78e      	b.n	8008676 <_strtod_l+0x99e>
 8008758:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80088d8 <_strtod_l+0xc00>
 800875c:	f04f 0800 	mov.w	r8, #0
 8008760:	e7e7      	b.n	8008732 <_strtod_l+0xa5a>
 8008762:	4b5d      	ldr	r3, [pc, #372]	; (80088d8 <_strtod_l+0xc00>)
 8008764:	4640      	mov	r0, r8
 8008766:	4649      	mov	r1, r9
 8008768:	2200      	movs	r2, #0
 800876a:	f7f7 ff1d 	bl	80005a8 <__aeabi_dmul>
 800876e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008770:	4680      	mov	r8, r0
 8008772:	4689      	mov	r9, r1
 8008774:	b933      	cbnz	r3, 8008784 <_strtod_l+0xaac>
 8008776:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800877a:	900e      	str	r0, [sp, #56]	; 0x38
 800877c:	930f      	str	r3, [sp, #60]	; 0x3c
 800877e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008782:	e7dd      	b.n	8008740 <_strtod_l+0xa68>
 8008784:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008788:	e7f9      	b.n	800877e <_strtod_l+0xaa6>
 800878a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800878e:	9b04      	ldr	r3, [sp, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1a8      	bne.n	80086e6 <_strtod_l+0xa0e>
 8008794:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008798:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800879a:	0d1b      	lsrs	r3, r3, #20
 800879c:	051b      	lsls	r3, r3, #20
 800879e:	429a      	cmp	r2, r3
 80087a0:	d1a1      	bne.n	80086e6 <_strtod_l+0xa0e>
 80087a2:	4640      	mov	r0, r8
 80087a4:	4649      	mov	r1, r9
 80087a6:	f7f8 fa5f 	bl	8000c68 <__aeabi_d2lz>
 80087aa:	f7f7 fecf 	bl	800054c <__aeabi_l2d>
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	4640      	mov	r0, r8
 80087b4:	4649      	mov	r1, r9
 80087b6:	f7f7 fd3f 	bl	8000238 <__aeabi_dsub>
 80087ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087c0:	ea43 030a 	orr.w	r3, r3, sl
 80087c4:	4313      	orrs	r3, r2
 80087c6:	4680      	mov	r8, r0
 80087c8:	4689      	mov	r9, r1
 80087ca:	d055      	beq.n	8008878 <_strtod_l+0xba0>
 80087cc:	a336      	add	r3, pc, #216	; (adr r3, 80088a8 <_strtod_l+0xbd0>)
 80087ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d2:	f7f8 f95b 	bl	8000a8c <__aeabi_dcmplt>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	f47f acd0 	bne.w	800817c <_strtod_l+0x4a4>
 80087dc:	a334      	add	r3, pc, #208	; (adr r3, 80088b0 <_strtod_l+0xbd8>)
 80087de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e2:	4640      	mov	r0, r8
 80087e4:	4649      	mov	r1, r9
 80087e6:	f7f8 f96f 	bl	8000ac8 <__aeabi_dcmpgt>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	f43f af7b 	beq.w	80086e6 <_strtod_l+0xa0e>
 80087f0:	e4c4      	b.n	800817c <_strtod_l+0x4a4>
 80087f2:	9b04      	ldr	r3, [sp, #16]
 80087f4:	b333      	cbz	r3, 8008844 <_strtod_l+0xb6c>
 80087f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087f8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80087fc:	d822      	bhi.n	8008844 <_strtod_l+0xb6c>
 80087fe:	a32e      	add	r3, pc, #184	; (adr r3, 80088b8 <_strtod_l+0xbe0>)
 8008800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008804:	4640      	mov	r0, r8
 8008806:	4649      	mov	r1, r9
 8008808:	f7f8 f94a 	bl	8000aa0 <__aeabi_dcmple>
 800880c:	b1a0      	cbz	r0, 8008838 <_strtod_l+0xb60>
 800880e:	4649      	mov	r1, r9
 8008810:	4640      	mov	r0, r8
 8008812:	f7f8 f9a1 	bl	8000b58 <__aeabi_d2uiz>
 8008816:	2801      	cmp	r0, #1
 8008818:	bf38      	it	cc
 800881a:	2001      	movcc	r0, #1
 800881c:	f7f7 fe4a 	bl	80004b4 <__aeabi_ui2d>
 8008820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008822:	4680      	mov	r8, r0
 8008824:	4689      	mov	r9, r1
 8008826:	bb23      	cbnz	r3, 8008872 <_strtod_l+0xb9a>
 8008828:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800882c:	9010      	str	r0, [sp, #64]	; 0x40
 800882e:	9311      	str	r3, [sp, #68]	; 0x44
 8008830:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008834:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800883a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800883c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008840:	1a9b      	subs	r3, r3, r2
 8008842:	9309      	str	r3, [sp, #36]	; 0x24
 8008844:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008848:	eeb0 0a48 	vmov.f32	s0, s16
 800884c:	eef0 0a68 	vmov.f32	s1, s17
 8008850:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008854:	f002 f882 	bl	800a95c <__ulp>
 8008858:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800885c:	ec53 2b10 	vmov	r2, r3, d0
 8008860:	f7f7 fea2 	bl	80005a8 <__aeabi_dmul>
 8008864:	ec53 2b18 	vmov	r2, r3, d8
 8008868:	f7f7 fce8 	bl	800023c <__adddf3>
 800886c:	4682      	mov	sl, r0
 800886e:	468b      	mov	fp, r1
 8008870:	e78d      	b.n	800878e <_strtod_l+0xab6>
 8008872:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008876:	e7db      	b.n	8008830 <_strtod_l+0xb58>
 8008878:	a311      	add	r3, pc, #68	; (adr r3, 80088c0 <_strtod_l+0xbe8>)
 800887a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887e:	f7f8 f905 	bl	8000a8c <__aeabi_dcmplt>
 8008882:	e7b2      	b.n	80087ea <_strtod_l+0xb12>
 8008884:	2300      	movs	r3, #0
 8008886:	930a      	str	r3, [sp, #40]	; 0x28
 8008888:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800888a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800888c:	6013      	str	r3, [r2, #0]
 800888e:	f7ff ba6b 	b.w	8007d68 <_strtod_l+0x90>
 8008892:	2a65      	cmp	r2, #101	; 0x65
 8008894:	f43f ab5f 	beq.w	8007f56 <_strtod_l+0x27e>
 8008898:	2a45      	cmp	r2, #69	; 0x45
 800889a:	f43f ab5c 	beq.w	8007f56 <_strtod_l+0x27e>
 800889e:	2301      	movs	r3, #1
 80088a0:	f7ff bb94 	b.w	8007fcc <_strtod_l+0x2f4>
 80088a4:	f3af 8000 	nop.w
 80088a8:	94a03595 	.word	0x94a03595
 80088ac:	3fdfffff 	.word	0x3fdfffff
 80088b0:	35afe535 	.word	0x35afe535
 80088b4:	3fe00000 	.word	0x3fe00000
 80088b8:	ffc00000 	.word	0xffc00000
 80088bc:	41dfffff 	.word	0x41dfffff
 80088c0:	94a03595 	.word	0x94a03595
 80088c4:	3fcfffff 	.word	0x3fcfffff
 80088c8:	3ff00000 	.word	0x3ff00000
 80088cc:	7ff00000 	.word	0x7ff00000
 80088d0:	7fe00000 	.word	0x7fe00000
 80088d4:	7c9fffff 	.word	0x7c9fffff
 80088d8:	3fe00000 	.word	0x3fe00000
 80088dc:	bff00000 	.word	0xbff00000
 80088e0:	7fefffff 	.word	0x7fefffff

080088e4 <_strtod_r>:
 80088e4:	4b01      	ldr	r3, [pc, #4]	; (80088ec <_strtod_r+0x8>)
 80088e6:	f7ff b9f7 	b.w	8007cd8 <_strtod_l>
 80088ea:	bf00      	nop
 80088ec:	2000007c 	.word	0x2000007c

080088f0 <_strtol_l.constprop.0>:
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f6:	d001      	beq.n	80088fc <_strtol_l.constprop.0+0xc>
 80088f8:	2b24      	cmp	r3, #36	; 0x24
 80088fa:	d906      	bls.n	800890a <_strtol_l.constprop.0+0x1a>
 80088fc:	f7fe fa20 	bl	8006d40 <__errno>
 8008900:	2316      	movs	r3, #22
 8008902:	6003      	str	r3, [r0, #0]
 8008904:	2000      	movs	r0, #0
 8008906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800890a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80089f0 <_strtol_l.constprop.0+0x100>
 800890e:	460d      	mov	r5, r1
 8008910:	462e      	mov	r6, r5
 8008912:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008916:	f814 700c 	ldrb.w	r7, [r4, ip]
 800891a:	f017 0708 	ands.w	r7, r7, #8
 800891e:	d1f7      	bne.n	8008910 <_strtol_l.constprop.0+0x20>
 8008920:	2c2d      	cmp	r4, #45	; 0x2d
 8008922:	d132      	bne.n	800898a <_strtol_l.constprop.0+0x9a>
 8008924:	782c      	ldrb	r4, [r5, #0]
 8008926:	2701      	movs	r7, #1
 8008928:	1cb5      	adds	r5, r6, #2
 800892a:	2b00      	cmp	r3, #0
 800892c:	d05b      	beq.n	80089e6 <_strtol_l.constprop.0+0xf6>
 800892e:	2b10      	cmp	r3, #16
 8008930:	d109      	bne.n	8008946 <_strtol_l.constprop.0+0x56>
 8008932:	2c30      	cmp	r4, #48	; 0x30
 8008934:	d107      	bne.n	8008946 <_strtol_l.constprop.0+0x56>
 8008936:	782c      	ldrb	r4, [r5, #0]
 8008938:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800893c:	2c58      	cmp	r4, #88	; 0x58
 800893e:	d14d      	bne.n	80089dc <_strtol_l.constprop.0+0xec>
 8008940:	786c      	ldrb	r4, [r5, #1]
 8008942:	2310      	movs	r3, #16
 8008944:	3502      	adds	r5, #2
 8008946:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800894a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800894e:	f04f 0c00 	mov.w	ip, #0
 8008952:	fbb8 f9f3 	udiv	r9, r8, r3
 8008956:	4666      	mov	r6, ip
 8008958:	fb03 8a19 	mls	sl, r3, r9, r8
 800895c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008960:	f1be 0f09 	cmp.w	lr, #9
 8008964:	d816      	bhi.n	8008994 <_strtol_l.constprop.0+0xa4>
 8008966:	4674      	mov	r4, lr
 8008968:	42a3      	cmp	r3, r4
 800896a:	dd24      	ble.n	80089b6 <_strtol_l.constprop.0+0xc6>
 800896c:	f1bc 0f00 	cmp.w	ip, #0
 8008970:	db1e      	blt.n	80089b0 <_strtol_l.constprop.0+0xc0>
 8008972:	45b1      	cmp	r9, r6
 8008974:	d31c      	bcc.n	80089b0 <_strtol_l.constprop.0+0xc0>
 8008976:	d101      	bne.n	800897c <_strtol_l.constprop.0+0x8c>
 8008978:	45a2      	cmp	sl, r4
 800897a:	db19      	blt.n	80089b0 <_strtol_l.constprop.0+0xc0>
 800897c:	fb06 4603 	mla	r6, r6, r3, r4
 8008980:	f04f 0c01 	mov.w	ip, #1
 8008984:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008988:	e7e8      	b.n	800895c <_strtol_l.constprop.0+0x6c>
 800898a:	2c2b      	cmp	r4, #43	; 0x2b
 800898c:	bf04      	itt	eq
 800898e:	782c      	ldrbeq	r4, [r5, #0]
 8008990:	1cb5      	addeq	r5, r6, #2
 8008992:	e7ca      	b.n	800892a <_strtol_l.constprop.0+0x3a>
 8008994:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008998:	f1be 0f19 	cmp.w	lr, #25
 800899c:	d801      	bhi.n	80089a2 <_strtol_l.constprop.0+0xb2>
 800899e:	3c37      	subs	r4, #55	; 0x37
 80089a0:	e7e2      	b.n	8008968 <_strtol_l.constprop.0+0x78>
 80089a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80089a6:	f1be 0f19 	cmp.w	lr, #25
 80089aa:	d804      	bhi.n	80089b6 <_strtol_l.constprop.0+0xc6>
 80089ac:	3c57      	subs	r4, #87	; 0x57
 80089ae:	e7db      	b.n	8008968 <_strtol_l.constprop.0+0x78>
 80089b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80089b4:	e7e6      	b.n	8008984 <_strtol_l.constprop.0+0x94>
 80089b6:	f1bc 0f00 	cmp.w	ip, #0
 80089ba:	da05      	bge.n	80089c8 <_strtol_l.constprop.0+0xd8>
 80089bc:	2322      	movs	r3, #34	; 0x22
 80089be:	6003      	str	r3, [r0, #0]
 80089c0:	4646      	mov	r6, r8
 80089c2:	b942      	cbnz	r2, 80089d6 <_strtol_l.constprop.0+0xe6>
 80089c4:	4630      	mov	r0, r6
 80089c6:	e79e      	b.n	8008906 <_strtol_l.constprop.0+0x16>
 80089c8:	b107      	cbz	r7, 80089cc <_strtol_l.constprop.0+0xdc>
 80089ca:	4276      	negs	r6, r6
 80089cc:	2a00      	cmp	r2, #0
 80089ce:	d0f9      	beq.n	80089c4 <_strtol_l.constprop.0+0xd4>
 80089d0:	f1bc 0f00 	cmp.w	ip, #0
 80089d4:	d000      	beq.n	80089d8 <_strtol_l.constprop.0+0xe8>
 80089d6:	1e69      	subs	r1, r5, #1
 80089d8:	6011      	str	r1, [r2, #0]
 80089da:	e7f3      	b.n	80089c4 <_strtol_l.constprop.0+0xd4>
 80089dc:	2430      	movs	r4, #48	; 0x30
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1b1      	bne.n	8008946 <_strtol_l.constprop.0+0x56>
 80089e2:	2308      	movs	r3, #8
 80089e4:	e7af      	b.n	8008946 <_strtol_l.constprop.0+0x56>
 80089e6:	2c30      	cmp	r4, #48	; 0x30
 80089e8:	d0a5      	beq.n	8008936 <_strtol_l.constprop.0+0x46>
 80089ea:	230a      	movs	r3, #10
 80089ec:	e7ab      	b.n	8008946 <_strtol_l.constprop.0+0x56>
 80089ee:	bf00      	nop
 80089f0:	0800bcc1 	.word	0x0800bcc1

080089f4 <_strtol_r>:
 80089f4:	f7ff bf7c 	b.w	80088f0 <_strtol_l.constprop.0>

080089f8 <strtol>:
 80089f8:	4613      	mov	r3, r2
 80089fa:	460a      	mov	r2, r1
 80089fc:	4601      	mov	r1, r0
 80089fe:	4802      	ldr	r0, [pc, #8]	; (8008a08 <strtol+0x10>)
 8008a00:	6800      	ldr	r0, [r0, #0]
 8008a02:	f7ff bf75 	b.w	80088f0 <_strtol_l.constprop.0>
 8008a06:	bf00      	nop
 8008a08:	20000014 	.word	0x20000014

08008a0c <quorem>:
 8008a0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a10:	6903      	ldr	r3, [r0, #16]
 8008a12:	690c      	ldr	r4, [r1, #16]
 8008a14:	42a3      	cmp	r3, r4
 8008a16:	4607      	mov	r7, r0
 8008a18:	f2c0 8081 	blt.w	8008b1e <quorem+0x112>
 8008a1c:	3c01      	subs	r4, #1
 8008a1e:	f101 0814 	add.w	r8, r1, #20
 8008a22:	f100 0514 	add.w	r5, r0, #20
 8008a26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a2a:	9301      	str	r3, [sp, #4]
 8008a2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a34:	3301      	adds	r3, #1
 8008a36:	429a      	cmp	r2, r3
 8008a38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a40:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a44:	d331      	bcc.n	8008aaa <quorem+0x9e>
 8008a46:	f04f 0e00 	mov.w	lr, #0
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	46ac      	mov	ip, r5
 8008a4e:	46f2      	mov	sl, lr
 8008a50:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a54:	b293      	uxth	r3, r2
 8008a56:	fb06 e303 	mla	r3, r6, r3, lr
 8008a5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	ebaa 0303 	sub.w	r3, sl, r3
 8008a64:	f8dc a000 	ldr.w	sl, [ip]
 8008a68:	0c12      	lsrs	r2, r2, #16
 8008a6a:	fa13 f38a 	uxtah	r3, r3, sl
 8008a6e:	fb06 e202 	mla	r2, r6, r2, lr
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	9b00      	ldr	r3, [sp, #0]
 8008a76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a7a:	b292      	uxth	r2, r2
 8008a7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a84:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a88:	4581      	cmp	r9, r0
 8008a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a8e:	f84c 3b04 	str.w	r3, [ip], #4
 8008a92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a96:	d2db      	bcs.n	8008a50 <quorem+0x44>
 8008a98:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a9c:	b92b      	cbnz	r3, 8008aaa <quorem+0x9e>
 8008a9e:	9b01      	ldr	r3, [sp, #4]
 8008aa0:	3b04      	subs	r3, #4
 8008aa2:	429d      	cmp	r5, r3
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	d32e      	bcc.n	8008b06 <quorem+0xfa>
 8008aa8:	613c      	str	r4, [r7, #16]
 8008aaa:	4638      	mov	r0, r7
 8008aac:	f001 feb0 	bl	800a810 <__mcmp>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	db24      	blt.n	8008afe <quorem+0xf2>
 8008ab4:	3601      	adds	r6, #1
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	f04f 0c00 	mov.w	ip, #0
 8008abc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ac0:	f8d0 e000 	ldr.w	lr, [r0]
 8008ac4:	b293      	uxth	r3, r2
 8008ac6:	ebac 0303 	sub.w	r3, ip, r3
 8008aca:	0c12      	lsrs	r2, r2, #16
 8008acc:	fa13 f38e 	uxtah	r3, r3, lr
 8008ad0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ad4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ade:	45c1      	cmp	r9, r8
 8008ae0:	f840 3b04 	str.w	r3, [r0], #4
 8008ae4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ae8:	d2e8      	bcs.n	8008abc <quorem+0xb0>
 8008aea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008aee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008af2:	b922      	cbnz	r2, 8008afe <quorem+0xf2>
 8008af4:	3b04      	subs	r3, #4
 8008af6:	429d      	cmp	r5, r3
 8008af8:	461a      	mov	r2, r3
 8008afa:	d30a      	bcc.n	8008b12 <quorem+0x106>
 8008afc:	613c      	str	r4, [r7, #16]
 8008afe:	4630      	mov	r0, r6
 8008b00:	b003      	add	sp, #12
 8008b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b06:	6812      	ldr	r2, [r2, #0]
 8008b08:	3b04      	subs	r3, #4
 8008b0a:	2a00      	cmp	r2, #0
 8008b0c:	d1cc      	bne.n	8008aa8 <quorem+0x9c>
 8008b0e:	3c01      	subs	r4, #1
 8008b10:	e7c7      	b.n	8008aa2 <quorem+0x96>
 8008b12:	6812      	ldr	r2, [r2, #0]
 8008b14:	3b04      	subs	r3, #4
 8008b16:	2a00      	cmp	r2, #0
 8008b18:	d1f0      	bne.n	8008afc <quorem+0xf0>
 8008b1a:	3c01      	subs	r4, #1
 8008b1c:	e7eb      	b.n	8008af6 <quorem+0xea>
 8008b1e:	2000      	movs	r0, #0
 8008b20:	e7ee      	b.n	8008b00 <quorem+0xf4>
 8008b22:	0000      	movs	r0, r0
 8008b24:	0000      	movs	r0, r0
	...

08008b28 <_dtoa_r>:
 8008b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2c:	ed2d 8b04 	vpush	{d8-d9}
 8008b30:	ec57 6b10 	vmov	r6, r7, d0
 8008b34:	b093      	sub	sp, #76	; 0x4c
 8008b36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b3c:	9106      	str	r1, [sp, #24]
 8008b3e:	ee10 aa10 	vmov	sl, s0
 8008b42:	4604      	mov	r4, r0
 8008b44:	9209      	str	r2, [sp, #36]	; 0x24
 8008b46:	930c      	str	r3, [sp, #48]	; 0x30
 8008b48:	46bb      	mov	fp, r7
 8008b4a:	b975      	cbnz	r5, 8008b6a <_dtoa_r+0x42>
 8008b4c:	2010      	movs	r0, #16
 8008b4e:	f001 fb6b 	bl	800a228 <malloc>
 8008b52:	4602      	mov	r2, r0
 8008b54:	6260      	str	r0, [r4, #36]	; 0x24
 8008b56:	b920      	cbnz	r0, 8008b62 <_dtoa_r+0x3a>
 8008b58:	4ba7      	ldr	r3, [pc, #668]	; (8008df8 <_dtoa_r+0x2d0>)
 8008b5a:	21ea      	movs	r1, #234	; 0xea
 8008b5c:	48a7      	ldr	r0, [pc, #668]	; (8008dfc <_dtoa_r+0x2d4>)
 8008b5e:	f002 fd4b 	bl	800b5f8 <__assert_func>
 8008b62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b66:	6005      	str	r5, [r0, #0]
 8008b68:	60c5      	str	r5, [r0, #12]
 8008b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b6c:	6819      	ldr	r1, [r3, #0]
 8008b6e:	b151      	cbz	r1, 8008b86 <_dtoa_r+0x5e>
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	604a      	str	r2, [r1, #4]
 8008b74:	2301      	movs	r3, #1
 8008b76:	4093      	lsls	r3, r2
 8008b78:	608b      	str	r3, [r1, #8]
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f001 fbbc 	bl	800a2f8 <_Bfree>
 8008b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]
 8008b86:	1e3b      	subs	r3, r7, #0
 8008b88:	bfaa      	itet	ge
 8008b8a:	2300      	movge	r3, #0
 8008b8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008b90:	f8c8 3000 	strge.w	r3, [r8]
 8008b94:	4b9a      	ldr	r3, [pc, #616]	; (8008e00 <_dtoa_r+0x2d8>)
 8008b96:	bfbc      	itt	lt
 8008b98:	2201      	movlt	r2, #1
 8008b9a:	f8c8 2000 	strlt.w	r2, [r8]
 8008b9e:	ea33 030b 	bics.w	r3, r3, fp
 8008ba2:	d11b      	bne.n	8008bdc <_dtoa_r+0xb4>
 8008ba4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ba6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008baa:	6013      	str	r3, [r2, #0]
 8008bac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bb0:	4333      	orrs	r3, r6
 8008bb2:	f000 8592 	beq.w	80096da <_dtoa_r+0xbb2>
 8008bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bb8:	b963      	cbnz	r3, 8008bd4 <_dtoa_r+0xac>
 8008bba:	4b92      	ldr	r3, [pc, #584]	; (8008e04 <_dtoa_r+0x2dc>)
 8008bbc:	e022      	b.n	8008c04 <_dtoa_r+0xdc>
 8008bbe:	4b92      	ldr	r3, [pc, #584]	; (8008e08 <_dtoa_r+0x2e0>)
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	3308      	adds	r3, #8
 8008bc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bc6:	6013      	str	r3, [r2, #0]
 8008bc8:	9801      	ldr	r0, [sp, #4]
 8008bca:	b013      	add	sp, #76	; 0x4c
 8008bcc:	ecbd 8b04 	vpop	{d8-d9}
 8008bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd4:	4b8b      	ldr	r3, [pc, #556]	; (8008e04 <_dtoa_r+0x2dc>)
 8008bd6:	9301      	str	r3, [sp, #4]
 8008bd8:	3303      	adds	r3, #3
 8008bda:	e7f3      	b.n	8008bc4 <_dtoa_r+0x9c>
 8008bdc:	2200      	movs	r2, #0
 8008bde:	2300      	movs	r3, #0
 8008be0:	4650      	mov	r0, sl
 8008be2:	4659      	mov	r1, fp
 8008be4:	f7f7 ff48 	bl	8000a78 <__aeabi_dcmpeq>
 8008be8:	ec4b ab19 	vmov	d9, sl, fp
 8008bec:	4680      	mov	r8, r0
 8008bee:	b158      	cbz	r0, 8008c08 <_dtoa_r+0xe0>
 8008bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 856b 	beq.w	80096d4 <_dtoa_r+0xbac>
 8008bfe:	4883      	ldr	r0, [pc, #524]	; (8008e0c <_dtoa_r+0x2e4>)
 8008c00:	6018      	str	r0, [r3, #0]
 8008c02:	1e43      	subs	r3, r0, #1
 8008c04:	9301      	str	r3, [sp, #4]
 8008c06:	e7df      	b.n	8008bc8 <_dtoa_r+0xa0>
 8008c08:	ec4b ab10 	vmov	d0, sl, fp
 8008c0c:	aa10      	add	r2, sp, #64	; 0x40
 8008c0e:	a911      	add	r1, sp, #68	; 0x44
 8008c10:	4620      	mov	r0, r4
 8008c12:	f001 ff1f 	bl	800aa54 <__d2b>
 8008c16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008c1a:	ee08 0a10 	vmov	s16, r0
 8008c1e:	2d00      	cmp	r5, #0
 8008c20:	f000 8084 	beq.w	8008d2c <_dtoa_r+0x204>
 8008c24:	ee19 3a90 	vmov	r3, s19
 8008c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c30:	4656      	mov	r6, sl
 8008c32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008c3e:	4b74      	ldr	r3, [pc, #464]	; (8008e10 <_dtoa_r+0x2e8>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	4630      	mov	r0, r6
 8008c44:	4639      	mov	r1, r7
 8008c46:	f7f7 faf7 	bl	8000238 <__aeabi_dsub>
 8008c4a:	a365      	add	r3, pc, #404	; (adr r3, 8008de0 <_dtoa_r+0x2b8>)
 8008c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c50:	f7f7 fcaa 	bl	80005a8 <__aeabi_dmul>
 8008c54:	a364      	add	r3, pc, #400	; (adr r3, 8008de8 <_dtoa_r+0x2c0>)
 8008c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5a:	f7f7 faef 	bl	800023c <__adddf3>
 8008c5e:	4606      	mov	r6, r0
 8008c60:	4628      	mov	r0, r5
 8008c62:	460f      	mov	r7, r1
 8008c64:	f7f7 fc36 	bl	80004d4 <__aeabi_i2d>
 8008c68:	a361      	add	r3, pc, #388	; (adr r3, 8008df0 <_dtoa_r+0x2c8>)
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	f7f7 fc9b 	bl	80005a8 <__aeabi_dmul>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	4630      	mov	r0, r6
 8008c78:	4639      	mov	r1, r7
 8008c7a:	f7f7 fadf 	bl	800023c <__adddf3>
 8008c7e:	4606      	mov	r6, r0
 8008c80:	460f      	mov	r7, r1
 8008c82:	f7f7 ff41 	bl	8000b08 <__aeabi_d2iz>
 8008c86:	2200      	movs	r2, #0
 8008c88:	9000      	str	r0, [sp, #0]
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	4639      	mov	r1, r7
 8008c90:	f7f7 fefc 	bl	8000a8c <__aeabi_dcmplt>
 8008c94:	b150      	cbz	r0, 8008cac <_dtoa_r+0x184>
 8008c96:	9800      	ldr	r0, [sp, #0]
 8008c98:	f7f7 fc1c 	bl	80004d4 <__aeabi_i2d>
 8008c9c:	4632      	mov	r2, r6
 8008c9e:	463b      	mov	r3, r7
 8008ca0:	f7f7 feea 	bl	8000a78 <__aeabi_dcmpeq>
 8008ca4:	b910      	cbnz	r0, 8008cac <_dtoa_r+0x184>
 8008ca6:	9b00      	ldr	r3, [sp, #0]
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	9b00      	ldr	r3, [sp, #0]
 8008cae:	2b16      	cmp	r3, #22
 8008cb0:	d85a      	bhi.n	8008d68 <_dtoa_r+0x240>
 8008cb2:	9a00      	ldr	r2, [sp, #0]
 8008cb4:	4b57      	ldr	r3, [pc, #348]	; (8008e14 <_dtoa_r+0x2ec>)
 8008cb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	ec51 0b19 	vmov	r0, r1, d9
 8008cc2:	f7f7 fee3 	bl	8000a8c <__aeabi_dcmplt>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	d050      	beq.n	8008d6c <_dtoa_r+0x244>
 8008cca:	9b00      	ldr	r3, [sp, #0]
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cd6:	1b5d      	subs	r5, r3, r5
 8008cd8:	1e6b      	subs	r3, r5, #1
 8008cda:	9305      	str	r3, [sp, #20]
 8008cdc:	bf45      	ittet	mi
 8008cde:	f1c5 0301 	rsbmi	r3, r5, #1
 8008ce2:	9304      	strmi	r3, [sp, #16]
 8008ce4:	2300      	movpl	r3, #0
 8008ce6:	2300      	movmi	r3, #0
 8008ce8:	bf4c      	ite	mi
 8008cea:	9305      	strmi	r3, [sp, #20]
 8008cec:	9304      	strpl	r3, [sp, #16]
 8008cee:	9b00      	ldr	r3, [sp, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	db3d      	blt.n	8008d70 <_dtoa_r+0x248>
 8008cf4:	9b05      	ldr	r3, [sp, #20]
 8008cf6:	9a00      	ldr	r2, [sp, #0]
 8008cf8:	920a      	str	r2, [sp, #40]	; 0x28
 8008cfa:	4413      	add	r3, r2
 8008cfc:	9305      	str	r3, [sp, #20]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9307      	str	r3, [sp, #28]
 8008d02:	9b06      	ldr	r3, [sp, #24]
 8008d04:	2b09      	cmp	r3, #9
 8008d06:	f200 8089 	bhi.w	8008e1c <_dtoa_r+0x2f4>
 8008d0a:	2b05      	cmp	r3, #5
 8008d0c:	bfc4      	itt	gt
 8008d0e:	3b04      	subgt	r3, #4
 8008d10:	9306      	strgt	r3, [sp, #24]
 8008d12:	9b06      	ldr	r3, [sp, #24]
 8008d14:	f1a3 0302 	sub.w	r3, r3, #2
 8008d18:	bfcc      	ite	gt
 8008d1a:	2500      	movgt	r5, #0
 8008d1c:	2501      	movle	r5, #1
 8008d1e:	2b03      	cmp	r3, #3
 8008d20:	f200 8087 	bhi.w	8008e32 <_dtoa_r+0x30a>
 8008d24:	e8df f003 	tbb	[pc, r3]
 8008d28:	59383a2d 	.word	0x59383a2d
 8008d2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d30:	441d      	add	r5, r3
 8008d32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d36:	2b20      	cmp	r3, #32
 8008d38:	bfc1      	itttt	gt
 8008d3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d42:	fa0b f303 	lslgt.w	r3, fp, r3
 8008d46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d4a:	bfda      	itte	le
 8008d4c:	f1c3 0320 	rsble	r3, r3, #32
 8008d50:	fa06 f003 	lslle.w	r0, r6, r3
 8008d54:	4318      	orrgt	r0, r3
 8008d56:	f7f7 fbad 	bl	80004b4 <__aeabi_ui2d>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	4606      	mov	r6, r0
 8008d5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d62:	3d01      	subs	r5, #1
 8008d64:	930e      	str	r3, [sp, #56]	; 0x38
 8008d66:	e76a      	b.n	8008c3e <_dtoa_r+0x116>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e7b2      	b.n	8008cd2 <_dtoa_r+0x1aa>
 8008d6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d6e:	e7b1      	b.n	8008cd4 <_dtoa_r+0x1ac>
 8008d70:	9b04      	ldr	r3, [sp, #16]
 8008d72:	9a00      	ldr	r2, [sp, #0]
 8008d74:	1a9b      	subs	r3, r3, r2
 8008d76:	9304      	str	r3, [sp, #16]
 8008d78:	4253      	negs	r3, r2
 8008d7a:	9307      	str	r3, [sp, #28]
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d80:	e7bf      	b.n	8008d02 <_dtoa_r+0x1da>
 8008d82:	2300      	movs	r3, #0
 8008d84:	9308      	str	r3, [sp, #32]
 8008d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	dc55      	bgt.n	8008e38 <_dtoa_r+0x310>
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d92:	461a      	mov	r2, r3
 8008d94:	9209      	str	r2, [sp, #36]	; 0x24
 8008d96:	e00c      	b.n	8008db2 <_dtoa_r+0x28a>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e7f3      	b.n	8008d84 <_dtoa_r+0x25c>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008da0:	9308      	str	r3, [sp, #32]
 8008da2:	9b00      	ldr	r3, [sp, #0]
 8008da4:	4413      	add	r3, r2
 8008da6:	9302      	str	r3, [sp, #8]
 8008da8:	3301      	adds	r3, #1
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	9303      	str	r3, [sp, #12]
 8008dae:	bfb8      	it	lt
 8008db0:	2301      	movlt	r3, #1
 8008db2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008db4:	2200      	movs	r2, #0
 8008db6:	6042      	str	r2, [r0, #4]
 8008db8:	2204      	movs	r2, #4
 8008dba:	f102 0614 	add.w	r6, r2, #20
 8008dbe:	429e      	cmp	r6, r3
 8008dc0:	6841      	ldr	r1, [r0, #4]
 8008dc2:	d93d      	bls.n	8008e40 <_dtoa_r+0x318>
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f001 fa57 	bl	800a278 <_Balloc>
 8008dca:	9001      	str	r0, [sp, #4]
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	d13b      	bne.n	8008e48 <_dtoa_r+0x320>
 8008dd0:	4b11      	ldr	r3, [pc, #68]	; (8008e18 <_dtoa_r+0x2f0>)
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008dd8:	e6c0      	b.n	8008b5c <_dtoa_r+0x34>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e7df      	b.n	8008d9e <_dtoa_r+0x276>
 8008dde:	bf00      	nop
 8008de0:	636f4361 	.word	0x636f4361
 8008de4:	3fd287a7 	.word	0x3fd287a7
 8008de8:	8b60c8b3 	.word	0x8b60c8b3
 8008dec:	3fc68a28 	.word	0x3fc68a28
 8008df0:	509f79fb 	.word	0x509f79fb
 8008df4:	3fd34413 	.word	0x3fd34413
 8008df8:	0800bdce 	.word	0x0800bdce
 8008dfc:	0800bde5 	.word	0x0800bde5
 8008e00:	7ff00000 	.word	0x7ff00000
 8008e04:	0800bdca 	.word	0x0800bdca
 8008e08:	0800bdc1 	.word	0x0800bdc1
 8008e0c:	0800bc41 	.word	0x0800bc41
 8008e10:	3ff80000 	.word	0x3ff80000
 8008e14:	0800bfb8 	.word	0x0800bfb8
 8008e18:	0800be40 	.word	0x0800be40
 8008e1c:	2501      	movs	r5, #1
 8008e1e:	2300      	movs	r3, #0
 8008e20:	9306      	str	r3, [sp, #24]
 8008e22:	9508      	str	r5, [sp, #32]
 8008e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	2312      	movs	r3, #18
 8008e30:	e7b0      	b.n	8008d94 <_dtoa_r+0x26c>
 8008e32:	2301      	movs	r3, #1
 8008e34:	9308      	str	r3, [sp, #32]
 8008e36:	e7f5      	b.n	8008e24 <_dtoa_r+0x2fc>
 8008e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e3e:	e7b8      	b.n	8008db2 <_dtoa_r+0x28a>
 8008e40:	3101      	adds	r1, #1
 8008e42:	6041      	str	r1, [r0, #4]
 8008e44:	0052      	lsls	r2, r2, #1
 8008e46:	e7b8      	b.n	8008dba <_dtoa_r+0x292>
 8008e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e4a:	9a01      	ldr	r2, [sp, #4]
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	9b03      	ldr	r3, [sp, #12]
 8008e50:	2b0e      	cmp	r3, #14
 8008e52:	f200 809d 	bhi.w	8008f90 <_dtoa_r+0x468>
 8008e56:	2d00      	cmp	r5, #0
 8008e58:	f000 809a 	beq.w	8008f90 <_dtoa_r+0x468>
 8008e5c:	9b00      	ldr	r3, [sp, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	dd32      	ble.n	8008ec8 <_dtoa_r+0x3a0>
 8008e62:	4ab7      	ldr	r2, [pc, #732]	; (8009140 <_dtoa_r+0x618>)
 8008e64:	f003 030f 	and.w	r3, r3, #15
 8008e68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e70:	9b00      	ldr	r3, [sp, #0]
 8008e72:	05d8      	lsls	r0, r3, #23
 8008e74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008e78:	d516      	bpl.n	8008ea8 <_dtoa_r+0x380>
 8008e7a:	4bb2      	ldr	r3, [pc, #712]	; (8009144 <_dtoa_r+0x61c>)
 8008e7c:	ec51 0b19 	vmov	r0, r1, d9
 8008e80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e84:	f7f7 fcba 	bl	80007fc <__aeabi_ddiv>
 8008e88:	f007 070f 	and.w	r7, r7, #15
 8008e8c:	4682      	mov	sl, r0
 8008e8e:	468b      	mov	fp, r1
 8008e90:	2503      	movs	r5, #3
 8008e92:	4eac      	ldr	r6, [pc, #688]	; (8009144 <_dtoa_r+0x61c>)
 8008e94:	b957      	cbnz	r7, 8008eac <_dtoa_r+0x384>
 8008e96:	4642      	mov	r2, r8
 8008e98:	464b      	mov	r3, r9
 8008e9a:	4650      	mov	r0, sl
 8008e9c:	4659      	mov	r1, fp
 8008e9e:	f7f7 fcad 	bl	80007fc <__aeabi_ddiv>
 8008ea2:	4682      	mov	sl, r0
 8008ea4:	468b      	mov	fp, r1
 8008ea6:	e028      	b.n	8008efa <_dtoa_r+0x3d2>
 8008ea8:	2502      	movs	r5, #2
 8008eaa:	e7f2      	b.n	8008e92 <_dtoa_r+0x36a>
 8008eac:	07f9      	lsls	r1, r7, #31
 8008eae:	d508      	bpl.n	8008ec2 <_dtoa_r+0x39a>
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	4649      	mov	r1, r9
 8008eb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008eb8:	f7f7 fb76 	bl	80005a8 <__aeabi_dmul>
 8008ebc:	3501      	adds	r5, #1
 8008ebe:	4680      	mov	r8, r0
 8008ec0:	4689      	mov	r9, r1
 8008ec2:	107f      	asrs	r7, r7, #1
 8008ec4:	3608      	adds	r6, #8
 8008ec6:	e7e5      	b.n	8008e94 <_dtoa_r+0x36c>
 8008ec8:	f000 809b 	beq.w	8009002 <_dtoa_r+0x4da>
 8008ecc:	9b00      	ldr	r3, [sp, #0]
 8008ece:	4f9d      	ldr	r7, [pc, #628]	; (8009144 <_dtoa_r+0x61c>)
 8008ed0:	425e      	negs	r6, r3
 8008ed2:	4b9b      	ldr	r3, [pc, #620]	; (8009140 <_dtoa_r+0x618>)
 8008ed4:	f006 020f 	and.w	r2, r6, #15
 8008ed8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee0:	ec51 0b19 	vmov	r0, r1, d9
 8008ee4:	f7f7 fb60 	bl	80005a8 <__aeabi_dmul>
 8008ee8:	1136      	asrs	r6, r6, #4
 8008eea:	4682      	mov	sl, r0
 8008eec:	468b      	mov	fp, r1
 8008eee:	2300      	movs	r3, #0
 8008ef0:	2502      	movs	r5, #2
 8008ef2:	2e00      	cmp	r6, #0
 8008ef4:	d17a      	bne.n	8008fec <_dtoa_r+0x4c4>
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1d3      	bne.n	8008ea2 <_dtoa_r+0x37a>
 8008efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 8082 	beq.w	8009006 <_dtoa_r+0x4de>
 8008f02:	4b91      	ldr	r3, [pc, #580]	; (8009148 <_dtoa_r+0x620>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	4650      	mov	r0, sl
 8008f08:	4659      	mov	r1, fp
 8008f0a:	f7f7 fdbf 	bl	8000a8c <__aeabi_dcmplt>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	d079      	beq.n	8009006 <_dtoa_r+0x4de>
 8008f12:	9b03      	ldr	r3, [sp, #12]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d076      	beq.n	8009006 <_dtoa_r+0x4de>
 8008f18:	9b02      	ldr	r3, [sp, #8]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	dd36      	ble.n	8008f8c <_dtoa_r+0x464>
 8008f1e:	9b00      	ldr	r3, [sp, #0]
 8008f20:	4650      	mov	r0, sl
 8008f22:	4659      	mov	r1, fp
 8008f24:	1e5f      	subs	r7, r3, #1
 8008f26:	2200      	movs	r2, #0
 8008f28:	4b88      	ldr	r3, [pc, #544]	; (800914c <_dtoa_r+0x624>)
 8008f2a:	f7f7 fb3d 	bl	80005a8 <__aeabi_dmul>
 8008f2e:	9e02      	ldr	r6, [sp, #8]
 8008f30:	4682      	mov	sl, r0
 8008f32:	468b      	mov	fp, r1
 8008f34:	3501      	adds	r5, #1
 8008f36:	4628      	mov	r0, r5
 8008f38:	f7f7 facc 	bl	80004d4 <__aeabi_i2d>
 8008f3c:	4652      	mov	r2, sl
 8008f3e:	465b      	mov	r3, fp
 8008f40:	f7f7 fb32 	bl	80005a8 <__aeabi_dmul>
 8008f44:	4b82      	ldr	r3, [pc, #520]	; (8009150 <_dtoa_r+0x628>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	f7f7 f978 	bl	800023c <__adddf3>
 8008f4c:	46d0      	mov	r8, sl
 8008f4e:	46d9      	mov	r9, fp
 8008f50:	4682      	mov	sl, r0
 8008f52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008f56:	2e00      	cmp	r6, #0
 8008f58:	d158      	bne.n	800900c <_dtoa_r+0x4e4>
 8008f5a:	4b7e      	ldr	r3, [pc, #504]	; (8009154 <_dtoa_r+0x62c>)
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	4640      	mov	r0, r8
 8008f60:	4649      	mov	r1, r9
 8008f62:	f7f7 f969 	bl	8000238 <__aeabi_dsub>
 8008f66:	4652      	mov	r2, sl
 8008f68:	465b      	mov	r3, fp
 8008f6a:	4680      	mov	r8, r0
 8008f6c:	4689      	mov	r9, r1
 8008f6e:	f7f7 fdab 	bl	8000ac8 <__aeabi_dcmpgt>
 8008f72:	2800      	cmp	r0, #0
 8008f74:	f040 8295 	bne.w	80094a2 <_dtoa_r+0x97a>
 8008f78:	4652      	mov	r2, sl
 8008f7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008f7e:	4640      	mov	r0, r8
 8008f80:	4649      	mov	r1, r9
 8008f82:	f7f7 fd83 	bl	8000a8c <__aeabi_dcmplt>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	f040 8289 	bne.w	800949e <_dtoa_r+0x976>
 8008f8c:	ec5b ab19 	vmov	sl, fp, d9
 8008f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f2c0 8148 	blt.w	8009228 <_dtoa_r+0x700>
 8008f98:	9a00      	ldr	r2, [sp, #0]
 8008f9a:	2a0e      	cmp	r2, #14
 8008f9c:	f300 8144 	bgt.w	8009228 <_dtoa_r+0x700>
 8008fa0:	4b67      	ldr	r3, [pc, #412]	; (8009140 <_dtoa_r+0x618>)
 8008fa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fa6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f280 80d5 	bge.w	800915c <_dtoa_r+0x634>
 8008fb2:	9b03      	ldr	r3, [sp, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f300 80d1 	bgt.w	800915c <_dtoa_r+0x634>
 8008fba:	f040 826f 	bne.w	800949c <_dtoa_r+0x974>
 8008fbe:	4b65      	ldr	r3, [pc, #404]	; (8009154 <_dtoa_r+0x62c>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	4649      	mov	r1, r9
 8008fc6:	f7f7 faef 	bl	80005a8 <__aeabi_dmul>
 8008fca:	4652      	mov	r2, sl
 8008fcc:	465b      	mov	r3, fp
 8008fce:	f7f7 fd71 	bl	8000ab4 <__aeabi_dcmpge>
 8008fd2:	9e03      	ldr	r6, [sp, #12]
 8008fd4:	4637      	mov	r7, r6
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	f040 8245 	bne.w	8009466 <_dtoa_r+0x93e>
 8008fdc:	9d01      	ldr	r5, [sp, #4]
 8008fde:	2331      	movs	r3, #49	; 0x31
 8008fe0:	f805 3b01 	strb.w	r3, [r5], #1
 8008fe4:	9b00      	ldr	r3, [sp, #0]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	e240      	b.n	800946e <_dtoa_r+0x946>
 8008fec:	07f2      	lsls	r2, r6, #31
 8008fee:	d505      	bpl.n	8008ffc <_dtoa_r+0x4d4>
 8008ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ff4:	f7f7 fad8 	bl	80005a8 <__aeabi_dmul>
 8008ff8:	3501      	adds	r5, #1
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	1076      	asrs	r6, r6, #1
 8008ffe:	3708      	adds	r7, #8
 8009000:	e777      	b.n	8008ef2 <_dtoa_r+0x3ca>
 8009002:	2502      	movs	r5, #2
 8009004:	e779      	b.n	8008efa <_dtoa_r+0x3d2>
 8009006:	9f00      	ldr	r7, [sp, #0]
 8009008:	9e03      	ldr	r6, [sp, #12]
 800900a:	e794      	b.n	8008f36 <_dtoa_r+0x40e>
 800900c:	9901      	ldr	r1, [sp, #4]
 800900e:	4b4c      	ldr	r3, [pc, #304]	; (8009140 <_dtoa_r+0x618>)
 8009010:	4431      	add	r1, r6
 8009012:	910d      	str	r1, [sp, #52]	; 0x34
 8009014:	9908      	ldr	r1, [sp, #32]
 8009016:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800901a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800901e:	2900      	cmp	r1, #0
 8009020:	d043      	beq.n	80090aa <_dtoa_r+0x582>
 8009022:	494d      	ldr	r1, [pc, #308]	; (8009158 <_dtoa_r+0x630>)
 8009024:	2000      	movs	r0, #0
 8009026:	f7f7 fbe9 	bl	80007fc <__aeabi_ddiv>
 800902a:	4652      	mov	r2, sl
 800902c:	465b      	mov	r3, fp
 800902e:	f7f7 f903 	bl	8000238 <__aeabi_dsub>
 8009032:	9d01      	ldr	r5, [sp, #4]
 8009034:	4682      	mov	sl, r0
 8009036:	468b      	mov	fp, r1
 8009038:	4649      	mov	r1, r9
 800903a:	4640      	mov	r0, r8
 800903c:	f7f7 fd64 	bl	8000b08 <__aeabi_d2iz>
 8009040:	4606      	mov	r6, r0
 8009042:	f7f7 fa47 	bl	80004d4 <__aeabi_i2d>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	4640      	mov	r0, r8
 800904c:	4649      	mov	r1, r9
 800904e:	f7f7 f8f3 	bl	8000238 <__aeabi_dsub>
 8009052:	3630      	adds	r6, #48	; 0x30
 8009054:	f805 6b01 	strb.w	r6, [r5], #1
 8009058:	4652      	mov	r2, sl
 800905a:	465b      	mov	r3, fp
 800905c:	4680      	mov	r8, r0
 800905e:	4689      	mov	r9, r1
 8009060:	f7f7 fd14 	bl	8000a8c <__aeabi_dcmplt>
 8009064:	2800      	cmp	r0, #0
 8009066:	d163      	bne.n	8009130 <_dtoa_r+0x608>
 8009068:	4642      	mov	r2, r8
 800906a:	464b      	mov	r3, r9
 800906c:	4936      	ldr	r1, [pc, #216]	; (8009148 <_dtoa_r+0x620>)
 800906e:	2000      	movs	r0, #0
 8009070:	f7f7 f8e2 	bl	8000238 <__aeabi_dsub>
 8009074:	4652      	mov	r2, sl
 8009076:	465b      	mov	r3, fp
 8009078:	f7f7 fd08 	bl	8000a8c <__aeabi_dcmplt>
 800907c:	2800      	cmp	r0, #0
 800907e:	f040 80b5 	bne.w	80091ec <_dtoa_r+0x6c4>
 8009082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009084:	429d      	cmp	r5, r3
 8009086:	d081      	beq.n	8008f8c <_dtoa_r+0x464>
 8009088:	4b30      	ldr	r3, [pc, #192]	; (800914c <_dtoa_r+0x624>)
 800908a:	2200      	movs	r2, #0
 800908c:	4650      	mov	r0, sl
 800908e:	4659      	mov	r1, fp
 8009090:	f7f7 fa8a 	bl	80005a8 <__aeabi_dmul>
 8009094:	4b2d      	ldr	r3, [pc, #180]	; (800914c <_dtoa_r+0x624>)
 8009096:	4682      	mov	sl, r0
 8009098:	468b      	mov	fp, r1
 800909a:	4640      	mov	r0, r8
 800909c:	4649      	mov	r1, r9
 800909e:	2200      	movs	r2, #0
 80090a0:	f7f7 fa82 	bl	80005a8 <__aeabi_dmul>
 80090a4:	4680      	mov	r8, r0
 80090a6:	4689      	mov	r9, r1
 80090a8:	e7c6      	b.n	8009038 <_dtoa_r+0x510>
 80090aa:	4650      	mov	r0, sl
 80090ac:	4659      	mov	r1, fp
 80090ae:	f7f7 fa7b 	bl	80005a8 <__aeabi_dmul>
 80090b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090b4:	9d01      	ldr	r5, [sp, #4]
 80090b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80090b8:	4682      	mov	sl, r0
 80090ba:	468b      	mov	fp, r1
 80090bc:	4649      	mov	r1, r9
 80090be:	4640      	mov	r0, r8
 80090c0:	f7f7 fd22 	bl	8000b08 <__aeabi_d2iz>
 80090c4:	4606      	mov	r6, r0
 80090c6:	f7f7 fa05 	bl	80004d4 <__aeabi_i2d>
 80090ca:	3630      	adds	r6, #48	; 0x30
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	4640      	mov	r0, r8
 80090d2:	4649      	mov	r1, r9
 80090d4:	f7f7 f8b0 	bl	8000238 <__aeabi_dsub>
 80090d8:	f805 6b01 	strb.w	r6, [r5], #1
 80090dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090de:	429d      	cmp	r5, r3
 80090e0:	4680      	mov	r8, r0
 80090e2:	4689      	mov	r9, r1
 80090e4:	f04f 0200 	mov.w	r2, #0
 80090e8:	d124      	bne.n	8009134 <_dtoa_r+0x60c>
 80090ea:	4b1b      	ldr	r3, [pc, #108]	; (8009158 <_dtoa_r+0x630>)
 80090ec:	4650      	mov	r0, sl
 80090ee:	4659      	mov	r1, fp
 80090f0:	f7f7 f8a4 	bl	800023c <__adddf3>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4640      	mov	r0, r8
 80090fa:	4649      	mov	r1, r9
 80090fc:	f7f7 fce4 	bl	8000ac8 <__aeabi_dcmpgt>
 8009100:	2800      	cmp	r0, #0
 8009102:	d173      	bne.n	80091ec <_dtoa_r+0x6c4>
 8009104:	4652      	mov	r2, sl
 8009106:	465b      	mov	r3, fp
 8009108:	4913      	ldr	r1, [pc, #76]	; (8009158 <_dtoa_r+0x630>)
 800910a:	2000      	movs	r0, #0
 800910c:	f7f7 f894 	bl	8000238 <__aeabi_dsub>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	4640      	mov	r0, r8
 8009116:	4649      	mov	r1, r9
 8009118:	f7f7 fcb8 	bl	8000a8c <__aeabi_dcmplt>
 800911c:	2800      	cmp	r0, #0
 800911e:	f43f af35 	beq.w	8008f8c <_dtoa_r+0x464>
 8009122:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009124:	1e6b      	subs	r3, r5, #1
 8009126:	930f      	str	r3, [sp, #60]	; 0x3c
 8009128:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800912c:	2b30      	cmp	r3, #48	; 0x30
 800912e:	d0f8      	beq.n	8009122 <_dtoa_r+0x5fa>
 8009130:	9700      	str	r7, [sp, #0]
 8009132:	e049      	b.n	80091c8 <_dtoa_r+0x6a0>
 8009134:	4b05      	ldr	r3, [pc, #20]	; (800914c <_dtoa_r+0x624>)
 8009136:	f7f7 fa37 	bl	80005a8 <__aeabi_dmul>
 800913a:	4680      	mov	r8, r0
 800913c:	4689      	mov	r9, r1
 800913e:	e7bd      	b.n	80090bc <_dtoa_r+0x594>
 8009140:	0800bfb8 	.word	0x0800bfb8
 8009144:	0800bf90 	.word	0x0800bf90
 8009148:	3ff00000 	.word	0x3ff00000
 800914c:	40240000 	.word	0x40240000
 8009150:	401c0000 	.word	0x401c0000
 8009154:	40140000 	.word	0x40140000
 8009158:	3fe00000 	.word	0x3fe00000
 800915c:	9d01      	ldr	r5, [sp, #4]
 800915e:	4656      	mov	r6, sl
 8009160:	465f      	mov	r7, fp
 8009162:	4642      	mov	r2, r8
 8009164:	464b      	mov	r3, r9
 8009166:	4630      	mov	r0, r6
 8009168:	4639      	mov	r1, r7
 800916a:	f7f7 fb47 	bl	80007fc <__aeabi_ddiv>
 800916e:	f7f7 fccb 	bl	8000b08 <__aeabi_d2iz>
 8009172:	4682      	mov	sl, r0
 8009174:	f7f7 f9ae 	bl	80004d4 <__aeabi_i2d>
 8009178:	4642      	mov	r2, r8
 800917a:	464b      	mov	r3, r9
 800917c:	f7f7 fa14 	bl	80005a8 <__aeabi_dmul>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	4630      	mov	r0, r6
 8009186:	4639      	mov	r1, r7
 8009188:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800918c:	f7f7 f854 	bl	8000238 <__aeabi_dsub>
 8009190:	f805 6b01 	strb.w	r6, [r5], #1
 8009194:	9e01      	ldr	r6, [sp, #4]
 8009196:	9f03      	ldr	r7, [sp, #12]
 8009198:	1bae      	subs	r6, r5, r6
 800919a:	42b7      	cmp	r7, r6
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	d135      	bne.n	800920e <_dtoa_r+0x6e6>
 80091a2:	f7f7 f84b 	bl	800023c <__adddf3>
 80091a6:	4642      	mov	r2, r8
 80091a8:	464b      	mov	r3, r9
 80091aa:	4606      	mov	r6, r0
 80091ac:	460f      	mov	r7, r1
 80091ae:	f7f7 fc8b 	bl	8000ac8 <__aeabi_dcmpgt>
 80091b2:	b9d0      	cbnz	r0, 80091ea <_dtoa_r+0x6c2>
 80091b4:	4642      	mov	r2, r8
 80091b6:	464b      	mov	r3, r9
 80091b8:	4630      	mov	r0, r6
 80091ba:	4639      	mov	r1, r7
 80091bc:	f7f7 fc5c 	bl	8000a78 <__aeabi_dcmpeq>
 80091c0:	b110      	cbz	r0, 80091c8 <_dtoa_r+0x6a0>
 80091c2:	f01a 0f01 	tst.w	sl, #1
 80091c6:	d110      	bne.n	80091ea <_dtoa_r+0x6c2>
 80091c8:	4620      	mov	r0, r4
 80091ca:	ee18 1a10 	vmov	r1, s16
 80091ce:	f001 f893 	bl	800a2f8 <_Bfree>
 80091d2:	2300      	movs	r3, #0
 80091d4:	9800      	ldr	r0, [sp, #0]
 80091d6:	702b      	strb	r3, [r5, #0]
 80091d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091da:	3001      	adds	r0, #1
 80091dc:	6018      	str	r0, [r3, #0]
 80091de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f43f acf1 	beq.w	8008bc8 <_dtoa_r+0xa0>
 80091e6:	601d      	str	r5, [r3, #0]
 80091e8:	e4ee      	b.n	8008bc8 <_dtoa_r+0xa0>
 80091ea:	9f00      	ldr	r7, [sp, #0]
 80091ec:	462b      	mov	r3, r5
 80091ee:	461d      	mov	r5, r3
 80091f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091f4:	2a39      	cmp	r2, #57	; 0x39
 80091f6:	d106      	bne.n	8009206 <_dtoa_r+0x6de>
 80091f8:	9a01      	ldr	r2, [sp, #4]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d1f7      	bne.n	80091ee <_dtoa_r+0x6c6>
 80091fe:	9901      	ldr	r1, [sp, #4]
 8009200:	2230      	movs	r2, #48	; 0x30
 8009202:	3701      	adds	r7, #1
 8009204:	700a      	strb	r2, [r1, #0]
 8009206:	781a      	ldrb	r2, [r3, #0]
 8009208:	3201      	adds	r2, #1
 800920a:	701a      	strb	r2, [r3, #0]
 800920c:	e790      	b.n	8009130 <_dtoa_r+0x608>
 800920e:	4ba6      	ldr	r3, [pc, #664]	; (80094a8 <_dtoa_r+0x980>)
 8009210:	2200      	movs	r2, #0
 8009212:	f7f7 f9c9 	bl	80005a8 <__aeabi_dmul>
 8009216:	2200      	movs	r2, #0
 8009218:	2300      	movs	r3, #0
 800921a:	4606      	mov	r6, r0
 800921c:	460f      	mov	r7, r1
 800921e:	f7f7 fc2b 	bl	8000a78 <__aeabi_dcmpeq>
 8009222:	2800      	cmp	r0, #0
 8009224:	d09d      	beq.n	8009162 <_dtoa_r+0x63a>
 8009226:	e7cf      	b.n	80091c8 <_dtoa_r+0x6a0>
 8009228:	9a08      	ldr	r2, [sp, #32]
 800922a:	2a00      	cmp	r2, #0
 800922c:	f000 80d7 	beq.w	80093de <_dtoa_r+0x8b6>
 8009230:	9a06      	ldr	r2, [sp, #24]
 8009232:	2a01      	cmp	r2, #1
 8009234:	f300 80ba 	bgt.w	80093ac <_dtoa_r+0x884>
 8009238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800923a:	2a00      	cmp	r2, #0
 800923c:	f000 80b2 	beq.w	80093a4 <_dtoa_r+0x87c>
 8009240:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009244:	9e07      	ldr	r6, [sp, #28]
 8009246:	9d04      	ldr	r5, [sp, #16]
 8009248:	9a04      	ldr	r2, [sp, #16]
 800924a:	441a      	add	r2, r3
 800924c:	9204      	str	r2, [sp, #16]
 800924e:	9a05      	ldr	r2, [sp, #20]
 8009250:	2101      	movs	r1, #1
 8009252:	441a      	add	r2, r3
 8009254:	4620      	mov	r0, r4
 8009256:	9205      	str	r2, [sp, #20]
 8009258:	f001 f950 	bl	800a4fc <__i2b>
 800925c:	4607      	mov	r7, r0
 800925e:	2d00      	cmp	r5, #0
 8009260:	dd0c      	ble.n	800927c <_dtoa_r+0x754>
 8009262:	9b05      	ldr	r3, [sp, #20]
 8009264:	2b00      	cmp	r3, #0
 8009266:	dd09      	ble.n	800927c <_dtoa_r+0x754>
 8009268:	42ab      	cmp	r3, r5
 800926a:	9a04      	ldr	r2, [sp, #16]
 800926c:	bfa8      	it	ge
 800926e:	462b      	movge	r3, r5
 8009270:	1ad2      	subs	r2, r2, r3
 8009272:	9204      	str	r2, [sp, #16]
 8009274:	9a05      	ldr	r2, [sp, #20]
 8009276:	1aed      	subs	r5, r5, r3
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	9305      	str	r3, [sp, #20]
 800927c:	9b07      	ldr	r3, [sp, #28]
 800927e:	b31b      	cbz	r3, 80092c8 <_dtoa_r+0x7a0>
 8009280:	9b08      	ldr	r3, [sp, #32]
 8009282:	2b00      	cmp	r3, #0
 8009284:	f000 80af 	beq.w	80093e6 <_dtoa_r+0x8be>
 8009288:	2e00      	cmp	r6, #0
 800928a:	dd13      	ble.n	80092b4 <_dtoa_r+0x78c>
 800928c:	4639      	mov	r1, r7
 800928e:	4632      	mov	r2, r6
 8009290:	4620      	mov	r0, r4
 8009292:	f001 f9f3 	bl	800a67c <__pow5mult>
 8009296:	ee18 2a10 	vmov	r2, s16
 800929a:	4601      	mov	r1, r0
 800929c:	4607      	mov	r7, r0
 800929e:	4620      	mov	r0, r4
 80092a0:	f001 f942 	bl	800a528 <__multiply>
 80092a4:	ee18 1a10 	vmov	r1, s16
 80092a8:	4680      	mov	r8, r0
 80092aa:	4620      	mov	r0, r4
 80092ac:	f001 f824 	bl	800a2f8 <_Bfree>
 80092b0:	ee08 8a10 	vmov	s16, r8
 80092b4:	9b07      	ldr	r3, [sp, #28]
 80092b6:	1b9a      	subs	r2, r3, r6
 80092b8:	d006      	beq.n	80092c8 <_dtoa_r+0x7a0>
 80092ba:	ee18 1a10 	vmov	r1, s16
 80092be:	4620      	mov	r0, r4
 80092c0:	f001 f9dc 	bl	800a67c <__pow5mult>
 80092c4:	ee08 0a10 	vmov	s16, r0
 80092c8:	2101      	movs	r1, #1
 80092ca:	4620      	mov	r0, r4
 80092cc:	f001 f916 	bl	800a4fc <__i2b>
 80092d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	4606      	mov	r6, r0
 80092d6:	f340 8088 	ble.w	80093ea <_dtoa_r+0x8c2>
 80092da:	461a      	mov	r2, r3
 80092dc:	4601      	mov	r1, r0
 80092de:	4620      	mov	r0, r4
 80092e0:	f001 f9cc 	bl	800a67c <__pow5mult>
 80092e4:	9b06      	ldr	r3, [sp, #24]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	4606      	mov	r6, r0
 80092ea:	f340 8081 	ble.w	80093f0 <_dtoa_r+0x8c8>
 80092ee:	f04f 0800 	mov.w	r8, #0
 80092f2:	6933      	ldr	r3, [r6, #16]
 80092f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092f8:	6918      	ldr	r0, [r3, #16]
 80092fa:	f001 f8af 	bl	800a45c <__hi0bits>
 80092fe:	f1c0 0020 	rsb	r0, r0, #32
 8009302:	9b05      	ldr	r3, [sp, #20]
 8009304:	4418      	add	r0, r3
 8009306:	f010 001f 	ands.w	r0, r0, #31
 800930a:	f000 8092 	beq.w	8009432 <_dtoa_r+0x90a>
 800930e:	f1c0 0320 	rsb	r3, r0, #32
 8009312:	2b04      	cmp	r3, #4
 8009314:	f340 808a 	ble.w	800942c <_dtoa_r+0x904>
 8009318:	f1c0 001c 	rsb	r0, r0, #28
 800931c:	9b04      	ldr	r3, [sp, #16]
 800931e:	4403      	add	r3, r0
 8009320:	9304      	str	r3, [sp, #16]
 8009322:	9b05      	ldr	r3, [sp, #20]
 8009324:	4403      	add	r3, r0
 8009326:	4405      	add	r5, r0
 8009328:	9305      	str	r3, [sp, #20]
 800932a:	9b04      	ldr	r3, [sp, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	dd07      	ble.n	8009340 <_dtoa_r+0x818>
 8009330:	ee18 1a10 	vmov	r1, s16
 8009334:	461a      	mov	r2, r3
 8009336:	4620      	mov	r0, r4
 8009338:	f001 f9fa 	bl	800a730 <__lshift>
 800933c:	ee08 0a10 	vmov	s16, r0
 8009340:	9b05      	ldr	r3, [sp, #20]
 8009342:	2b00      	cmp	r3, #0
 8009344:	dd05      	ble.n	8009352 <_dtoa_r+0x82a>
 8009346:	4631      	mov	r1, r6
 8009348:	461a      	mov	r2, r3
 800934a:	4620      	mov	r0, r4
 800934c:	f001 f9f0 	bl	800a730 <__lshift>
 8009350:	4606      	mov	r6, r0
 8009352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009354:	2b00      	cmp	r3, #0
 8009356:	d06e      	beq.n	8009436 <_dtoa_r+0x90e>
 8009358:	ee18 0a10 	vmov	r0, s16
 800935c:	4631      	mov	r1, r6
 800935e:	f001 fa57 	bl	800a810 <__mcmp>
 8009362:	2800      	cmp	r0, #0
 8009364:	da67      	bge.n	8009436 <_dtoa_r+0x90e>
 8009366:	9b00      	ldr	r3, [sp, #0]
 8009368:	3b01      	subs	r3, #1
 800936a:	ee18 1a10 	vmov	r1, s16
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	220a      	movs	r2, #10
 8009372:	2300      	movs	r3, #0
 8009374:	4620      	mov	r0, r4
 8009376:	f000 ffe1 	bl	800a33c <__multadd>
 800937a:	9b08      	ldr	r3, [sp, #32]
 800937c:	ee08 0a10 	vmov	s16, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 81b1 	beq.w	80096e8 <_dtoa_r+0xbc0>
 8009386:	2300      	movs	r3, #0
 8009388:	4639      	mov	r1, r7
 800938a:	220a      	movs	r2, #10
 800938c:	4620      	mov	r0, r4
 800938e:	f000 ffd5 	bl	800a33c <__multadd>
 8009392:	9b02      	ldr	r3, [sp, #8]
 8009394:	2b00      	cmp	r3, #0
 8009396:	4607      	mov	r7, r0
 8009398:	f300 808e 	bgt.w	80094b8 <_dtoa_r+0x990>
 800939c:	9b06      	ldr	r3, [sp, #24]
 800939e:	2b02      	cmp	r3, #2
 80093a0:	dc51      	bgt.n	8009446 <_dtoa_r+0x91e>
 80093a2:	e089      	b.n	80094b8 <_dtoa_r+0x990>
 80093a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093aa:	e74b      	b.n	8009244 <_dtoa_r+0x71c>
 80093ac:	9b03      	ldr	r3, [sp, #12]
 80093ae:	1e5e      	subs	r6, r3, #1
 80093b0:	9b07      	ldr	r3, [sp, #28]
 80093b2:	42b3      	cmp	r3, r6
 80093b4:	bfbf      	itttt	lt
 80093b6:	9b07      	ldrlt	r3, [sp, #28]
 80093b8:	9607      	strlt	r6, [sp, #28]
 80093ba:	1af2      	sublt	r2, r6, r3
 80093bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80093be:	bfb6      	itet	lt
 80093c0:	189b      	addlt	r3, r3, r2
 80093c2:	1b9e      	subge	r6, r3, r6
 80093c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80093c6:	9b03      	ldr	r3, [sp, #12]
 80093c8:	bfb8      	it	lt
 80093ca:	2600      	movlt	r6, #0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	bfb7      	itett	lt
 80093d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80093d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80093d8:	1a9d      	sublt	r5, r3, r2
 80093da:	2300      	movlt	r3, #0
 80093dc:	e734      	b.n	8009248 <_dtoa_r+0x720>
 80093de:	9e07      	ldr	r6, [sp, #28]
 80093e0:	9d04      	ldr	r5, [sp, #16]
 80093e2:	9f08      	ldr	r7, [sp, #32]
 80093e4:	e73b      	b.n	800925e <_dtoa_r+0x736>
 80093e6:	9a07      	ldr	r2, [sp, #28]
 80093e8:	e767      	b.n	80092ba <_dtoa_r+0x792>
 80093ea:	9b06      	ldr	r3, [sp, #24]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	dc18      	bgt.n	8009422 <_dtoa_r+0x8fa>
 80093f0:	f1ba 0f00 	cmp.w	sl, #0
 80093f4:	d115      	bne.n	8009422 <_dtoa_r+0x8fa>
 80093f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093fa:	b993      	cbnz	r3, 8009422 <_dtoa_r+0x8fa>
 80093fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009400:	0d1b      	lsrs	r3, r3, #20
 8009402:	051b      	lsls	r3, r3, #20
 8009404:	b183      	cbz	r3, 8009428 <_dtoa_r+0x900>
 8009406:	9b04      	ldr	r3, [sp, #16]
 8009408:	3301      	adds	r3, #1
 800940a:	9304      	str	r3, [sp, #16]
 800940c:	9b05      	ldr	r3, [sp, #20]
 800940e:	3301      	adds	r3, #1
 8009410:	9305      	str	r3, [sp, #20]
 8009412:	f04f 0801 	mov.w	r8, #1
 8009416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009418:	2b00      	cmp	r3, #0
 800941a:	f47f af6a 	bne.w	80092f2 <_dtoa_r+0x7ca>
 800941e:	2001      	movs	r0, #1
 8009420:	e76f      	b.n	8009302 <_dtoa_r+0x7da>
 8009422:	f04f 0800 	mov.w	r8, #0
 8009426:	e7f6      	b.n	8009416 <_dtoa_r+0x8ee>
 8009428:	4698      	mov	r8, r3
 800942a:	e7f4      	b.n	8009416 <_dtoa_r+0x8ee>
 800942c:	f43f af7d 	beq.w	800932a <_dtoa_r+0x802>
 8009430:	4618      	mov	r0, r3
 8009432:	301c      	adds	r0, #28
 8009434:	e772      	b.n	800931c <_dtoa_r+0x7f4>
 8009436:	9b03      	ldr	r3, [sp, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	dc37      	bgt.n	80094ac <_dtoa_r+0x984>
 800943c:	9b06      	ldr	r3, [sp, #24]
 800943e:	2b02      	cmp	r3, #2
 8009440:	dd34      	ble.n	80094ac <_dtoa_r+0x984>
 8009442:	9b03      	ldr	r3, [sp, #12]
 8009444:	9302      	str	r3, [sp, #8]
 8009446:	9b02      	ldr	r3, [sp, #8]
 8009448:	b96b      	cbnz	r3, 8009466 <_dtoa_r+0x93e>
 800944a:	4631      	mov	r1, r6
 800944c:	2205      	movs	r2, #5
 800944e:	4620      	mov	r0, r4
 8009450:	f000 ff74 	bl	800a33c <__multadd>
 8009454:	4601      	mov	r1, r0
 8009456:	4606      	mov	r6, r0
 8009458:	ee18 0a10 	vmov	r0, s16
 800945c:	f001 f9d8 	bl	800a810 <__mcmp>
 8009460:	2800      	cmp	r0, #0
 8009462:	f73f adbb 	bgt.w	8008fdc <_dtoa_r+0x4b4>
 8009466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009468:	9d01      	ldr	r5, [sp, #4]
 800946a:	43db      	mvns	r3, r3
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	f04f 0800 	mov.w	r8, #0
 8009472:	4631      	mov	r1, r6
 8009474:	4620      	mov	r0, r4
 8009476:	f000 ff3f 	bl	800a2f8 <_Bfree>
 800947a:	2f00      	cmp	r7, #0
 800947c:	f43f aea4 	beq.w	80091c8 <_dtoa_r+0x6a0>
 8009480:	f1b8 0f00 	cmp.w	r8, #0
 8009484:	d005      	beq.n	8009492 <_dtoa_r+0x96a>
 8009486:	45b8      	cmp	r8, r7
 8009488:	d003      	beq.n	8009492 <_dtoa_r+0x96a>
 800948a:	4641      	mov	r1, r8
 800948c:	4620      	mov	r0, r4
 800948e:	f000 ff33 	bl	800a2f8 <_Bfree>
 8009492:	4639      	mov	r1, r7
 8009494:	4620      	mov	r0, r4
 8009496:	f000 ff2f 	bl	800a2f8 <_Bfree>
 800949a:	e695      	b.n	80091c8 <_dtoa_r+0x6a0>
 800949c:	2600      	movs	r6, #0
 800949e:	4637      	mov	r7, r6
 80094a0:	e7e1      	b.n	8009466 <_dtoa_r+0x93e>
 80094a2:	9700      	str	r7, [sp, #0]
 80094a4:	4637      	mov	r7, r6
 80094a6:	e599      	b.n	8008fdc <_dtoa_r+0x4b4>
 80094a8:	40240000 	.word	0x40240000
 80094ac:	9b08      	ldr	r3, [sp, #32]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 80ca 	beq.w	8009648 <_dtoa_r+0xb20>
 80094b4:	9b03      	ldr	r3, [sp, #12]
 80094b6:	9302      	str	r3, [sp, #8]
 80094b8:	2d00      	cmp	r5, #0
 80094ba:	dd05      	ble.n	80094c8 <_dtoa_r+0x9a0>
 80094bc:	4639      	mov	r1, r7
 80094be:	462a      	mov	r2, r5
 80094c0:	4620      	mov	r0, r4
 80094c2:	f001 f935 	bl	800a730 <__lshift>
 80094c6:	4607      	mov	r7, r0
 80094c8:	f1b8 0f00 	cmp.w	r8, #0
 80094cc:	d05b      	beq.n	8009586 <_dtoa_r+0xa5e>
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 fed1 	bl	800a278 <_Balloc>
 80094d6:	4605      	mov	r5, r0
 80094d8:	b928      	cbnz	r0, 80094e6 <_dtoa_r+0x9be>
 80094da:	4b87      	ldr	r3, [pc, #540]	; (80096f8 <_dtoa_r+0xbd0>)
 80094dc:	4602      	mov	r2, r0
 80094de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094e2:	f7ff bb3b 	b.w	8008b5c <_dtoa_r+0x34>
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	3202      	adds	r2, #2
 80094ea:	0092      	lsls	r2, r2, #2
 80094ec:	f107 010c 	add.w	r1, r7, #12
 80094f0:	300c      	adds	r0, #12
 80094f2:	f000 feb3 	bl	800a25c <memcpy>
 80094f6:	2201      	movs	r2, #1
 80094f8:	4629      	mov	r1, r5
 80094fa:	4620      	mov	r0, r4
 80094fc:	f001 f918 	bl	800a730 <__lshift>
 8009500:	9b01      	ldr	r3, [sp, #4]
 8009502:	f103 0901 	add.w	r9, r3, #1
 8009506:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800950a:	4413      	add	r3, r2
 800950c:	9305      	str	r3, [sp, #20]
 800950e:	f00a 0301 	and.w	r3, sl, #1
 8009512:	46b8      	mov	r8, r7
 8009514:	9304      	str	r3, [sp, #16]
 8009516:	4607      	mov	r7, r0
 8009518:	4631      	mov	r1, r6
 800951a:	ee18 0a10 	vmov	r0, s16
 800951e:	f7ff fa75 	bl	8008a0c <quorem>
 8009522:	4641      	mov	r1, r8
 8009524:	9002      	str	r0, [sp, #8]
 8009526:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800952a:	ee18 0a10 	vmov	r0, s16
 800952e:	f001 f96f 	bl	800a810 <__mcmp>
 8009532:	463a      	mov	r2, r7
 8009534:	9003      	str	r0, [sp, #12]
 8009536:	4631      	mov	r1, r6
 8009538:	4620      	mov	r0, r4
 800953a:	f001 f985 	bl	800a848 <__mdiff>
 800953e:	68c2      	ldr	r2, [r0, #12]
 8009540:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009544:	4605      	mov	r5, r0
 8009546:	bb02      	cbnz	r2, 800958a <_dtoa_r+0xa62>
 8009548:	4601      	mov	r1, r0
 800954a:	ee18 0a10 	vmov	r0, s16
 800954e:	f001 f95f 	bl	800a810 <__mcmp>
 8009552:	4602      	mov	r2, r0
 8009554:	4629      	mov	r1, r5
 8009556:	4620      	mov	r0, r4
 8009558:	9207      	str	r2, [sp, #28]
 800955a:	f000 fecd 	bl	800a2f8 <_Bfree>
 800955e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009562:	ea43 0102 	orr.w	r1, r3, r2
 8009566:	9b04      	ldr	r3, [sp, #16]
 8009568:	430b      	orrs	r3, r1
 800956a:	464d      	mov	r5, r9
 800956c:	d10f      	bne.n	800958e <_dtoa_r+0xa66>
 800956e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009572:	d02a      	beq.n	80095ca <_dtoa_r+0xaa2>
 8009574:	9b03      	ldr	r3, [sp, #12]
 8009576:	2b00      	cmp	r3, #0
 8009578:	dd02      	ble.n	8009580 <_dtoa_r+0xa58>
 800957a:	9b02      	ldr	r3, [sp, #8]
 800957c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009580:	f88b a000 	strb.w	sl, [fp]
 8009584:	e775      	b.n	8009472 <_dtoa_r+0x94a>
 8009586:	4638      	mov	r0, r7
 8009588:	e7ba      	b.n	8009500 <_dtoa_r+0x9d8>
 800958a:	2201      	movs	r2, #1
 800958c:	e7e2      	b.n	8009554 <_dtoa_r+0xa2c>
 800958e:	9b03      	ldr	r3, [sp, #12]
 8009590:	2b00      	cmp	r3, #0
 8009592:	db04      	blt.n	800959e <_dtoa_r+0xa76>
 8009594:	9906      	ldr	r1, [sp, #24]
 8009596:	430b      	orrs	r3, r1
 8009598:	9904      	ldr	r1, [sp, #16]
 800959a:	430b      	orrs	r3, r1
 800959c:	d122      	bne.n	80095e4 <_dtoa_r+0xabc>
 800959e:	2a00      	cmp	r2, #0
 80095a0:	ddee      	ble.n	8009580 <_dtoa_r+0xa58>
 80095a2:	ee18 1a10 	vmov	r1, s16
 80095a6:	2201      	movs	r2, #1
 80095a8:	4620      	mov	r0, r4
 80095aa:	f001 f8c1 	bl	800a730 <__lshift>
 80095ae:	4631      	mov	r1, r6
 80095b0:	ee08 0a10 	vmov	s16, r0
 80095b4:	f001 f92c 	bl	800a810 <__mcmp>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	dc03      	bgt.n	80095c4 <_dtoa_r+0xa9c>
 80095bc:	d1e0      	bne.n	8009580 <_dtoa_r+0xa58>
 80095be:	f01a 0f01 	tst.w	sl, #1
 80095c2:	d0dd      	beq.n	8009580 <_dtoa_r+0xa58>
 80095c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095c8:	d1d7      	bne.n	800957a <_dtoa_r+0xa52>
 80095ca:	2339      	movs	r3, #57	; 0x39
 80095cc:	f88b 3000 	strb.w	r3, [fp]
 80095d0:	462b      	mov	r3, r5
 80095d2:	461d      	mov	r5, r3
 80095d4:	3b01      	subs	r3, #1
 80095d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095da:	2a39      	cmp	r2, #57	; 0x39
 80095dc:	d071      	beq.n	80096c2 <_dtoa_r+0xb9a>
 80095de:	3201      	adds	r2, #1
 80095e0:	701a      	strb	r2, [r3, #0]
 80095e2:	e746      	b.n	8009472 <_dtoa_r+0x94a>
 80095e4:	2a00      	cmp	r2, #0
 80095e6:	dd07      	ble.n	80095f8 <_dtoa_r+0xad0>
 80095e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095ec:	d0ed      	beq.n	80095ca <_dtoa_r+0xaa2>
 80095ee:	f10a 0301 	add.w	r3, sl, #1
 80095f2:	f88b 3000 	strb.w	r3, [fp]
 80095f6:	e73c      	b.n	8009472 <_dtoa_r+0x94a>
 80095f8:	9b05      	ldr	r3, [sp, #20]
 80095fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80095fe:	4599      	cmp	r9, r3
 8009600:	d047      	beq.n	8009692 <_dtoa_r+0xb6a>
 8009602:	ee18 1a10 	vmov	r1, s16
 8009606:	2300      	movs	r3, #0
 8009608:	220a      	movs	r2, #10
 800960a:	4620      	mov	r0, r4
 800960c:	f000 fe96 	bl	800a33c <__multadd>
 8009610:	45b8      	cmp	r8, r7
 8009612:	ee08 0a10 	vmov	s16, r0
 8009616:	f04f 0300 	mov.w	r3, #0
 800961a:	f04f 020a 	mov.w	r2, #10
 800961e:	4641      	mov	r1, r8
 8009620:	4620      	mov	r0, r4
 8009622:	d106      	bne.n	8009632 <_dtoa_r+0xb0a>
 8009624:	f000 fe8a 	bl	800a33c <__multadd>
 8009628:	4680      	mov	r8, r0
 800962a:	4607      	mov	r7, r0
 800962c:	f109 0901 	add.w	r9, r9, #1
 8009630:	e772      	b.n	8009518 <_dtoa_r+0x9f0>
 8009632:	f000 fe83 	bl	800a33c <__multadd>
 8009636:	4639      	mov	r1, r7
 8009638:	4680      	mov	r8, r0
 800963a:	2300      	movs	r3, #0
 800963c:	220a      	movs	r2, #10
 800963e:	4620      	mov	r0, r4
 8009640:	f000 fe7c 	bl	800a33c <__multadd>
 8009644:	4607      	mov	r7, r0
 8009646:	e7f1      	b.n	800962c <_dtoa_r+0xb04>
 8009648:	9b03      	ldr	r3, [sp, #12]
 800964a:	9302      	str	r3, [sp, #8]
 800964c:	9d01      	ldr	r5, [sp, #4]
 800964e:	ee18 0a10 	vmov	r0, s16
 8009652:	4631      	mov	r1, r6
 8009654:	f7ff f9da 	bl	8008a0c <quorem>
 8009658:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800965c:	9b01      	ldr	r3, [sp, #4]
 800965e:	f805 ab01 	strb.w	sl, [r5], #1
 8009662:	1aea      	subs	r2, r5, r3
 8009664:	9b02      	ldr	r3, [sp, #8]
 8009666:	4293      	cmp	r3, r2
 8009668:	dd09      	ble.n	800967e <_dtoa_r+0xb56>
 800966a:	ee18 1a10 	vmov	r1, s16
 800966e:	2300      	movs	r3, #0
 8009670:	220a      	movs	r2, #10
 8009672:	4620      	mov	r0, r4
 8009674:	f000 fe62 	bl	800a33c <__multadd>
 8009678:	ee08 0a10 	vmov	s16, r0
 800967c:	e7e7      	b.n	800964e <_dtoa_r+0xb26>
 800967e:	9b02      	ldr	r3, [sp, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	bfc8      	it	gt
 8009684:	461d      	movgt	r5, r3
 8009686:	9b01      	ldr	r3, [sp, #4]
 8009688:	bfd8      	it	le
 800968a:	2501      	movle	r5, #1
 800968c:	441d      	add	r5, r3
 800968e:	f04f 0800 	mov.w	r8, #0
 8009692:	ee18 1a10 	vmov	r1, s16
 8009696:	2201      	movs	r2, #1
 8009698:	4620      	mov	r0, r4
 800969a:	f001 f849 	bl	800a730 <__lshift>
 800969e:	4631      	mov	r1, r6
 80096a0:	ee08 0a10 	vmov	s16, r0
 80096a4:	f001 f8b4 	bl	800a810 <__mcmp>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	dc91      	bgt.n	80095d0 <_dtoa_r+0xaa8>
 80096ac:	d102      	bne.n	80096b4 <_dtoa_r+0xb8c>
 80096ae:	f01a 0f01 	tst.w	sl, #1
 80096b2:	d18d      	bne.n	80095d0 <_dtoa_r+0xaa8>
 80096b4:	462b      	mov	r3, r5
 80096b6:	461d      	mov	r5, r3
 80096b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096bc:	2a30      	cmp	r2, #48	; 0x30
 80096be:	d0fa      	beq.n	80096b6 <_dtoa_r+0xb8e>
 80096c0:	e6d7      	b.n	8009472 <_dtoa_r+0x94a>
 80096c2:	9a01      	ldr	r2, [sp, #4]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d184      	bne.n	80095d2 <_dtoa_r+0xaaa>
 80096c8:	9b00      	ldr	r3, [sp, #0]
 80096ca:	3301      	adds	r3, #1
 80096cc:	9300      	str	r3, [sp, #0]
 80096ce:	2331      	movs	r3, #49	; 0x31
 80096d0:	7013      	strb	r3, [r2, #0]
 80096d2:	e6ce      	b.n	8009472 <_dtoa_r+0x94a>
 80096d4:	4b09      	ldr	r3, [pc, #36]	; (80096fc <_dtoa_r+0xbd4>)
 80096d6:	f7ff ba95 	b.w	8008c04 <_dtoa_r+0xdc>
 80096da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f47f aa6e 	bne.w	8008bbe <_dtoa_r+0x96>
 80096e2:	4b07      	ldr	r3, [pc, #28]	; (8009700 <_dtoa_r+0xbd8>)
 80096e4:	f7ff ba8e 	b.w	8008c04 <_dtoa_r+0xdc>
 80096e8:	9b02      	ldr	r3, [sp, #8]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	dcae      	bgt.n	800964c <_dtoa_r+0xb24>
 80096ee:	9b06      	ldr	r3, [sp, #24]
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	f73f aea8 	bgt.w	8009446 <_dtoa_r+0x91e>
 80096f6:	e7a9      	b.n	800964c <_dtoa_r+0xb24>
 80096f8:	0800be40 	.word	0x0800be40
 80096fc:	0800bc40 	.word	0x0800bc40
 8009700:	0800bdc1 	.word	0x0800bdc1

08009704 <__sflush_r>:
 8009704:	898a      	ldrh	r2, [r1, #12]
 8009706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800970a:	4605      	mov	r5, r0
 800970c:	0710      	lsls	r0, r2, #28
 800970e:	460c      	mov	r4, r1
 8009710:	d458      	bmi.n	80097c4 <__sflush_r+0xc0>
 8009712:	684b      	ldr	r3, [r1, #4]
 8009714:	2b00      	cmp	r3, #0
 8009716:	dc05      	bgt.n	8009724 <__sflush_r+0x20>
 8009718:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800971a:	2b00      	cmp	r3, #0
 800971c:	dc02      	bgt.n	8009724 <__sflush_r+0x20>
 800971e:	2000      	movs	r0, #0
 8009720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009726:	2e00      	cmp	r6, #0
 8009728:	d0f9      	beq.n	800971e <__sflush_r+0x1a>
 800972a:	2300      	movs	r3, #0
 800972c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009730:	682f      	ldr	r7, [r5, #0]
 8009732:	602b      	str	r3, [r5, #0]
 8009734:	d032      	beq.n	800979c <__sflush_r+0x98>
 8009736:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	075a      	lsls	r2, r3, #29
 800973c:	d505      	bpl.n	800974a <__sflush_r+0x46>
 800973e:	6863      	ldr	r3, [r4, #4]
 8009740:	1ac0      	subs	r0, r0, r3
 8009742:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009744:	b10b      	cbz	r3, 800974a <__sflush_r+0x46>
 8009746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009748:	1ac0      	subs	r0, r0, r3
 800974a:	2300      	movs	r3, #0
 800974c:	4602      	mov	r2, r0
 800974e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009750:	6a21      	ldr	r1, [r4, #32]
 8009752:	4628      	mov	r0, r5
 8009754:	47b0      	blx	r6
 8009756:	1c43      	adds	r3, r0, #1
 8009758:	89a3      	ldrh	r3, [r4, #12]
 800975a:	d106      	bne.n	800976a <__sflush_r+0x66>
 800975c:	6829      	ldr	r1, [r5, #0]
 800975e:	291d      	cmp	r1, #29
 8009760:	d82c      	bhi.n	80097bc <__sflush_r+0xb8>
 8009762:	4a2a      	ldr	r2, [pc, #168]	; (800980c <__sflush_r+0x108>)
 8009764:	40ca      	lsrs	r2, r1
 8009766:	07d6      	lsls	r6, r2, #31
 8009768:	d528      	bpl.n	80097bc <__sflush_r+0xb8>
 800976a:	2200      	movs	r2, #0
 800976c:	6062      	str	r2, [r4, #4]
 800976e:	04d9      	lsls	r1, r3, #19
 8009770:	6922      	ldr	r2, [r4, #16]
 8009772:	6022      	str	r2, [r4, #0]
 8009774:	d504      	bpl.n	8009780 <__sflush_r+0x7c>
 8009776:	1c42      	adds	r2, r0, #1
 8009778:	d101      	bne.n	800977e <__sflush_r+0x7a>
 800977a:	682b      	ldr	r3, [r5, #0]
 800977c:	b903      	cbnz	r3, 8009780 <__sflush_r+0x7c>
 800977e:	6560      	str	r0, [r4, #84]	; 0x54
 8009780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009782:	602f      	str	r7, [r5, #0]
 8009784:	2900      	cmp	r1, #0
 8009786:	d0ca      	beq.n	800971e <__sflush_r+0x1a>
 8009788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800978c:	4299      	cmp	r1, r3
 800978e:	d002      	beq.n	8009796 <__sflush_r+0x92>
 8009790:	4628      	mov	r0, r5
 8009792:	f001 fa49 	bl	800ac28 <_free_r>
 8009796:	2000      	movs	r0, #0
 8009798:	6360      	str	r0, [r4, #52]	; 0x34
 800979a:	e7c1      	b.n	8009720 <__sflush_r+0x1c>
 800979c:	6a21      	ldr	r1, [r4, #32]
 800979e:	2301      	movs	r3, #1
 80097a0:	4628      	mov	r0, r5
 80097a2:	47b0      	blx	r6
 80097a4:	1c41      	adds	r1, r0, #1
 80097a6:	d1c7      	bne.n	8009738 <__sflush_r+0x34>
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d0c4      	beq.n	8009738 <__sflush_r+0x34>
 80097ae:	2b1d      	cmp	r3, #29
 80097b0:	d001      	beq.n	80097b6 <__sflush_r+0xb2>
 80097b2:	2b16      	cmp	r3, #22
 80097b4:	d101      	bne.n	80097ba <__sflush_r+0xb6>
 80097b6:	602f      	str	r7, [r5, #0]
 80097b8:	e7b1      	b.n	800971e <__sflush_r+0x1a>
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097c0:	81a3      	strh	r3, [r4, #12]
 80097c2:	e7ad      	b.n	8009720 <__sflush_r+0x1c>
 80097c4:	690f      	ldr	r7, [r1, #16]
 80097c6:	2f00      	cmp	r7, #0
 80097c8:	d0a9      	beq.n	800971e <__sflush_r+0x1a>
 80097ca:	0793      	lsls	r3, r2, #30
 80097cc:	680e      	ldr	r6, [r1, #0]
 80097ce:	bf08      	it	eq
 80097d0:	694b      	ldreq	r3, [r1, #20]
 80097d2:	600f      	str	r7, [r1, #0]
 80097d4:	bf18      	it	ne
 80097d6:	2300      	movne	r3, #0
 80097d8:	eba6 0807 	sub.w	r8, r6, r7
 80097dc:	608b      	str	r3, [r1, #8]
 80097de:	f1b8 0f00 	cmp.w	r8, #0
 80097e2:	dd9c      	ble.n	800971e <__sflush_r+0x1a>
 80097e4:	6a21      	ldr	r1, [r4, #32]
 80097e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097e8:	4643      	mov	r3, r8
 80097ea:	463a      	mov	r2, r7
 80097ec:	4628      	mov	r0, r5
 80097ee:	47b0      	blx	r6
 80097f0:	2800      	cmp	r0, #0
 80097f2:	dc06      	bgt.n	8009802 <__sflush_r+0xfe>
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097fa:	81a3      	strh	r3, [r4, #12]
 80097fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009800:	e78e      	b.n	8009720 <__sflush_r+0x1c>
 8009802:	4407      	add	r7, r0
 8009804:	eba8 0800 	sub.w	r8, r8, r0
 8009808:	e7e9      	b.n	80097de <__sflush_r+0xda>
 800980a:	bf00      	nop
 800980c:	20400001 	.word	0x20400001

08009810 <_fflush_r>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	690b      	ldr	r3, [r1, #16]
 8009814:	4605      	mov	r5, r0
 8009816:	460c      	mov	r4, r1
 8009818:	b913      	cbnz	r3, 8009820 <_fflush_r+0x10>
 800981a:	2500      	movs	r5, #0
 800981c:	4628      	mov	r0, r5
 800981e:	bd38      	pop	{r3, r4, r5, pc}
 8009820:	b118      	cbz	r0, 800982a <_fflush_r+0x1a>
 8009822:	6983      	ldr	r3, [r0, #24]
 8009824:	b90b      	cbnz	r3, 800982a <_fflush_r+0x1a>
 8009826:	f000 f887 	bl	8009938 <__sinit>
 800982a:	4b14      	ldr	r3, [pc, #80]	; (800987c <_fflush_r+0x6c>)
 800982c:	429c      	cmp	r4, r3
 800982e:	d11b      	bne.n	8009868 <_fflush_r+0x58>
 8009830:	686c      	ldr	r4, [r5, #4]
 8009832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d0ef      	beq.n	800981a <_fflush_r+0xa>
 800983a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800983c:	07d0      	lsls	r0, r2, #31
 800983e:	d404      	bmi.n	800984a <_fflush_r+0x3a>
 8009840:	0599      	lsls	r1, r3, #22
 8009842:	d402      	bmi.n	800984a <_fflush_r+0x3a>
 8009844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009846:	f000 fc88 	bl	800a15a <__retarget_lock_acquire_recursive>
 800984a:	4628      	mov	r0, r5
 800984c:	4621      	mov	r1, r4
 800984e:	f7ff ff59 	bl	8009704 <__sflush_r>
 8009852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009854:	07da      	lsls	r2, r3, #31
 8009856:	4605      	mov	r5, r0
 8009858:	d4e0      	bmi.n	800981c <_fflush_r+0xc>
 800985a:	89a3      	ldrh	r3, [r4, #12]
 800985c:	059b      	lsls	r3, r3, #22
 800985e:	d4dd      	bmi.n	800981c <_fflush_r+0xc>
 8009860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009862:	f000 fc7b 	bl	800a15c <__retarget_lock_release_recursive>
 8009866:	e7d9      	b.n	800981c <_fflush_r+0xc>
 8009868:	4b05      	ldr	r3, [pc, #20]	; (8009880 <_fflush_r+0x70>)
 800986a:	429c      	cmp	r4, r3
 800986c:	d101      	bne.n	8009872 <_fflush_r+0x62>
 800986e:	68ac      	ldr	r4, [r5, #8]
 8009870:	e7df      	b.n	8009832 <_fflush_r+0x22>
 8009872:	4b04      	ldr	r3, [pc, #16]	; (8009884 <_fflush_r+0x74>)
 8009874:	429c      	cmp	r4, r3
 8009876:	bf08      	it	eq
 8009878:	68ec      	ldreq	r4, [r5, #12]
 800987a:	e7da      	b.n	8009832 <_fflush_r+0x22>
 800987c:	0800be74 	.word	0x0800be74
 8009880:	0800be94 	.word	0x0800be94
 8009884:	0800be54 	.word	0x0800be54

08009888 <std>:
 8009888:	2300      	movs	r3, #0
 800988a:	b510      	push	{r4, lr}
 800988c:	4604      	mov	r4, r0
 800988e:	e9c0 3300 	strd	r3, r3, [r0]
 8009892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009896:	6083      	str	r3, [r0, #8]
 8009898:	8181      	strh	r1, [r0, #12]
 800989a:	6643      	str	r3, [r0, #100]	; 0x64
 800989c:	81c2      	strh	r2, [r0, #14]
 800989e:	6183      	str	r3, [r0, #24]
 80098a0:	4619      	mov	r1, r3
 80098a2:	2208      	movs	r2, #8
 80098a4:	305c      	adds	r0, #92	; 0x5c
 80098a6:	f7fd fa75 	bl	8006d94 <memset>
 80098aa:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <std+0x38>)
 80098ac:	6263      	str	r3, [r4, #36]	; 0x24
 80098ae:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <std+0x3c>)
 80098b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80098b2:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <std+0x40>)
 80098b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098b6:	4b05      	ldr	r3, [pc, #20]	; (80098cc <std+0x44>)
 80098b8:	6224      	str	r4, [r4, #32]
 80098ba:	6323      	str	r3, [r4, #48]	; 0x30
 80098bc:	bd10      	pop	{r4, pc}
 80098be:	bf00      	nop
 80098c0:	0800b389 	.word	0x0800b389
 80098c4:	0800b3ab 	.word	0x0800b3ab
 80098c8:	0800b3e3 	.word	0x0800b3e3
 80098cc:	0800b407 	.word	0x0800b407

080098d0 <_cleanup_r>:
 80098d0:	4901      	ldr	r1, [pc, #4]	; (80098d8 <_cleanup_r+0x8>)
 80098d2:	f000 b8af 	b.w	8009a34 <_fwalk_reent>
 80098d6:	bf00      	nop
 80098d8:	08009811 	.word	0x08009811

080098dc <__sfmoreglue>:
 80098dc:	b570      	push	{r4, r5, r6, lr}
 80098de:	2268      	movs	r2, #104	; 0x68
 80098e0:	1e4d      	subs	r5, r1, #1
 80098e2:	4355      	muls	r5, r2
 80098e4:	460e      	mov	r6, r1
 80098e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80098ea:	f001 fa09 	bl	800ad00 <_malloc_r>
 80098ee:	4604      	mov	r4, r0
 80098f0:	b140      	cbz	r0, 8009904 <__sfmoreglue+0x28>
 80098f2:	2100      	movs	r1, #0
 80098f4:	e9c0 1600 	strd	r1, r6, [r0]
 80098f8:	300c      	adds	r0, #12
 80098fa:	60a0      	str	r0, [r4, #8]
 80098fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009900:	f7fd fa48 	bl	8006d94 <memset>
 8009904:	4620      	mov	r0, r4
 8009906:	bd70      	pop	{r4, r5, r6, pc}

08009908 <__sfp_lock_acquire>:
 8009908:	4801      	ldr	r0, [pc, #4]	; (8009910 <__sfp_lock_acquire+0x8>)
 800990a:	f000 bc26 	b.w	800a15a <__retarget_lock_acquire_recursive>
 800990e:	bf00      	nop
 8009910:	200006a1 	.word	0x200006a1

08009914 <__sfp_lock_release>:
 8009914:	4801      	ldr	r0, [pc, #4]	; (800991c <__sfp_lock_release+0x8>)
 8009916:	f000 bc21 	b.w	800a15c <__retarget_lock_release_recursive>
 800991a:	bf00      	nop
 800991c:	200006a1 	.word	0x200006a1

08009920 <__sinit_lock_acquire>:
 8009920:	4801      	ldr	r0, [pc, #4]	; (8009928 <__sinit_lock_acquire+0x8>)
 8009922:	f000 bc1a 	b.w	800a15a <__retarget_lock_acquire_recursive>
 8009926:	bf00      	nop
 8009928:	200006a2 	.word	0x200006a2

0800992c <__sinit_lock_release>:
 800992c:	4801      	ldr	r0, [pc, #4]	; (8009934 <__sinit_lock_release+0x8>)
 800992e:	f000 bc15 	b.w	800a15c <__retarget_lock_release_recursive>
 8009932:	bf00      	nop
 8009934:	200006a2 	.word	0x200006a2

08009938 <__sinit>:
 8009938:	b510      	push	{r4, lr}
 800993a:	4604      	mov	r4, r0
 800993c:	f7ff fff0 	bl	8009920 <__sinit_lock_acquire>
 8009940:	69a3      	ldr	r3, [r4, #24]
 8009942:	b11b      	cbz	r3, 800994c <__sinit+0x14>
 8009944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009948:	f7ff bff0 	b.w	800992c <__sinit_lock_release>
 800994c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009950:	6523      	str	r3, [r4, #80]	; 0x50
 8009952:	4b13      	ldr	r3, [pc, #76]	; (80099a0 <__sinit+0x68>)
 8009954:	4a13      	ldr	r2, [pc, #76]	; (80099a4 <__sinit+0x6c>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	62a2      	str	r2, [r4, #40]	; 0x28
 800995a:	42a3      	cmp	r3, r4
 800995c:	bf04      	itt	eq
 800995e:	2301      	moveq	r3, #1
 8009960:	61a3      	streq	r3, [r4, #24]
 8009962:	4620      	mov	r0, r4
 8009964:	f000 f820 	bl	80099a8 <__sfp>
 8009968:	6060      	str	r0, [r4, #4]
 800996a:	4620      	mov	r0, r4
 800996c:	f000 f81c 	bl	80099a8 <__sfp>
 8009970:	60a0      	str	r0, [r4, #8]
 8009972:	4620      	mov	r0, r4
 8009974:	f000 f818 	bl	80099a8 <__sfp>
 8009978:	2200      	movs	r2, #0
 800997a:	60e0      	str	r0, [r4, #12]
 800997c:	2104      	movs	r1, #4
 800997e:	6860      	ldr	r0, [r4, #4]
 8009980:	f7ff ff82 	bl	8009888 <std>
 8009984:	68a0      	ldr	r0, [r4, #8]
 8009986:	2201      	movs	r2, #1
 8009988:	2109      	movs	r1, #9
 800998a:	f7ff ff7d 	bl	8009888 <std>
 800998e:	68e0      	ldr	r0, [r4, #12]
 8009990:	2202      	movs	r2, #2
 8009992:	2112      	movs	r1, #18
 8009994:	f7ff ff78 	bl	8009888 <std>
 8009998:	2301      	movs	r3, #1
 800999a:	61a3      	str	r3, [r4, #24]
 800999c:	e7d2      	b.n	8009944 <__sinit+0xc>
 800999e:	bf00      	nop
 80099a0:	0800bc2c 	.word	0x0800bc2c
 80099a4:	080098d1 	.word	0x080098d1

080099a8 <__sfp>:
 80099a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099aa:	4607      	mov	r7, r0
 80099ac:	f7ff ffac 	bl	8009908 <__sfp_lock_acquire>
 80099b0:	4b1e      	ldr	r3, [pc, #120]	; (8009a2c <__sfp+0x84>)
 80099b2:	681e      	ldr	r6, [r3, #0]
 80099b4:	69b3      	ldr	r3, [r6, #24]
 80099b6:	b913      	cbnz	r3, 80099be <__sfp+0x16>
 80099b8:	4630      	mov	r0, r6
 80099ba:	f7ff ffbd 	bl	8009938 <__sinit>
 80099be:	3648      	adds	r6, #72	; 0x48
 80099c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80099c4:	3b01      	subs	r3, #1
 80099c6:	d503      	bpl.n	80099d0 <__sfp+0x28>
 80099c8:	6833      	ldr	r3, [r6, #0]
 80099ca:	b30b      	cbz	r3, 8009a10 <__sfp+0x68>
 80099cc:	6836      	ldr	r6, [r6, #0]
 80099ce:	e7f7      	b.n	80099c0 <__sfp+0x18>
 80099d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80099d4:	b9d5      	cbnz	r5, 8009a0c <__sfp+0x64>
 80099d6:	4b16      	ldr	r3, [pc, #88]	; (8009a30 <__sfp+0x88>)
 80099d8:	60e3      	str	r3, [r4, #12]
 80099da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099de:	6665      	str	r5, [r4, #100]	; 0x64
 80099e0:	f000 fbba 	bl	800a158 <__retarget_lock_init_recursive>
 80099e4:	f7ff ff96 	bl	8009914 <__sfp_lock_release>
 80099e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80099ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80099f0:	6025      	str	r5, [r4, #0]
 80099f2:	61a5      	str	r5, [r4, #24]
 80099f4:	2208      	movs	r2, #8
 80099f6:	4629      	mov	r1, r5
 80099f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80099fc:	f7fd f9ca 	bl	8006d94 <memset>
 8009a00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a08:	4620      	mov	r0, r4
 8009a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a0c:	3468      	adds	r4, #104	; 0x68
 8009a0e:	e7d9      	b.n	80099c4 <__sfp+0x1c>
 8009a10:	2104      	movs	r1, #4
 8009a12:	4638      	mov	r0, r7
 8009a14:	f7ff ff62 	bl	80098dc <__sfmoreglue>
 8009a18:	4604      	mov	r4, r0
 8009a1a:	6030      	str	r0, [r6, #0]
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d1d5      	bne.n	80099cc <__sfp+0x24>
 8009a20:	f7ff ff78 	bl	8009914 <__sfp_lock_release>
 8009a24:	230c      	movs	r3, #12
 8009a26:	603b      	str	r3, [r7, #0]
 8009a28:	e7ee      	b.n	8009a08 <__sfp+0x60>
 8009a2a:	bf00      	nop
 8009a2c:	0800bc2c 	.word	0x0800bc2c
 8009a30:	ffff0001 	.word	0xffff0001

08009a34 <_fwalk_reent>:
 8009a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a38:	4606      	mov	r6, r0
 8009a3a:	4688      	mov	r8, r1
 8009a3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a40:	2700      	movs	r7, #0
 8009a42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a46:	f1b9 0901 	subs.w	r9, r9, #1
 8009a4a:	d505      	bpl.n	8009a58 <_fwalk_reent+0x24>
 8009a4c:	6824      	ldr	r4, [r4, #0]
 8009a4e:	2c00      	cmp	r4, #0
 8009a50:	d1f7      	bne.n	8009a42 <_fwalk_reent+0xe>
 8009a52:	4638      	mov	r0, r7
 8009a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a58:	89ab      	ldrh	r3, [r5, #12]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d907      	bls.n	8009a6e <_fwalk_reent+0x3a>
 8009a5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a62:	3301      	adds	r3, #1
 8009a64:	d003      	beq.n	8009a6e <_fwalk_reent+0x3a>
 8009a66:	4629      	mov	r1, r5
 8009a68:	4630      	mov	r0, r6
 8009a6a:	47c0      	blx	r8
 8009a6c:	4307      	orrs	r7, r0
 8009a6e:	3568      	adds	r5, #104	; 0x68
 8009a70:	e7e9      	b.n	8009a46 <_fwalk_reent+0x12>

08009a72 <rshift>:
 8009a72:	6903      	ldr	r3, [r0, #16]
 8009a74:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a7c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a80:	f100 0414 	add.w	r4, r0, #20
 8009a84:	dd45      	ble.n	8009b12 <rshift+0xa0>
 8009a86:	f011 011f 	ands.w	r1, r1, #31
 8009a8a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a8e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a92:	d10c      	bne.n	8009aae <rshift+0x3c>
 8009a94:	f100 0710 	add.w	r7, r0, #16
 8009a98:	4629      	mov	r1, r5
 8009a9a:	42b1      	cmp	r1, r6
 8009a9c:	d334      	bcc.n	8009b08 <rshift+0x96>
 8009a9e:	1a9b      	subs	r3, r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	1eea      	subs	r2, r5, #3
 8009aa4:	4296      	cmp	r6, r2
 8009aa6:	bf38      	it	cc
 8009aa8:	2300      	movcc	r3, #0
 8009aaa:	4423      	add	r3, r4
 8009aac:	e015      	b.n	8009ada <rshift+0x68>
 8009aae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ab2:	f1c1 0820 	rsb	r8, r1, #32
 8009ab6:	40cf      	lsrs	r7, r1
 8009ab8:	f105 0e04 	add.w	lr, r5, #4
 8009abc:	46a1      	mov	r9, r4
 8009abe:	4576      	cmp	r6, lr
 8009ac0:	46f4      	mov	ip, lr
 8009ac2:	d815      	bhi.n	8009af0 <rshift+0x7e>
 8009ac4:	1a9a      	subs	r2, r3, r2
 8009ac6:	0092      	lsls	r2, r2, #2
 8009ac8:	3a04      	subs	r2, #4
 8009aca:	3501      	adds	r5, #1
 8009acc:	42ae      	cmp	r6, r5
 8009ace:	bf38      	it	cc
 8009ad0:	2200      	movcc	r2, #0
 8009ad2:	18a3      	adds	r3, r4, r2
 8009ad4:	50a7      	str	r7, [r4, r2]
 8009ad6:	b107      	cbz	r7, 8009ada <rshift+0x68>
 8009ad8:	3304      	adds	r3, #4
 8009ada:	1b1a      	subs	r2, r3, r4
 8009adc:	42a3      	cmp	r3, r4
 8009ade:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009ae2:	bf08      	it	eq
 8009ae4:	2300      	moveq	r3, #0
 8009ae6:	6102      	str	r2, [r0, #16]
 8009ae8:	bf08      	it	eq
 8009aea:	6143      	streq	r3, [r0, #20]
 8009aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009af0:	f8dc c000 	ldr.w	ip, [ip]
 8009af4:	fa0c fc08 	lsl.w	ip, ip, r8
 8009af8:	ea4c 0707 	orr.w	r7, ip, r7
 8009afc:	f849 7b04 	str.w	r7, [r9], #4
 8009b00:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b04:	40cf      	lsrs	r7, r1
 8009b06:	e7da      	b.n	8009abe <rshift+0x4c>
 8009b08:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b0c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b10:	e7c3      	b.n	8009a9a <rshift+0x28>
 8009b12:	4623      	mov	r3, r4
 8009b14:	e7e1      	b.n	8009ada <rshift+0x68>

08009b16 <__hexdig_fun>:
 8009b16:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b1a:	2b09      	cmp	r3, #9
 8009b1c:	d802      	bhi.n	8009b24 <__hexdig_fun+0xe>
 8009b1e:	3820      	subs	r0, #32
 8009b20:	b2c0      	uxtb	r0, r0
 8009b22:	4770      	bx	lr
 8009b24:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009b28:	2b05      	cmp	r3, #5
 8009b2a:	d801      	bhi.n	8009b30 <__hexdig_fun+0x1a>
 8009b2c:	3847      	subs	r0, #71	; 0x47
 8009b2e:	e7f7      	b.n	8009b20 <__hexdig_fun+0xa>
 8009b30:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009b34:	2b05      	cmp	r3, #5
 8009b36:	d801      	bhi.n	8009b3c <__hexdig_fun+0x26>
 8009b38:	3827      	subs	r0, #39	; 0x27
 8009b3a:	e7f1      	b.n	8009b20 <__hexdig_fun+0xa>
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	4770      	bx	lr

08009b40 <__gethex>:
 8009b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b44:	ed2d 8b02 	vpush	{d8}
 8009b48:	b089      	sub	sp, #36	; 0x24
 8009b4a:	ee08 0a10 	vmov	s16, r0
 8009b4e:	9304      	str	r3, [sp, #16]
 8009b50:	4bb4      	ldr	r3, [pc, #720]	; (8009e24 <__gethex+0x2e4>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	9301      	str	r3, [sp, #4]
 8009b56:	4618      	mov	r0, r3
 8009b58:	468b      	mov	fp, r1
 8009b5a:	4690      	mov	r8, r2
 8009b5c:	f7f6 fb10 	bl	8000180 <strlen>
 8009b60:	9b01      	ldr	r3, [sp, #4]
 8009b62:	f8db 2000 	ldr.w	r2, [fp]
 8009b66:	4403      	add	r3, r0
 8009b68:	4682      	mov	sl, r0
 8009b6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009b6e:	9305      	str	r3, [sp, #20]
 8009b70:	1c93      	adds	r3, r2, #2
 8009b72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009b76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009b7a:	32fe      	adds	r2, #254	; 0xfe
 8009b7c:	18d1      	adds	r1, r2, r3
 8009b7e:	461f      	mov	r7, r3
 8009b80:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b84:	9100      	str	r1, [sp, #0]
 8009b86:	2830      	cmp	r0, #48	; 0x30
 8009b88:	d0f8      	beq.n	8009b7c <__gethex+0x3c>
 8009b8a:	f7ff ffc4 	bl	8009b16 <__hexdig_fun>
 8009b8e:	4604      	mov	r4, r0
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d13a      	bne.n	8009c0a <__gethex+0xca>
 8009b94:	9901      	ldr	r1, [sp, #4]
 8009b96:	4652      	mov	r2, sl
 8009b98:	4638      	mov	r0, r7
 8009b9a:	f001 fc38 	bl	800b40e <strncmp>
 8009b9e:	4605      	mov	r5, r0
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d168      	bne.n	8009c76 <__gethex+0x136>
 8009ba4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009ba8:	eb07 060a 	add.w	r6, r7, sl
 8009bac:	f7ff ffb3 	bl	8009b16 <__hexdig_fun>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d062      	beq.n	8009c7a <__gethex+0x13a>
 8009bb4:	4633      	mov	r3, r6
 8009bb6:	7818      	ldrb	r0, [r3, #0]
 8009bb8:	2830      	cmp	r0, #48	; 0x30
 8009bba:	461f      	mov	r7, r3
 8009bbc:	f103 0301 	add.w	r3, r3, #1
 8009bc0:	d0f9      	beq.n	8009bb6 <__gethex+0x76>
 8009bc2:	f7ff ffa8 	bl	8009b16 <__hexdig_fun>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	fab0 f480 	clz	r4, r0
 8009bcc:	0964      	lsrs	r4, r4, #5
 8009bce:	4635      	mov	r5, r6
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	463a      	mov	r2, r7
 8009bd4:	4616      	mov	r6, r2
 8009bd6:	3201      	adds	r2, #1
 8009bd8:	7830      	ldrb	r0, [r6, #0]
 8009bda:	f7ff ff9c 	bl	8009b16 <__hexdig_fun>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d1f8      	bne.n	8009bd4 <__gethex+0x94>
 8009be2:	9901      	ldr	r1, [sp, #4]
 8009be4:	4652      	mov	r2, sl
 8009be6:	4630      	mov	r0, r6
 8009be8:	f001 fc11 	bl	800b40e <strncmp>
 8009bec:	b980      	cbnz	r0, 8009c10 <__gethex+0xd0>
 8009bee:	b94d      	cbnz	r5, 8009c04 <__gethex+0xc4>
 8009bf0:	eb06 050a 	add.w	r5, r6, sl
 8009bf4:	462a      	mov	r2, r5
 8009bf6:	4616      	mov	r6, r2
 8009bf8:	3201      	adds	r2, #1
 8009bfa:	7830      	ldrb	r0, [r6, #0]
 8009bfc:	f7ff ff8b 	bl	8009b16 <__hexdig_fun>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d1f8      	bne.n	8009bf6 <__gethex+0xb6>
 8009c04:	1bad      	subs	r5, r5, r6
 8009c06:	00ad      	lsls	r5, r5, #2
 8009c08:	e004      	b.n	8009c14 <__gethex+0xd4>
 8009c0a:	2400      	movs	r4, #0
 8009c0c:	4625      	mov	r5, r4
 8009c0e:	e7e0      	b.n	8009bd2 <__gethex+0x92>
 8009c10:	2d00      	cmp	r5, #0
 8009c12:	d1f7      	bne.n	8009c04 <__gethex+0xc4>
 8009c14:	7833      	ldrb	r3, [r6, #0]
 8009c16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c1a:	2b50      	cmp	r3, #80	; 0x50
 8009c1c:	d13b      	bne.n	8009c96 <__gethex+0x156>
 8009c1e:	7873      	ldrb	r3, [r6, #1]
 8009c20:	2b2b      	cmp	r3, #43	; 0x2b
 8009c22:	d02c      	beq.n	8009c7e <__gethex+0x13e>
 8009c24:	2b2d      	cmp	r3, #45	; 0x2d
 8009c26:	d02e      	beq.n	8009c86 <__gethex+0x146>
 8009c28:	1c71      	adds	r1, r6, #1
 8009c2a:	f04f 0900 	mov.w	r9, #0
 8009c2e:	7808      	ldrb	r0, [r1, #0]
 8009c30:	f7ff ff71 	bl	8009b16 <__hexdig_fun>
 8009c34:	1e43      	subs	r3, r0, #1
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b18      	cmp	r3, #24
 8009c3a:	d82c      	bhi.n	8009c96 <__gethex+0x156>
 8009c3c:	f1a0 0210 	sub.w	r2, r0, #16
 8009c40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c44:	f7ff ff67 	bl	8009b16 <__hexdig_fun>
 8009c48:	1e43      	subs	r3, r0, #1
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b18      	cmp	r3, #24
 8009c4e:	d91d      	bls.n	8009c8c <__gethex+0x14c>
 8009c50:	f1b9 0f00 	cmp.w	r9, #0
 8009c54:	d000      	beq.n	8009c58 <__gethex+0x118>
 8009c56:	4252      	negs	r2, r2
 8009c58:	4415      	add	r5, r2
 8009c5a:	f8cb 1000 	str.w	r1, [fp]
 8009c5e:	b1e4      	cbz	r4, 8009c9a <__gethex+0x15a>
 8009c60:	9b00      	ldr	r3, [sp, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	bf14      	ite	ne
 8009c66:	2700      	movne	r7, #0
 8009c68:	2706      	moveq	r7, #6
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	b009      	add	sp, #36	; 0x24
 8009c6e:	ecbd 8b02 	vpop	{d8}
 8009c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c76:	463e      	mov	r6, r7
 8009c78:	4625      	mov	r5, r4
 8009c7a:	2401      	movs	r4, #1
 8009c7c:	e7ca      	b.n	8009c14 <__gethex+0xd4>
 8009c7e:	f04f 0900 	mov.w	r9, #0
 8009c82:	1cb1      	adds	r1, r6, #2
 8009c84:	e7d3      	b.n	8009c2e <__gethex+0xee>
 8009c86:	f04f 0901 	mov.w	r9, #1
 8009c8a:	e7fa      	b.n	8009c82 <__gethex+0x142>
 8009c8c:	230a      	movs	r3, #10
 8009c8e:	fb03 0202 	mla	r2, r3, r2, r0
 8009c92:	3a10      	subs	r2, #16
 8009c94:	e7d4      	b.n	8009c40 <__gethex+0x100>
 8009c96:	4631      	mov	r1, r6
 8009c98:	e7df      	b.n	8009c5a <__gethex+0x11a>
 8009c9a:	1bf3      	subs	r3, r6, r7
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	2b07      	cmp	r3, #7
 8009ca2:	dc0b      	bgt.n	8009cbc <__gethex+0x17c>
 8009ca4:	ee18 0a10 	vmov	r0, s16
 8009ca8:	f000 fae6 	bl	800a278 <_Balloc>
 8009cac:	4604      	mov	r4, r0
 8009cae:	b940      	cbnz	r0, 8009cc2 <__gethex+0x182>
 8009cb0:	4b5d      	ldr	r3, [pc, #372]	; (8009e28 <__gethex+0x2e8>)
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	21de      	movs	r1, #222	; 0xde
 8009cb6:	485d      	ldr	r0, [pc, #372]	; (8009e2c <__gethex+0x2ec>)
 8009cb8:	f001 fc9e 	bl	800b5f8 <__assert_func>
 8009cbc:	3101      	adds	r1, #1
 8009cbe:	105b      	asrs	r3, r3, #1
 8009cc0:	e7ee      	b.n	8009ca0 <__gethex+0x160>
 8009cc2:	f100 0914 	add.w	r9, r0, #20
 8009cc6:	f04f 0b00 	mov.w	fp, #0
 8009cca:	f1ca 0301 	rsb	r3, sl, #1
 8009cce:	f8cd 9008 	str.w	r9, [sp, #8]
 8009cd2:	f8cd b000 	str.w	fp, [sp]
 8009cd6:	9306      	str	r3, [sp, #24]
 8009cd8:	42b7      	cmp	r7, r6
 8009cda:	d340      	bcc.n	8009d5e <__gethex+0x21e>
 8009cdc:	9802      	ldr	r0, [sp, #8]
 8009cde:	9b00      	ldr	r3, [sp, #0]
 8009ce0:	f840 3b04 	str.w	r3, [r0], #4
 8009ce4:	eba0 0009 	sub.w	r0, r0, r9
 8009ce8:	1080      	asrs	r0, r0, #2
 8009cea:	0146      	lsls	r6, r0, #5
 8009cec:	6120      	str	r0, [r4, #16]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 fbb4 	bl	800a45c <__hi0bits>
 8009cf4:	1a30      	subs	r0, r6, r0
 8009cf6:	f8d8 6000 	ldr.w	r6, [r8]
 8009cfa:	42b0      	cmp	r0, r6
 8009cfc:	dd63      	ble.n	8009dc6 <__gethex+0x286>
 8009cfe:	1b87      	subs	r7, r0, r6
 8009d00:	4639      	mov	r1, r7
 8009d02:	4620      	mov	r0, r4
 8009d04:	f000 ff58 	bl	800abb8 <__any_on>
 8009d08:	4682      	mov	sl, r0
 8009d0a:	b1a8      	cbz	r0, 8009d38 <__gethex+0x1f8>
 8009d0c:	1e7b      	subs	r3, r7, #1
 8009d0e:	1159      	asrs	r1, r3, #5
 8009d10:	f003 021f 	and.w	r2, r3, #31
 8009d14:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009d18:	f04f 0a01 	mov.w	sl, #1
 8009d1c:	fa0a f202 	lsl.w	r2, sl, r2
 8009d20:	420a      	tst	r2, r1
 8009d22:	d009      	beq.n	8009d38 <__gethex+0x1f8>
 8009d24:	4553      	cmp	r3, sl
 8009d26:	dd05      	ble.n	8009d34 <__gethex+0x1f4>
 8009d28:	1eb9      	subs	r1, r7, #2
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f000 ff44 	bl	800abb8 <__any_on>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d145      	bne.n	8009dc0 <__gethex+0x280>
 8009d34:	f04f 0a02 	mov.w	sl, #2
 8009d38:	4639      	mov	r1, r7
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f7ff fe99 	bl	8009a72 <rshift>
 8009d40:	443d      	add	r5, r7
 8009d42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d46:	42ab      	cmp	r3, r5
 8009d48:	da4c      	bge.n	8009de4 <__gethex+0x2a4>
 8009d4a:	ee18 0a10 	vmov	r0, s16
 8009d4e:	4621      	mov	r1, r4
 8009d50:	f000 fad2 	bl	800a2f8 <_Bfree>
 8009d54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d56:	2300      	movs	r3, #0
 8009d58:	6013      	str	r3, [r2, #0]
 8009d5a:	27a3      	movs	r7, #163	; 0xa3
 8009d5c:	e785      	b.n	8009c6a <__gethex+0x12a>
 8009d5e:	1e73      	subs	r3, r6, #1
 8009d60:	9a05      	ldr	r2, [sp, #20]
 8009d62:	9303      	str	r3, [sp, #12]
 8009d64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d019      	beq.n	8009da0 <__gethex+0x260>
 8009d6c:	f1bb 0f20 	cmp.w	fp, #32
 8009d70:	d107      	bne.n	8009d82 <__gethex+0x242>
 8009d72:	9b02      	ldr	r3, [sp, #8]
 8009d74:	9a00      	ldr	r2, [sp, #0]
 8009d76:	f843 2b04 	str.w	r2, [r3], #4
 8009d7a:	9302      	str	r3, [sp, #8]
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	469b      	mov	fp, r3
 8009d82:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009d86:	f7ff fec6 	bl	8009b16 <__hexdig_fun>
 8009d8a:	9b00      	ldr	r3, [sp, #0]
 8009d8c:	f000 000f 	and.w	r0, r0, #15
 8009d90:	fa00 f00b 	lsl.w	r0, r0, fp
 8009d94:	4303      	orrs	r3, r0
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	f10b 0b04 	add.w	fp, fp, #4
 8009d9c:	9b03      	ldr	r3, [sp, #12]
 8009d9e:	e00d      	b.n	8009dbc <__gethex+0x27c>
 8009da0:	9b03      	ldr	r3, [sp, #12]
 8009da2:	9a06      	ldr	r2, [sp, #24]
 8009da4:	4413      	add	r3, r2
 8009da6:	42bb      	cmp	r3, r7
 8009da8:	d3e0      	bcc.n	8009d6c <__gethex+0x22c>
 8009daa:	4618      	mov	r0, r3
 8009dac:	9901      	ldr	r1, [sp, #4]
 8009dae:	9307      	str	r3, [sp, #28]
 8009db0:	4652      	mov	r2, sl
 8009db2:	f001 fb2c 	bl	800b40e <strncmp>
 8009db6:	9b07      	ldr	r3, [sp, #28]
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d1d7      	bne.n	8009d6c <__gethex+0x22c>
 8009dbc:	461e      	mov	r6, r3
 8009dbe:	e78b      	b.n	8009cd8 <__gethex+0x198>
 8009dc0:	f04f 0a03 	mov.w	sl, #3
 8009dc4:	e7b8      	b.n	8009d38 <__gethex+0x1f8>
 8009dc6:	da0a      	bge.n	8009dde <__gethex+0x29e>
 8009dc8:	1a37      	subs	r7, r6, r0
 8009dca:	4621      	mov	r1, r4
 8009dcc:	ee18 0a10 	vmov	r0, s16
 8009dd0:	463a      	mov	r2, r7
 8009dd2:	f000 fcad 	bl	800a730 <__lshift>
 8009dd6:	1bed      	subs	r5, r5, r7
 8009dd8:	4604      	mov	r4, r0
 8009dda:	f100 0914 	add.w	r9, r0, #20
 8009dde:	f04f 0a00 	mov.w	sl, #0
 8009de2:	e7ae      	b.n	8009d42 <__gethex+0x202>
 8009de4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009de8:	42a8      	cmp	r0, r5
 8009dea:	dd72      	ble.n	8009ed2 <__gethex+0x392>
 8009dec:	1b45      	subs	r5, r0, r5
 8009dee:	42ae      	cmp	r6, r5
 8009df0:	dc36      	bgt.n	8009e60 <__gethex+0x320>
 8009df2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d02a      	beq.n	8009e50 <__gethex+0x310>
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	d02c      	beq.n	8009e58 <__gethex+0x318>
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d11c      	bne.n	8009e3c <__gethex+0x2fc>
 8009e02:	42ae      	cmp	r6, r5
 8009e04:	d11a      	bne.n	8009e3c <__gethex+0x2fc>
 8009e06:	2e01      	cmp	r6, #1
 8009e08:	d112      	bne.n	8009e30 <__gethex+0x2f0>
 8009e0a:	9a04      	ldr	r2, [sp, #16]
 8009e0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e10:	6013      	str	r3, [r2, #0]
 8009e12:	2301      	movs	r3, #1
 8009e14:	6123      	str	r3, [r4, #16]
 8009e16:	f8c9 3000 	str.w	r3, [r9]
 8009e1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e1c:	2762      	movs	r7, #98	; 0x62
 8009e1e:	601c      	str	r4, [r3, #0]
 8009e20:	e723      	b.n	8009c6a <__gethex+0x12a>
 8009e22:	bf00      	nop
 8009e24:	0800bf1c 	.word	0x0800bf1c
 8009e28:	0800be40 	.word	0x0800be40
 8009e2c:	0800beb4 	.word	0x0800beb4
 8009e30:	1e71      	subs	r1, r6, #1
 8009e32:	4620      	mov	r0, r4
 8009e34:	f000 fec0 	bl	800abb8 <__any_on>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	d1e6      	bne.n	8009e0a <__gethex+0x2ca>
 8009e3c:	ee18 0a10 	vmov	r0, s16
 8009e40:	4621      	mov	r1, r4
 8009e42:	f000 fa59 	bl	800a2f8 <_Bfree>
 8009e46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e48:	2300      	movs	r3, #0
 8009e4a:	6013      	str	r3, [r2, #0]
 8009e4c:	2750      	movs	r7, #80	; 0x50
 8009e4e:	e70c      	b.n	8009c6a <__gethex+0x12a>
 8009e50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1f2      	bne.n	8009e3c <__gethex+0x2fc>
 8009e56:	e7d8      	b.n	8009e0a <__gethex+0x2ca>
 8009e58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1d5      	bne.n	8009e0a <__gethex+0x2ca>
 8009e5e:	e7ed      	b.n	8009e3c <__gethex+0x2fc>
 8009e60:	1e6f      	subs	r7, r5, #1
 8009e62:	f1ba 0f00 	cmp.w	sl, #0
 8009e66:	d131      	bne.n	8009ecc <__gethex+0x38c>
 8009e68:	b127      	cbz	r7, 8009e74 <__gethex+0x334>
 8009e6a:	4639      	mov	r1, r7
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f000 fea3 	bl	800abb8 <__any_on>
 8009e72:	4682      	mov	sl, r0
 8009e74:	117b      	asrs	r3, r7, #5
 8009e76:	2101      	movs	r1, #1
 8009e78:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009e7c:	f007 071f 	and.w	r7, r7, #31
 8009e80:	fa01 f707 	lsl.w	r7, r1, r7
 8009e84:	421f      	tst	r7, r3
 8009e86:	4629      	mov	r1, r5
 8009e88:	4620      	mov	r0, r4
 8009e8a:	bf18      	it	ne
 8009e8c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009e90:	1b76      	subs	r6, r6, r5
 8009e92:	f7ff fdee 	bl	8009a72 <rshift>
 8009e96:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009e9a:	2702      	movs	r7, #2
 8009e9c:	f1ba 0f00 	cmp.w	sl, #0
 8009ea0:	d048      	beq.n	8009f34 <__gethex+0x3f4>
 8009ea2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d015      	beq.n	8009ed6 <__gethex+0x396>
 8009eaa:	2b03      	cmp	r3, #3
 8009eac:	d017      	beq.n	8009ede <__gethex+0x39e>
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d109      	bne.n	8009ec6 <__gethex+0x386>
 8009eb2:	f01a 0f02 	tst.w	sl, #2
 8009eb6:	d006      	beq.n	8009ec6 <__gethex+0x386>
 8009eb8:	f8d9 0000 	ldr.w	r0, [r9]
 8009ebc:	ea4a 0a00 	orr.w	sl, sl, r0
 8009ec0:	f01a 0f01 	tst.w	sl, #1
 8009ec4:	d10e      	bne.n	8009ee4 <__gethex+0x3a4>
 8009ec6:	f047 0710 	orr.w	r7, r7, #16
 8009eca:	e033      	b.n	8009f34 <__gethex+0x3f4>
 8009ecc:	f04f 0a01 	mov.w	sl, #1
 8009ed0:	e7d0      	b.n	8009e74 <__gethex+0x334>
 8009ed2:	2701      	movs	r7, #1
 8009ed4:	e7e2      	b.n	8009e9c <__gethex+0x35c>
 8009ed6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ed8:	f1c3 0301 	rsb	r3, r3, #1
 8009edc:	9315      	str	r3, [sp, #84]	; 0x54
 8009ede:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d0f0      	beq.n	8009ec6 <__gethex+0x386>
 8009ee4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ee8:	f104 0314 	add.w	r3, r4, #20
 8009eec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009ef0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009ef4:	f04f 0c00 	mov.w	ip, #0
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009efe:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009f02:	d01c      	beq.n	8009f3e <__gethex+0x3fe>
 8009f04:	3201      	adds	r2, #1
 8009f06:	6002      	str	r2, [r0, #0]
 8009f08:	2f02      	cmp	r7, #2
 8009f0a:	f104 0314 	add.w	r3, r4, #20
 8009f0e:	d13f      	bne.n	8009f90 <__gethex+0x450>
 8009f10:	f8d8 2000 	ldr.w	r2, [r8]
 8009f14:	3a01      	subs	r2, #1
 8009f16:	42b2      	cmp	r2, r6
 8009f18:	d10a      	bne.n	8009f30 <__gethex+0x3f0>
 8009f1a:	1171      	asrs	r1, r6, #5
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f22:	f006 061f 	and.w	r6, r6, #31
 8009f26:	fa02 f606 	lsl.w	r6, r2, r6
 8009f2a:	421e      	tst	r6, r3
 8009f2c:	bf18      	it	ne
 8009f2e:	4617      	movne	r7, r2
 8009f30:	f047 0720 	orr.w	r7, r7, #32
 8009f34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f36:	601c      	str	r4, [r3, #0]
 8009f38:	9b04      	ldr	r3, [sp, #16]
 8009f3a:	601d      	str	r5, [r3, #0]
 8009f3c:	e695      	b.n	8009c6a <__gethex+0x12a>
 8009f3e:	4299      	cmp	r1, r3
 8009f40:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f44:	d8d8      	bhi.n	8009ef8 <__gethex+0x3b8>
 8009f46:	68a3      	ldr	r3, [r4, #8]
 8009f48:	459b      	cmp	fp, r3
 8009f4a:	db19      	blt.n	8009f80 <__gethex+0x440>
 8009f4c:	6861      	ldr	r1, [r4, #4]
 8009f4e:	ee18 0a10 	vmov	r0, s16
 8009f52:	3101      	adds	r1, #1
 8009f54:	f000 f990 	bl	800a278 <_Balloc>
 8009f58:	4681      	mov	r9, r0
 8009f5a:	b918      	cbnz	r0, 8009f64 <__gethex+0x424>
 8009f5c:	4b1a      	ldr	r3, [pc, #104]	; (8009fc8 <__gethex+0x488>)
 8009f5e:	4602      	mov	r2, r0
 8009f60:	2184      	movs	r1, #132	; 0x84
 8009f62:	e6a8      	b.n	8009cb6 <__gethex+0x176>
 8009f64:	6922      	ldr	r2, [r4, #16]
 8009f66:	3202      	adds	r2, #2
 8009f68:	f104 010c 	add.w	r1, r4, #12
 8009f6c:	0092      	lsls	r2, r2, #2
 8009f6e:	300c      	adds	r0, #12
 8009f70:	f000 f974 	bl	800a25c <memcpy>
 8009f74:	4621      	mov	r1, r4
 8009f76:	ee18 0a10 	vmov	r0, s16
 8009f7a:	f000 f9bd 	bl	800a2f8 <_Bfree>
 8009f7e:	464c      	mov	r4, r9
 8009f80:	6923      	ldr	r3, [r4, #16]
 8009f82:	1c5a      	adds	r2, r3, #1
 8009f84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f88:	6122      	str	r2, [r4, #16]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	615a      	str	r2, [r3, #20]
 8009f8e:	e7bb      	b.n	8009f08 <__gethex+0x3c8>
 8009f90:	6922      	ldr	r2, [r4, #16]
 8009f92:	455a      	cmp	r2, fp
 8009f94:	dd0b      	ble.n	8009fae <__gethex+0x46e>
 8009f96:	2101      	movs	r1, #1
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f7ff fd6a 	bl	8009a72 <rshift>
 8009f9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009fa2:	3501      	adds	r5, #1
 8009fa4:	42ab      	cmp	r3, r5
 8009fa6:	f6ff aed0 	blt.w	8009d4a <__gethex+0x20a>
 8009faa:	2701      	movs	r7, #1
 8009fac:	e7c0      	b.n	8009f30 <__gethex+0x3f0>
 8009fae:	f016 061f 	ands.w	r6, r6, #31
 8009fb2:	d0fa      	beq.n	8009faa <__gethex+0x46a>
 8009fb4:	4453      	add	r3, sl
 8009fb6:	f1c6 0620 	rsb	r6, r6, #32
 8009fba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009fbe:	f000 fa4d 	bl	800a45c <__hi0bits>
 8009fc2:	42b0      	cmp	r0, r6
 8009fc4:	dbe7      	blt.n	8009f96 <__gethex+0x456>
 8009fc6:	e7f0      	b.n	8009faa <__gethex+0x46a>
 8009fc8:	0800be40 	.word	0x0800be40

08009fcc <L_shift>:
 8009fcc:	f1c2 0208 	rsb	r2, r2, #8
 8009fd0:	0092      	lsls	r2, r2, #2
 8009fd2:	b570      	push	{r4, r5, r6, lr}
 8009fd4:	f1c2 0620 	rsb	r6, r2, #32
 8009fd8:	6843      	ldr	r3, [r0, #4]
 8009fda:	6804      	ldr	r4, [r0, #0]
 8009fdc:	fa03 f506 	lsl.w	r5, r3, r6
 8009fe0:	432c      	orrs	r4, r5
 8009fe2:	40d3      	lsrs	r3, r2
 8009fe4:	6004      	str	r4, [r0, #0]
 8009fe6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009fea:	4288      	cmp	r0, r1
 8009fec:	d3f4      	bcc.n	8009fd8 <L_shift+0xc>
 8009fee:	bd70      	pop	{r4, r5, r6, pc}

08009ff0 <__match>:
 8009ff0:	b530      	push	{r4, r5, lr}
 8009ff2:	6803      	ldr	r3, [r0, #0]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ffa:	b914      	cbnz	r4, 800a002 <__match+0x12>
 8009ffc:	6003      	str	r3, [r0, #0]
 8009ffe:	2001      	movs	r0, #1
 800a000:	bd30      	pop	{r4, r5, pc}
 800a002:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a006:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a00a:	2d19      	cmp	r5, #25
 800a00c:	bf98      	it	ls
 800a00e:	3220      	addls	r2, #32
 800a010:	42a2      	cmp	r2, r4
 800a012:	d0f0      	beq.n	8009ff6 <__match+0x6>
 800a014:	2000      	movs	r0, #0
 800a016:	e7f3      	b.n	800a000 <__match+0x10>

0800a018 <__hexnan>:
 800a018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01c:	680b      	ldr	r3, [r1, #0]
 800a01e:	115e      	asrs	r6, r3, #5
 800a020:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a024:	f013 031f 	ands.w	r3, r3, #31
 800a028:	b087      	sub	sp, #28
 800a02a:	bf18      	it	ne
 800a02c:	3604      	addne	r6, #4
 800a02e:	2500      	movs	r5, #0
 800a030:	1f37      	subs	r7, r6, #4
 800a032:	4690      	mov	r8, r2
 800a034:	6802      	ldr	r2, [r0, #0]
 800a036:	9301      	str	r3, [sp, #4]
 800a038:	4682      	mov	sl, r0
 800a03a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a03e:	46b9      	mov	r9, r7
 800a040:	463c      	mov	r4, r7
 800a042:	9502      	str	r5, [sp, #8]
 800a044:	46ab      	mov	fp, r5
 800a046:	7851      	ldrb	r1, [r2, #1]
 800a048:	1c53      	adds	r3, r2, #1
 800a04a:	9303      	str	r3, [sp, #12]
 800a04c:	b341      	cbz	r1, 800a0a0 <__hexnan+0x88>
 800a04e:	4608      	mov	r0, r1
 800a050:	9205      	str	r2, [sp, #20]
 800a052:	9104      	str	r1, [sp, #16]
 800a054:	f7ff fd5f 	bl	8009b16 <__hexdig_fun>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d14f      	bne.n	800a0fc <__hexnan+0xe4>
 800a05c:	9904      	ldr	r1, [sp, #16]
 800a05e:	9a05      	ldr	r2, [sp, #20]
 800a060:	2920      	cmp	r1, #32
 800a062:	d818      	bhi.n	800a096 <__hexnan+0x7e>
 800a064:	9b02      	ldr	r3, [sp, #8]
 800a066:	459b      	cmp	fp, r3
 800a068:	dd13      	ble.n	800a092 <__hexnan+0x7a>
 800a06a:	454c      	cmp	r4, r9
 800a06c:	d206      	bcs.n	800a07c <__hexnan+0x64>
 800a06e:	2d07      	cmp	r5, #7
 800a070:	dc04      	bgt.n	800a07c <__hexnan+0x64>
 800a072:	462a      	mov	r2, r5
 800a074:	4649      	mov	r1, r9
 800a076:	4620      	mov	r0, r4
 800a078:	f7ff ffa8 	bl	8009fcc <L_shift>
 800a07c:	4544      	cmp	r4, r8
 800a07e:	d950      	bls.n	800a122 <__hexnan+0x10a>
 800a080:	2300      	movs	r3, #0
 800a082:	f1a4 0904 	sub.w	r9, r4, #4
 800a086:	f844 3c04 	str.w	r3, [r4, #-4]
 800a08a:	f8cd b008 	str.w	fp, [sp, #8]
 800a08e:	464c      	mov	r4, r9
 800a090:	461d      	mov	r5, r3
 800a092:	9a03      	ldr	r2, [sp, #12]
 800a094:	e7d7      	b.n	800a046 <__hexnan+0x2e>
 800a096:	2929      	cmp	r1, #41	; 0x29
 800a098:	d156      	bne.n	800a148 <__hexnan+0x130>
 800a09a:	3202      	adds	r2, #2
 800a09c:	f8ca 2000 	str.w	r2, [sl]
 800a0a0:	f1bb 0f00 	cmp.w	fp, #0
 800a0a4:	d050      	beq.n	800a148 <__hexnan+0x130>
 800a0a6:	454c      	cmp	r4, r9
 800a0a8:	d206      	bcs.n	800a0b8 <__hexnan+0xa0>
 800a0aa:	2d07      	cmp	r5, #7
 800a0ac:	dc04      	bgt.n	800a0b8 <__hexnan+0xa0>
 800a0ae:	462a      	mov	r2, r5
 800a0b0:	4649      	mov	r1, r9
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f7ff ff8a 	bl	8009fcc <L_shift>
 800a0b8:	4544      	cmp	r4, r8
 800a0ba:	d934      	bls.n	800a126 <__hexnan+0x10e>
 800a0bc:	f1a8 0204 	sub.w	r2, r8, #4
 800a0c0:	4623      	mov	r3, r4
 800a0c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a0c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a0ca:	429f      	cmp	r7, r3
 800a0cc:	d2f9      	bcs.n	800a0c2 <__hexnan+0xaa>
 800a0ce:	1b3b      	subs	r3, r7, r4
 800a0d0:	f023 0303 	bic.w	r3, r3, #3
 800a0d4:	3304      	adds	r3, #4
 800a0d6:	3401      	adds	r4, #1
 800a0d8:	3e03      	subs	r6, #3
 800a0da:	42b4      	cmp	r4, r6
 800a0dc:	bf88      	it	hi
 800a0de:	2304      	movhi	r3, #4
 800a0e0:	4443      	add	r3, r8
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f843 2b04 	str.w	r2, [r3], #4
 800a0e8:	429f      	cmp	r7, r3
 800a0ea:	d2fb      	bcs.n	800a0e4 <__hexnan+0xcc>
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	b91b      	cbnz	r3, 800a0f8 <__hexnan+0xe0>
 800a0f0:	4547      	cmp	r7, r8
 800a0f2:	d127      	bne.n	800a144 <__hexnan+0x12c>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	603b      	str	r3, [r7, #0]
 800a0f8:	2005      	movs	r0, #5
 800a0fa:	e026      	b.n	800a14a <__hexnan+0x132>
 800a0fc:	3501      	adds	r5, #1
 800a0fe:	2d08      	cmp	r5, #8
 800a100:	f10b 0b01 	add.w	fp, fp, #1
 800a104:	dd06      	ble.n	800a114 <__hexnan+0xfc>
 800a106:	4544      	cmp	r4, r8
 800a108:	d9c3      	bls.n	800a092 <__hexnan+0x7a>
 800a10a:	2300      	movs	r3, #0
 800a10c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a110:	2501      	movs	r5, #1
 800a112:	3c04      	subs	r4, #4
 800a114:	6822      	ldr	r2, [r4, #0]
 800a116:	f000 000f 	and.w	r0, r0, #15
 800a11a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a11e:	6022      	str	r2, [r4, #0]
 800a120:	e7b7      	b.n	800a092 <__hexnan+0x7a>
 800a122:	2508      	movs	r5, #8
 800a124:	e7b5      	b.n	800a092 <__hexnan+0x7a>
 800a126:	9b01      	ldr	r3, [sp, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d0df      	beq.n	800a0ec <__hexnan+0xd4>
 800a12c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a130:	f1c3 0320 	rsb	r3, r3, #32
 800a134:	fa22 f303 	lsr.w	r3, r2, r3
 800a138:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a13c:	401a      	ands	r2, r3
 800a13e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a142:	e7d3      	b.n	800a0ec <__hexnan+0xd4>
 800a144:	3f04      	subs	r7, #4
 800a146:	e7d1      	b.n	800a0ec <__hexnan+0xd4>
 800a148:	2004      	movs	r0, #4
 800a14a:	b007      	add	sp, #28
 800a14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a150 <_localeconv_r>:
 800a150:	4800      	ldr	r0, [pc, #0]	; (800a154 <_localeconv_r+0x4>)
 800a152:	4770      	bx	lr
 800a154:	2000016c 	.word	0x2000016c

0800a158 <__retarget_lock_init_recursive>:
 800a158:	4770      	bx	lr

0800a15a <__retarget_lock_acquire_recursive>:
 800a15a:	4770      	bx	lr

0800a15c <__retarget_lock_release_recursive>:
 800a15c:	4770      	bx	lr

0800a15e <__swhatbuf_r>:
 800a15e:	b570      	push	{r4, r5, r6, lr}
 800a160:	460e      	mov	r6, r1
 800a162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a166:	2900      	cmp	r1, #0
 800a168:	b096      	sub	sp, #88	; 0x58
 800a16a:	4614      	mov	r4, r2
 800a16c:	461d      	mov	r5, r3
 800a16e:	da08      	bge.n	800a182 <__swhatbuf_r+0x24>
 800a170:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	602a      	str	r2, [r5, #0]
 800a178:	061a      	lsls	r2, r3, #24
 800a17a:	d410      	bmi.n	800a19e <__swhatbuf_r+0x40>
 800a17c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a180:	e00e      	b.n	800a1a0 <__swhatbuf_r+0x42>
 800a182:	466a      	mov	r2, sp
 800a184:	f001 fa78 	bl	800b678 <_fstat_r>
 800a188:	2800      	cmp	r0, #0
 800a18a:	dbf1      	blt.n	800a170 <__swhatbuf_r+0x12>
 800a18c:	9a01      	ldr	r2, [sp, #4]
 800a18e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a192:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a196:	425a      	negs	r2, r3
 800a198:	415a      	adcs	r2, r3
 800a19a:	602a      	str	r2, [r5, #0]
 800a19c:	e7ee      	b.n	800a17c <__swhatbuf_r+0x1e>
 800a19e:	2340      	movs	r3, #64	; 0x40
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	6023      	str	r3, [r4, #0]
 800a1a4:	b016      	add	sp, #88	; 0x58
 800a1a6:	bd70      	pop	{r4, r5, r6, pc}

0800a1a8 <__smakebuf_r>:
 800a1a8:	898b      	ldrh	r3, [r1, #12]
 800a1aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1ac:	079d      	lsls	r5, r3, #30
 800a1ae:	4606      	mov	r6, r0
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	d507      	bpl.n	800a1c4 <__smakebuf_r+0x1c>
 800a1b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1b8:	6023      	str	r3, [r4, #0]
 800a1ba:	6123      	str	r3, [r4, #16]
 800a1bc:	2301      	movs	r3, #1
 800a1be:	6163      	str	r3, [r4, #20]
 800a1c0:	b002      	add	sp, #8
 800a1c2:	bd70      	pop	{r4, r5, r6, pc}
 800a1c4:	ab01      	add	r3, sp, #4
 800a1c6:	466a      	mov	r2, sp
 800a1c8:	f7ff ffc9 	bl	800a15e <__swhatbuf_r>
 800a1cc:	9900      	ldr	r1, [sp, #0]
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	f000 fd95 	bl	800ad00 <_malloc_r>
 800a1d6:	b948      	cbnz	r0, 800a1ec <__smakebuf_r+0x44>
 800a1d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1dc:	059a      	lsls	r2, r3, #22
 800a1de:	d4ef      	bmi.n	800a1c0 <__smakebuf_r+0x18>
 800a1e0:	f023 0303 	bic.w	r3, r3, #3
 800a1e4:	f043 0302 	orr.w	r3, r3, #2
 800a1e8:	81a3      	strh	r3, [r4, #12]
 800a1ea:	e7e3      	b.n	800a1b4 <__smakebuf_r+0xc>
 800a1ec:	4b0d      	ldr	r3, [pc, #52]	; (800a224 <__smakebuf_r+0x7c>)
 800a1ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1f0:	89a3      	ldrh	r3, [r4, #12]
 800a1f2:	6020      	str	r0, [r4, #0]
 800a1f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f8:	81a3      	strh	r3, [r4, #12]
 800a1fa:	9b00      	ldr	r3, [sp, #0]
 800a1fc:	6163      	str	r3, [r4, #20]
 800a1fe:	9b01      	ldr	r3, [sp, #4]
 800a200:	6120      	str	r0, [r4, #16]
 800a202:	b15b      	cbz	r3, 800a21c <__smakebuf_r+0x74>
 800a204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a208:	4630      	mov	r0, r6
 800a20a:	f001 fa47 	bl	800b69c <_isatty_r>
 800a20e:	b128      	cbz	r0, 800a21c <__smakebuf_r+0x74>
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	f023 0303 	bic.w	r3, r3, #3
 800a216:	f043 0301 	orr.w	r3, r3, #1
 800a21a:	81a3      	strh	r3, [r4, #12]
 800a21c:	89a0      	ldrh	r0, [r4, #12]
 800a21e:	4305      	orrs	r5, r0
 800a220:	81a5      	strh	r5, [r4, #12]
 800a222:	e7cd      	b.n	800a1c0 <__smakebuf_r+0x18>
 800a224:	080098d1 	.word	0x080098d1

0800a228 <malloc>:
 800a228:	4b02      	ldr	r3, [pc, #8]	; (800a234 <malloc+0xc>)
 800a22a:	4601      	mov	r1, r0
 800a22c:	6818      	ldr	r0, [r3, #0]
 800a22e:	f000 bd67 	b.w	800ad00 <_malloc_r>
 800a232:	bf00      	nop
 800a234:	20000014 	.word	0x20000014

0800a238 <__ascii_mbtowc>:
 800a238:	b082      	sub	sp, #8
 800a23a:	b901      	cbnz	r1, 800a23e <__ascii_mbtowc+0x6>
 800a23c:	a901      	add	r1, sp, #4
 800a23e:	b142      	cbz	r2, 800a252 <__ascii_mbtowc+0x1a>
 800a240:	b14b      	cbz	r3, 800a256 <__ascii_mbtowc+0x1e>
 800a242:	7813      	ldrb	r3, [r2, #0]
 800a244:	600b      	str	r3, [r1, #0]
 800a246:	7812      	ldrb	r2, [r2, #0]
 800a248:	1e10      	subs	r0, r2, #0
 800a24a:	bf18      	it	ne
 800a24c:	2001      	movne	r0, #1
 800a24e:	b002      	add	sp, #8
 800a250:	4770      	bx	lr
 800a252:	4610      	mov	r0, r2
 800a254:	e7fb      	b.n	800a24e <__ascii_mbtowc+0x16>
 800a256:	f06f 0001 	mvn.w	r0, #1
 800a25a:	e7f8      	b.n	800a24e <__ascii_mbtowc+0x16>

0800a25c <memcpy>:
 800a25c:	440a      	add	r2, r1
 800a25e:	4291      	cmp	r1, r2
 800a260:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a264:	d100      	bne.n	800a268 <memcpy+0xc>
 800a266:	4770      	bx	lr
 800a268:	b510      	push	{r4, lr}
 800a26a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a26e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a272:	4291      	cmp	r1, r2
 800a274:	d1f9      	bne.n	800a26a <memcpy+0xe>
 800a276:	bd10      	pop	{r4, pc}

0800a278 <_Balloc>:
 800a278:	b570      	push	{r4, r5, r6, lr}
 800a27a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a27c:	4604      	mov	r4, r0
 800a27e:	460d      	mov	r5, r1
 800a280:	b976      	cbnz	r6, 800a2a0 <_Balloc+0x28>
 800a282:	2010      	movs	r0, #16
 800a284:	f7ff ffd0 	bl	800a228 <malloc>
 800a288:	4602      	mov	r2, r0
 800a28a:	6260      	str	r0, [r4, #36]	; 0x24
 800a28c:	b920      	cbnz	r0, 800a298 <_Balloc+0x20>
 800a28e:	4b18      	ldr	r3, [pc, #96]	; (800a2f0 <_Balloc+0x78>)
 800a290:	4818      	ldr	r0, [pc, #96]	; (800a2f4 <_Balloc+0x7c>)
 800a292:	2166      	movs	r1, #102	; 0x66
 800a294:	f001 f9b0 	bl	800b5f8 <__assert_func>
 800a298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a29c:	6006      	str	r6, [r0, #0]
 800a29e:	60c6      	str	r6, [r0, #12]
 800a2a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a2a2:	68f3      	ldr	r3, [r6, #12]
 800a2a4:	b183      	cbz	r3, 800a2c8 <_Balloc+0x50>
 800a2a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2ae:	b9b8      	cbnz	r0, 800a2e0 <_Balloc+0x68>
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	fa01 f605 	lsl.w	r6, r1, r5
 800a2b6:	1d72      	adds	r2, r6, #5
 800a2b8:	0092      	lsls	r2, r2, #2
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f000 fc9d 	bl	800abfa <_calloc_r>
 800a2c0:	b160      	cbz	r0, 800a2dc <_Balloc+0x64>
 800a2c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2c6:	e00e      	b.n	800a2e6 <_Balloc+0x6e>
 800a2c8:	2221      	movs	r2, #33	; 0x21
 800a2ca:	2104      	movs	r1, #4
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f000 fc94 	bl	800abfa <_calloc_r>
 800a2d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2d4:	60f0      	str	r0, [r6, #12]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1e4      	bne.n	800a2a6 <_Balloc+0x2e>
 800a2dc:	2000      	movs	r0, #0
 800a2de:	bd70      	pop	{r4, r5, r6, pc}
 800a2e0:	6802      	ldr	r2, [r0, #0]
 800a2e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2ec:	e7f7      	b.n	800a2de <_Balloc+0x66>
 800a2ee:	bf00      	nop
 800a2f0:	0800bdce 	.word	0x0800bdce
 800a2f4:	0800bf30 	.word	0x0800bf30

0800a2f8 <_Bfree>:
 800a2f8:	b570      	push	{r4, r5, r6, lr}
 800a2fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	460c      	mov	r4, r1
 800a300:	b976      	cbnz	r6, 800a320 <_Bfree+0x28>
 800a302:	2010      	movs	r0, #16
 800a304:	f7ff ff90 	bl	800a228 <malloc>
 800a308:	4602      	mov	r2, r0
 800a30a:	6268      	str	r0, [r5, #36]	; 0x24
 800a30c:	b920      	cbnz	r0, 800a318 <_Bfree+0x20>
 800a30e:	4b09      	ldr	r3, [pc, #36]	; (800a334 <_Bfree+0x3c>)
 800a310:	4809      	ldr	r0, [pc, #36]	; (800a338 <_Bfree+0x40>)
 800a312:	218a      	movs	r1, #138	; 0x8a
 800a314:	f001 f970 	bl	800b5f8 <__assert_func>
 800a318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a31c:	6006      	str	r6, [r0, #0]
 800a31e:	60c6      	str	r6, [r0, #12]
 800a320:	b13c      	cbz	r4, 800a332 <_Bfree+0x3a>
 800a322:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a324:	6862      	ldr	r2, [r4, #4]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a32c:	6021      	str	r1, [r4, #0]
 800a32e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a332:	bd70      	pop	{r4, r5, r6, pc}
 800a334:	0800bdce 	.word	0x0800bdce
 800a338:	0800bf30 	.word	0x0800bf30

0800a33c <__multadd>:
 800a33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a340:	690d      	ldr	r5, [r1, #16]
 800a342:	4607      	mov	r7, r0
 800a344:	460c      	mov	r4, r1
 800a346:	461e      	mov	r6, r3
 800a348:	f101 0c14 	add.w	ip, r1, #20
 800a34c:	2000      	movs	r0, #0
 800a34e:	f8dc 3000 	ldr.w	r3, [ip]
 800a352:	b299      	uxth	r1, r3
 800a354:	fb02 6101 	mla	r1, r2, r1, r6
 800a358:	0c1e      	lsrs	r6, r3, #16
 800a35a:	0c0b      	lsrs	r3, r1, #16
 800a35c:	fb02 3306 	mla	r3, r2, r6, r3
 800a360:	b289      	uxth	r1, r1
 800a362:	3001      	adds	r0, #1
 800a364:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a368:	4285      	cmp	r5, r0
 800a36a:	f84c 1b04 	str.w	r1, [ip], #4
 800a36e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a372:	dcec      	bgt.n	800a34e <__multadd+0x12>
 800a374:	b30e      	cbz	r6, 800a3ba <__multadd+0x7e>
 800a376:	68a3      	ldr	r3, [r4, #8]
 800a378:	42ab      	cmp	r3, r5
 800a37a:	dc19      	bgt.n	800a3b0 <__multadd+0x74>
 800a37c:	6861      	ldr	r1, [r4, #4]
 800a37e:	4638      	mov	r0, r7
 800a380:	3101      	adds	r1, #1
 800a382:	f7ff ff79 	bl	800a278 <_Balloc>
 800a386:	4680      	mov	r8, r0
 800a388:	b928      	cbnz	r0, 800a396 <__multadd+0x5a>
 800a38a:	4602      	mov	r2, r0
 800a38c:	4b0c      	ldr	r3, [pc, #48]	; (800a3c0 <__multadd+0x84>)
 800a38e:	480d      	ldr	r0, [pc, #52]	; (800a3c4 <__multadd+0x88>)
 800a390:	21b5      	movs	r1, #181	; 0xb5
 800a392:	f001 f931 	bl	800b5f8 <__assert_func>
 800a396:	6922      	ldr	r2, [r4, #16]
 800a398:	3202      	adds	r2, #2
 800a39a:	f104 010c 	add.w	r1, r4, #12
 800a39e:	0092      	lsls	r2, r2, #2
 800a3a0:	300c      	adds	r0, #12
 800a3a2:	f7ff ff5b 	bl	800a25c <memcpy>
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	f7ff ffa5 	bl	800a2f8 <_Bfree>
 800a3ae:	4644      	mov	r4, r8
 800a3b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3b4:	3501      	adds	r5, #1
 800a3b6:	615e      	str	r6, [r3, #20]
 800a3b8:	6125      	str	r5, [r4, #16]
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c0:	0800be40 	.word	0x0800be40
 800a3c4:	0800bf30 	.word	0x0800bf30

0800a3c8 <__s2b>:
 800a3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	4615      	mov	r5, r2
 800a3d0:	461f      	mov	r7, r3
 800a3d2:	2209      	movs	r2, #9
 800a3d4:	3308      	adds	r3, #8
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3dc:	2100      	movs	r1, #0
 800a3de:	2201      	movs	r2, #1
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	db09      	blt.n	800a3f8 <__s2b+0x30>
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	f7ff ff47 	bl	800a278 <_Balloc>
 800a3ea:	b940      	cbnz	r0, 800a3fe <__s2b+0x36>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	4b19      	ldr	r3, [pc, #100]	; (800a454 <__s2b+0x8c>)
 800a3f0:	4819      	ldr	r0, [pc, #100]	; (800a458 <__s2b+0x90>)
 800a3f2:	21ce      	movs	r1, #206	; 0xce
 800a3f4:	f001 f900 	bl	800b5f8 <__assert_func>
 800a3f8:	0052      	lsls	r2, r2, #1
 800a3fa:	3101      	adds	r1, #1
 800a3fc:	e7f0      	b.n	800a3e0 <__s2b+0x18>
 800a3fe:	9b08      	ldr	r3, [sp, #32]
 800a400:	6143      	str	r3, [r0, #20]
 800a402:	2d09      	cmp	r5, #9
 800a404:	f04f 0301 	mov.w	r3, #1
 800a408:	6103      	str	r3, [r0, #16]
 800a40a:	dd16      	ble.n	800a43a <__s2b+0x72>
 800a40c:	f104 0909 	add.w	r9, r4, #9
 800a410:	46c8      	mov	r8, r9
 800a412:	442c      	add	r4, r5
 800a414:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a418:	4601      	mov	r1, r0
 800a41a:	3b30      	subs	r3, #48	; 0x30
 800a41c:	220a      	movs	r2, #10
 800a41e:	4630      	mov	r0, r6
 800a420:	f7ff ff8c 	bl	800a33c <__multadd>
 800a424:	45a0      	cmp	r8, r4
 800a426:	d1f5      	bne.n	800a414 <__s2b+0x4c>
 800a428:	f1a5 0408 	sub.w	r4, r5, #8
 800a42c:	444c      	add	r4, r9
 800a42e:	1b2d      	subs	r5, r5, r4
 800a430:	1963      	adds	r3, r4, r5
 800a432:	42bb      	cmp	r3, r7
 800a434:	db04      	blt.n	800a440 <__s2b+0x78>
 800a436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a43a:	340a      	adds	r4, #10
 800a43c:	2509      	movs	r5, #9
 800a43e:	e7f6      	b.n	800a42e <__s2b+0x66>
 800a440:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a444:	4601      	mov	r1, r0
 800a446:	3b30      	subs	r3, #48	; 0x30
 800a448:	220a      	movs	r2, #10
 800a44a:	4630      	mov	r0, r6
 800a44c:	f7ff ff76 	bl	800a33c <__multadd>
 800a450:	e7ee      	b.n	800a430 <__s2b+0x68>
 800a452:	bf00      	nop
 800a454:	0800be40 	.word	0x0800be40
 800a458:	0800bf30 	.word	0x0800bf30

0800a45c <__hi0bits>:
 800a45c:	0c03      	lsrs	r3, r0, #16
 800a45e:	041b      	lsls	r3, r3, #16
 800a460:	b9d3      	cbnz	r3, 800a498 <__hi0bits+0x3c>
 800a462:	0400      	lsls	r0, r0, #16
 800a464:	2310      	movs	r3, #16
 800a466:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a46a:	bf04      	itt	eq
 800a46c:	0200      	lsleq	r0, r0, #8
 800a46e:	3308      	addeq	r3, #8
 800a470:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a474:	bf04      	itt	eq
 800a476:	0100      	lsleq	r0, r0, #4
 800a478:	3304      	addeq	r3, #4
 800a47a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a47e:	bf04      	itt	eq
 800a480:	0080      	lsleq	r0, r0, #2
 800a482:	3302      	addeq	r3, #2
 800a484:	2800      	cmp	r0, #0
 800a486:	db05      	blt.n	800a494 <__hi0bits+0x38>
 800a488:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a48c:	f103 0301 	add.w	r3, r3, #1
 800a490:	bf08      	it	eq
 800a492:	2320      	moveq	r3, #32
 800a494:	4618      	mov	r0, r3
 800a496:	4770      	bx	lr
 800a498:	2300      	movs	r3, #0
 800a49a:	e7e4      	b.n	800a466 <__hi0bits+0xa>

0800a49c <__lo0bits>:
 800a49c:	6803      	ldr	r3, [r0, #0]
 800a49e:	f013 0207 	ands.w	r2, r3, #7
 800a4a2:	4601      	mov	r1, r0
 800a4a4:	d00b      	beq.n	800a4be <__lo0bits+0x22>
 800a4a6:	07da      	lsls	r2, r3, #31
 800a4a8:	d423      	bmi.n	800a4f2 <__lo0bits+0x56>
 800a4aa:	0798      	lsls	r0, r3, #30
 800a4ac:	bf49      	itett	mi
 800a4ae:	085b      	lsrmi	r3, r3, #1
 800a4b0:	089b      	lsrpl	r3, r3, #2
 800a4b2:	2001      	movmi	r0, #1
 800a4b4:	600b      	strmi	r3, [r1, #0]
 800a4b6:	bf5c      	itt	pl
 800a4b8:	600b      	strpl	r3, [r1, #0]
 800a4ba:	2002      	movpl	r0, #2
 800a4bc:	4770      	bx	lr
 800a4be:	b298      	uxth	r0, r3
 800a4c0:	b9a8      	cbnz	r0, 800a4ee <__lo0bits+0x52>
 800a4c2:	0c1b      	lsrs	r3, r3, #16
 800a4c4:	2010      	movs	r0, #16
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	b90a      	cbnz	r2, 800a4ce <__lo0bits+0x32>
 800a4ca:	3008      	adds	r0, #8
 800a4cc:	0a1b      	lsrs	r3, r3, #8
 800a4ce:	071a      	lsls	r2, r3, #28
 800a4d0:	bf04      	itt	eq
 800a4d2:	091b      	lsreq	r3, r3, #4
 800a4d4:	3004      	addeq	r0, #4
 800a4d6:	079a      	lsls	r2, r3, #30
 800a4d8:	bf04      	itt	eq
 800a4da:	089b      	lsreq	r3, r3, #2
 800a4dc:	3002      	addeq	r0, #2
 800a4de:	07da      	lsls	r2, r3, #31
 800a4e0:	d403      	bmi.n	800a4ea <__lo0bits+0x4e>
 800a4e2:	085b      	lsrs	r3, r3, #1
 800a4e4:	f100 0001 	add.w	r0, r0, #1
 800a4e8:	d005      	beq.n	800a4f6 <__lo0bits+0x5a>
 800a4ea:	600b      	str	r3, [r1, #0]
 800a4ec:	4770      	bx	lr
 800a4ee:	4610      	mov	r0, r2
 800a4f0:	e7e9      	b.n	800a4c6 <__lo0bits+0x2a>
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	4770      	bx	lr
 800a4f6:	2020      	movs	r0, #32
 800a4f8:	4770      	bx	lr
	...

0800a4fc <__i2b>:
 800a4fc:	b510      	push	{r4, lr}
 800a4fe:	460c      	mov	r4, r1
 800a500:	2101      	movs	r1, #1
 800a502:	f7ff feb9 	bl	800a278 <_Balloc>
 800a506:	4602      	mov	r2, r0
 800a508:	b928      	cbnz	r0, 800a516 <__i2b+0x1a>
 800a50a:	4b05      	ldr	r3, [pc, #20]	; (800a520 <__i2b+0x24>)
 800a50c:	4805      	ldr	r0, [pc, #20]	; (800a524 <__i2b+0x28>)
 800a50e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a512:	f001 f871 	bl	800b5f8 <__assert_func>
 800a516:	2301      	movs	r3, #1
 800a518:	6144      	str	r4, [r0, #20]
 800a51a:	6103      	str	r3, [r0, #16]
 800a51c:	bd10      	pop	{r4, pc}
 800a51e:	bf00      	nop
 800a520:	0800be40 	.word	0x0800be40
 800a524:	0800bf30 	.word	0x0800bf30

0800a528 <__multiply>:
 800a528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52c:	4691      	mov	r9, r2
 800a52e:	690a      	ldr	r2, [r1, #16]
 800a530:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a534:	429a      	cmp	r2, r3
 800a536:	bfb8      	it	lt
 800a538:	460b      	movlt	r3, r1
 800a53a:	460c      	mov	r4, r1
 800a53c:	bfbc      	itt	lt
 800a53e:	464c      	movlt	r4, r9
 800a540:	4699      	movlt	r9, r3
 800a542:	6927      	ldr	r7, [r4, #16]
 800a544:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a548:	68a3      	ldr	r3, [r4, #8]
 800a54a:	6861      	ldr	r1, [r4, #4]
 800a54c:	eb07 060a 	add.w	r6, r7, sl
 800a550:	42b3      	cmp	r3, r6
 800a552:	b085      	sub	sp, #20
 800a554:	bfb8      	it	lt
 800a556:	3101      	addlt	r1, #1
 800a558:	f7ff fe8e 	bl	800a278 <_Balloc>
 800a55c:	b930      	cbnz	r0, 800a56c <__multiply+0x44>
 800a55e:	4602      	mov	r2, r0
 800a560:	4b44      	ldr	r3, [pc, #272]	; (800a674 <__multiply+0x14c>)
 800a562:	4845      	ldr	r0, [pc, #276]	; (800a678 <__multiply+0x150>)
 800a564:	f240 115d 	movw	r1, #349	; 0x15d
 800a568:	f001 f846 	bl	800b5f8 <__assert_func>
 800a56c:	f100 0514 	add.w	r5, r0, #20
 800a570:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a574:	462b      	mov	r3, r5
 800a576:	2200      	movs	r2, #0
 800a578:	4543      	cmp	r3, r8
 800a57a:	d321      	bcc.n	800a5c0 <__multiply+0x98>
 800a57c:	f104 0314 	add.w	r3, r4, #20
 800a580:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a584:	f109 0314 	add.w	r3, r9, #20
 800a588:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a58c:	9202      	str	r2, [sp, #8]
 800a58e:	1b3a      	subs	r2, r7, r4
 800a590:	3a15      	subs	r2, #21
 800a592:	f022 0203 	bic.w	r2, r2, #3
 800a596:	3204      	adds	r2, #4
 800a598:	f104 0115 	add.w	r1, r4, #21
 800a59c:	428f      	cmp	r7, r1
 800a59e:	bf38      	it	cc
 800a5a0:	2204      	movcc	r2, #4
 800a5a2:	9201      	str	r2, [sp, #4]
 800a5a4:	9a02      	ldr	r2, [sp, #8]
 800a5a6:	9303      	str	r3, [sp, #12]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d80c      	bhi.n	800a5c6 <__multiply+0x9e>
 800a5ac:	2e00      	cmp	r6, #0
 800a5ae:	dd03      	ble.n	800a5b8 <__multiply+0x90>
 800a5b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d05a      	beq.n	800a66e <__multiply+0x146>
 800a5b8:	6106      	str	r6, [r0, #16]
 800a5ba:	b005      	add	sp, #20
 800a5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c0:	f843 2b04 	str.w	r2, [r3], #4
 800a5c4:	e7d8      	b.n	800a578 <__multiply+0x50>
 800a5c6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a5ca:	f1ba 0f00 	cmp.w	sl, #0
 800a5ce:	d024      	beq.n	800a61a <__multiply+0xf2>
 800a5d0:	f104 0e14 	add.w	lr, r4, #20
 800a5d4:	46a9      	mov	r9, r5
 800a5d6:	f04f 0c00 	mov.w	ip, #0
 800a5da:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a5de:	f8d9 1000 	ldr.w	r1, [r9]
 800a5e2:	fa1f fb82 	uxth.w	fp, r2
 800a5e6:	b289      	uxth	r1, r1
 800a5e8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a5ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a5f0:	f8d9 2000 	ldr.w	r2, [r9]
 800a5f4:	4461      	add	r1, ip
 800a5f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5fa:	fb0a c20b 	mla	r2, sl, fp, ip
 800a5fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a602:	b289      	uxth	r1, r1
 800a604:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a608:	4577      	cmp	r7, lr
 800a60a:	f849 1b04 	str.w	r1, [r9], #4
 800a60e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a612:	d8e2      	bhi.n	800a5da <__multiply+0xb2>
 800a614:	9a01      	ldr	r2, [sp, #4]
 800a616:	f845 c002 	str.w	ip, [r5, r2]
 800a61a:	9a03      	ldr	r2, [sp, #12]
 800a61c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a620:	3304      	adds	r3, #4
 800a622:	f1b9 0f00 	cmp.w	r9, #0
 800a626:	d020      	beq.n	800a66a <__multiply+0x142>
 800a628:	6829      	ldr	r1, [r5, #0]
 800a62a:	f104 0c14 	add.w	ip, r4, #20
 800a62e:	46ae      	mov	lr, r5
 800a630:	f04f 0a00 	mov.w	sl, #0
 800a634:	f8bc b000 	ldrh.w	fp, [ip]
 800a638:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a63c:	fb09 220b 	mla	r2, r9, fp, r2
 800a640:	4492      	add	sl, r2
 800a642:	b289      	uxth	r1, r1
 800a644:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a648:	f84e 1b04 	str.w	r1, [lr], #4
 800a64c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a650:	f8be 1000 	ldrh.w	r1, [lr]
 800a654:	0c12      	lsrs	r2, r2, #16
 800a656:	fb09 1102 	mla	r1, r9, r2, r1
 800a65a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a65e:	4567      	cmp	r7, ip
 800a660:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a664:	d8e6      	bhi.n	800a634 <__multiply+0x10c>
 800a666:	9a01      	ldr	r2, [sp, #4]
 800a668:	50a9      	str	r1, [r5, r2]
 800a66a:	3504      	adds	r5, #4
 800a66c:	e79a      	b.n	800a5a4 <__multiply+0x7c>
 800a66e:	3e01      	subs	r6, #1
 800a670:	e79c      	b.n	800a5ac <__multiply+0x84>
 800a672:	bf00      	nop
 800a674:	0800be40 	.word	0x0800be40
 800a678:	0800bf30 	.word	0x0800bf30

0800a67c <__pow5mult>:
 800a67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a680:	4615      	mov	r5, r2
 800a682:	f012 0203 	ands.w	r2, r2, #3
 800a686:	4606      	mov	r6, r0
 800a688:	460f      	mov	r7, r1
 800a68a:	d007      	beq.n	800a69c <__pow5mult+0x20>
 800a68c:	4c25      	ldr	r4, [pc, #148]	; (800a724 <__pow5mult+0xa8>)
 800a68e:	3a01      	subs	r2, #1
 800a690:	2300      	movs	r3, #0
 800a692:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a696:	f7ff fe51 	bl	800a33c <__multadd>
 800a69a:	4607      	mov	r7, r0
 800a69c:	10ad      	asrs	r5, r5, #2
 800a69e:	d03d      	beq.n	800a71c <__pow5mult+0xa0>
 800a6a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a6a2:	b97c      	cbnz	r4, 800a6c4 <__pow5mult+0x48>
 800a6a4:	2010      	movs	r0, #16
 800a6a6:	f7ff fdbf 	bl	800a228 <malloc>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	6270      	str	r0, [r6, #36]	; 0x24
 800a6ae:	b928      	cbnz	r0, 800a6bc <__pow5mult+0x40>
 800a6b0:	4b1d      	ldr	r3, [pc, #116]	; (800a728 <__pow5mult+0xac>)
 800a6b2:	481e      	ldr	r0, [pc, #120]	; (800a72c <__pow5mult+0xb0>)
 800a6b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a6b8:	f000 ff9e 	bl	800b5f8 <__assert_func>
 800a6bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6c0:	6004      	str	r4, [r0, #0]
 800a6c2:	60c4      	str	r4, [r0, #12]
 800a6c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a6c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6cc:	b94c      	cbnz	r4, 800a6e2 <__pow5mult+0x66>
 800a6ce:	f240 2171 	movw	r1, #625	; 0x271
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	f7ff ff12 	bl	800a4fc <__i2b>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6de:	4604      	mov	r4, r0
 800a6e0:	6003      	str	r3, [r0, #0]
 800a6e2:	f04f 0900 	mov.w	r9, #0
 800a6e6:	07eb      	lsls	r3, r5, #31
 800a6e8:	d50a      	bpl.n	800a700 <__pow5mult+0x84>
 800a6ea:	4639      	mov	r1, r7
 800a6ec:	4622      	mov	r2, r4
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	f7ff ff1a 	bl	800a528 <__multiply>
 800a6f4:	4639      	mov	r1, r7
 800a6f6:	4680      	mov	r8, r0
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	f7ff fdfd 	bl	800a2f8 <_Bfree>
 800a6fe:	4647      	mov	r7, r8
 800a700:	106d      	asrs	r5, r5, #1
 800a702:	d00b      	beq.n	800a71c <__pow5mult+0xa0>
 800a704:	6820      	ldr	r0, [r4, #0]
 800a706:	b938      	cbnz	r0, 800a718 <__pow5mult+0x9c>
 800a708:	4622      	mov	r2, r4
 800a70a:	4621      	mov	r1, r4
 800a70c:	4630      	mov	r0, r6
 800a70e:	f7ff ff0b 	bl	800a528 <__multiply>
 800a712:	6020      	str	r0, [r4, #0]
 800a714:	f8c0 9000 	str.w	r9, [r0]
 800a718:	4604      	mov	r4, r0
 800a71a:	e7e4      	b.n	800a6e6 <__pow5mult+0x6a>
 800a71c:	4638      	mov	r0, r7
 800a71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a722:	bf00      	nop
 800a724:	0800c080 	.word	0x0800c080
 800a728:	0800bdce 	.word	0x0800bdce
 800a72c:	0800bf30 	.word	0x0800bf30

0800a730 <__lshift>:
 800a730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a734:	460c      	mov	r4, r1
 800a736:	6849      	ldr	r1, [r1, #4]
 800a738:	6923      	ldr	r3, [r4, #16]
 800a73a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a73e:	68a3      	ldr	r3, [r4, #8]
 800a740:	4607      	mov	r7, r0
 800a742:	4691      	mov	r9, r2
 800a744:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a748:	f108 0601 	add.w	r6, r8, #1
 800a74c:	42b3      	cmp	r3, r6
 800a74e:	db0b      	blt.n	800a768 <__lshift+0x38>
 800a750:	4638      	mov	r0, r7
 800a752:	f7ff fd91 	bl	800a278 <_Balloc>
 800a756:	4605      	mov	r5, r0
 800a758:	b948      	cbnz	r0, 800a76e <__lshift+0x3e>
 800a75a:	4602      	mov	r2, r0
 800a75c:	4b2a      	ldr	r3, [pc, #168]	; (800a808 <__lshift+0xd8>)
 800a75e:	482b      	ldr	r0, [pc, #172]	; (800a80c <__lshift+0xdc>)
 800a760:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a764:	f000 ff48 	bl	800b5f8 <__assert_func>
 800a768:	3101      	adds	r1, #1
 800a76a:	005b      	lsls	r3, r3, #1
 800a76c:	e7ee      	b.n	800a74c <__lshift+0x1c>
 800a76e:	2300      	movs	r3, #0
 800a770:	f100 0114 	add.w	r1, r0, #20
 800a774:	f100 0210 	add.w	r2, r0, #16
 800a778:	4618      	mov	r0, r3
 800a77a:	4553      	cmp	r3, sl
 800a77c:	db37      	blt.n	800a7ee <__lshift+0xbe>
 800a77e:	6920      	ldr	r0, [r4, #16]
 800a780:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a784:	f104 0314 	add.w	r3, r4, #20
 800a788:	f019 091f 	ands.w	r9, r9, #31
 800a78c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a790:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a794:	d02f      	beq.n	800a7f6 <__lshift+0xc6>
 800a796:	f1c9 0e20 	rsb	lr, r9, #32
 800a79a:	468a      	mov	sl, r1
 800a79c:	f04f 0c00 	mov.w	ip, #0
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	fa02 f209 	lsl.w	r2, r2, r9
 800a7a6:	ea42 020c 	orr.w	r2, r2, ip
 800a7aa:	f84a 2b04 	str.w	r2, [sl], #4
 800a7ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7b2:	4298      	cmp	r0, r3
 800a7b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a7b8:	d8f2      	bhi.n	800a7a0 <__lshift+0x70>
 800a7ba:	1b03      	subs	r3, r0, r4
 800a7bc:	3b15      	subs	r3, #21
 800a7be:	f023 0303 	bic.w	r3, r3, #3
 800a7c2:	3304      	adds	r3, #4
 800a7c4:	f104 0215 	add.w	r2, r4, #21
 800a7c8:	4290      	cmp	r0, r2
 800a7ca:	bf38      	it	cc
 800a7cc:	2304      	movcc	r3, #4
 800a7ce:	f841 c003 	str.w	ip, [r1, r3]
 800a7d2:	f1bc 0f00 	cmp.w	ip, #0
 800a7d6:	d001      	beq.n	800a7dc <__lshift+0xac>
 800a7d8:	f108 0602 	add.w	r6, r8, #2
 800a7dc:	3e01      	subs	r6, #1
 800a7de:	4638      	mov	r0, r7
 800a7e0:	612e      	str	r6, [r5, #16]
 800a7e2:	4621      	mov	r1, r4
 800a7e4:	f7ff fd88 	bl	800a2f8 <_Bfree>
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	e7c1      	b.n	800a77a <__lshift+0x4a>
 800a7f6:	3904      	subs	r1, #4
 800a7f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a800:	4298      	cmp	r0, r3
 800a802:	d8f9      	bhi.n	800a7f8 <__lshift+0xc8>
 800a804:	e7ea      	b.n	800a7dc <__lshift+0xac>
 800a806:	bf00      	nop
 800a808:	0800be40 	.word	0x0800be40
 800a80c:	0800bf30 	.word	0x0800bf30

0800a810 <__mcmp>:
 800a810:	b530      	push	{r4, r5, lr}
 800a812:	6902      	ldr	r2, [r0, #16]
 800a814:	690c      	ldr	r4, [r1, #16]
 800a816:	1b12      	subs	r2, r2, r4
 800a818:	d10e      	bne.n	800a838 <__mcmp+0x28>
 800a81a:	f100 0314 	add.w	r3, r0, #20
 800a81e:	3114      	adds	r1, #20
 800a820:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a824:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a828:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a82c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a830:	42a5      	cmp	r5, r4
 800a832:	d003      	beq.n	800a83c <__mcmp+0x2c>
 800a834:	d305      	bcc.n	800a842 <__mcmp+0x32>
 800a836:	2201      	movs	r2, #1
 800a838:	4610      	mov	r0, r2
 800a83a:	bd30      	pop	{r4, r5, pc}
 800a83c:	4283      	cmp	r3, r0
 800a83e:	d3f3      	bcc.n	800a828 <__mcmp+0x18>
 800a840:	e7fa      	b.n	800a838 <__mcmp+0x28>
 800a842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a846:	e7f7      	b.n	800a838 <__mcmp+0x28>

0800a848 <__mdiff>:
 800a848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	460c      	mov	r4, r1
 800a84e:	4606      	mov	r6, r0
 800a850:	4611      	mov	r1, r2
 800a852:	4620      	mov	r0, r4
 800a854:	4690      	mov	r8, r2
 800a856:	f7ff ffdb 	bl	800a810 <__mcmp>
 800a85a:	1e05      	subs	r5, r0, #0
 800a85c:	d110      	bne.n	800a880 <__mdiff+0x38>
 800a85e:	4629      	mov	r1, r5
 800a860:	4630      	mov	r0, r6
 800a862:	f7ff fd09 	bl	800a278 <_Balloc>
 800a866:	b930      	cbnz	r0, 800a876 <__mdiff+0x2e>
 800a868:	4b3a      	ldr	r3, [pc, #232]	; (800a954 <__mdiff+0x10c>)
 800a86a:	4602      	mov	r2, r0
 800a86c:	f240 2132 	movw	r1, #562	; 0x232
 800a870:	4839      	ldr	r0, [pc, #228]	; (800a958 <__mdiff+0x110>)
 800a872:	f000 fec1 	bl	800b5f8 <__assert_func>
 800a876:	2301      	movs	r3, #1
 800a878:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a87c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a880:	bfa4      	itt	ge
 800a882:	4643      	movge	r3, r8
 800a884:	46a0      	movge	r8, r4
 800a886:	4630      	mov	r0, r6
 800a888:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a88c:	bfa6      	itte	ge
 800a88e:	461c      	movge	r4, r3
 800a890:	2500      	movge	r5, #0
 800a892:	2501      	movlt	r5, #1
 800a894:	f7ff fcf0 	bl	800a278 <_Balloc>
 800a898:	b920      	cbnz	r0, 800a8a4 <__mdiff+0x5c>
 800a89a:	4b2e      	ldr	r3, [pc, #184]	; (800a954 <__mdiff+0x10c>)
 800a89c:	4602      	mov	r2, r0
 800a89e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a8a2:	e7e5      	b.n	800a870 <__mdiff+0x28>
 800a8a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a8a8:	6926      	ldr	r6, [r4, #16]
 800a8aa:	60c5      	str	r5, [r0, #12]
 800a8ac:	f104 0914 	add.w	r9, r4, #20
 800a8b0:	f108 0514 	add.w	r5, r8, #20
 800a8b4:	f100 0e14 	add.w	lr, r0, #20
 800a8b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a8bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a8c0:	f108 0210 	add.w	r2, r8, #16
 800a8c4:	46f2      	mov	sl, lr
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a8cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a8d0:	fa1f f883 	uxth.w	r8, r3
 800a8d4:	fa11 f18b 	uxtah	r1, r1, fp
 800a8d8:	0c1b      	lsrs	r3, r3, #16
 800a8da:	eba1 0808 	sub.w	r8, r1, r8
 800a8de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a8e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a8e6:	fa1f f888 	uxth.w	r8, r8
 800a8ea:	1419      	asrs	r1, r3, #16
 800a8ec:	454e      	cmp	r6, r9
 800a8ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a8f2:	f84a 3b04 	str.w	r3, [sl], #4
 800a8f6:	d8e7      	bhi.n	800a8c8 <__mdiff+0x80>
 800a8f8:	1b33      	subs	r3, r6, r4
 800a8fa:	3b15      	subs	r3, #21
 800a8fc:	f023 0303 	bic.w	r3, r3, #3
 800a900:	3304      	adds	r3, #4
 800a902:	3415      	adds	r4, #21
 800a904:	42a6      	cmp	r6, r4
 800a906:	bf38      	it	cc
 800a908:	2304      	movcc	r3, #4
 800a90a:	441d      	add	r5, r3
 800a90c:	4473      	add	r3, lr
 800a90e:	469e      	mov	lr, r3
 800a910:	462e      	mov	r6, r5
 800a912:	4566      	cmp	r6, ip
 800a914:	d30e      	bcc.n	800a934 <__mdiff+0xec>
 800a916:	f10c 0203 	add.w	r2, ip, #3
 800a91a:	1b52      	subs	r2, r2, r5
 800a91c:	f022 0203 	bic.w	r2, r2, #3
 800a920:	3d03      	subs	r5, #3
 800a922:	45ac      	cmp	ip, r5
 800a924:	bf38      	it	cc
 800a926:	2200      	movcc	r2, #0
 800a928:	441a      	add	r2, r3
 800a92a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a92e:	b17b      	cbz	r3, 800a950 <__mdiff+0x108>
 800a930:	6107      	str	r7, [r0, #16]
 800a932:	e7a3      	b.n	800a87c <__mdiff+0x34>
 800a934:	f856 8b04 	ldr.w	r8, [r6], #4
 800a938:	fa11 f288 	uxtah	r2, r1, r8
 800a93c:	1414      	asrs	r4, r2, #16
 800a93e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a942:	b292      	uxth	r2, r2
 800a944:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a948:	f84e 2b04 	str.w	r2, [lr], #4
 800a94c:	1421      	asrs	r1, r4, #16
 800a94e:	e7e0      	b.n	800a912 <__mdiff+0xca>
 800a950:	3f01      	subs	r7, #1
 800a952:	e7ea      	b.n	800a92a <__mdiff+0xe2>
 800a954:	0800be40 	.word	0x0800be40
 800a958:	0800bf30 	.word	0x0800bf30

0800a95c <__ulp>:
 800a95c:	b082      	sub	sp, #8
 800a95e:	ed8d 0b00 	vstr	d0, [sp]
 800a962:	9b01      	ldr	r3, [sp, #4]
 800a964:	4912      	ldr	r1, [pc, #72]	; (800a9b0 <__ulp+0x54>)
 800a966:	4019      	ands	r1, r3
 800a968:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a96c:	2900      	cmp	r1, #0
 800a96e:	dd05      	ble.n	800a97c <__ulp+0x20>
 800a970:	2200      	movs	r2, #0
 800a972:	460b      	mov	r3, r1
 800a974:	ec43 2b10 	vmov	d0, r2, r3
 800a978:	b002      	add	sp, #8
 800a97a:	4770      	bx	lr
 800a97c:	4249      	negs	r1, r1
 800a97e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a982:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a986:	f04f 0200 	mov.w	r2, #0
 800a98a:	f04f 0300 	mov.w	r3, #0
 800a98e:	da04      	bge.n	800a99a <__ulp+0x3e>
 800a990:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a994:	fa41 f300 	asr.w	r3, r1, r0
 800a998:	e7ec      	b.n	800a974 <__ulp+0x18>
 800a99a:	f1a0 0114 	sub.w	r1, r0, #20
 800a99e:	291e      	cmp	r1, #30
 800a9a0:	bfda      	itte	le
 800a9a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a9a6:	fa20 f101 	lsrle.w	r1, r0, r1
 800a9aa:	2101      	movgt	r1, #1
 800a9ac:	460a      	mov	r2, r1
 800a9ae:	e7e1      	b.n	800a974 <__ulp+0x18>
 800a9b0:	7ff00000 	.word	0x7ff00000

0800a9b4 <__b2d>:
 800a9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b6:	6905      	ldr	r5, [r0, #16]
 800a9b8:	f100 0714 	add.w	r7, r0, #20
 800a9bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a9c0:	1f2e      	subs	r6, r5, #4
 800a9c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f7ff fd48 	bl	800a45c <__hi0bits>
 800a9cc:	f1c0 0320 	rsb	r3, r0, #32
 800a9d0:	280a      	cmp	r0, #10
 800a9d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aa50 <__b2d+0x9c>
 800a9d6:	600b      	str	r3, [r1, #0]
 800a9d8:	dc14      	bgt.n	800aa04 <__b2d+0x50>
 800a9da:	f1c0 0e0b 	rsb	lr, r0, #11
 800a9de:	fa24 f10e 	lsr.w	r1, r4, lr
 800a9e2:	42b7      	cmp	r7, r6
 800a9e4:	ea41 030c 	orr.w	r3, r1, ip
 800a9e8:	bf34      	ite	cc
 800a9ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a9ee:	2100      	movcs	r1, #0
 800a9f0:	3015      	adds	r0, #21
 800a9f2:	fa04 f000 	lsl.w	r0, r4, r0
 800a9f6:	fa21 f10e 	lsr.w	r1, r1, lr
 800a9fa:	ea40 0201 	orr.w	r2, r0, r1
 800a9fe:	ec43 2b10 	vmov	d0, r2, r3
 800aa02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa04:	42b7      	cmp	r7, r6
 800aa06:	bf3a      	itte	cc
 800aa08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aa0c:	f1a5 0608 	subcc.w	r6, r5, #8
 800aa10:	2100      	movcs	r1, #0
 800aa12:	380b      	subs	r0, #11
 800aa14:	d017      	beq.n	800aa46 <__b2d+0x92>
 800aa16:	f1c0 0c20 	rsb	ip, r0, #32
 800aa1a:	fa04 f500 	lsl.w	r5, r4, r0
 800aa1e:	42be      	cmp	r6, r7
 800aa20:	fa21 f40c 	lsr.w	r4, r1, ip
 800aa24:	ea45 0504 	orr.w	r5, r5, r4
 800aa28:	bf8c      	ite	hi
 800aa2a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aa2e:	2400      	movls	r4, #0
 800aa30:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800aa34:	fa01 f000 	lsl.w	r0, r1, r0
 800aa38:	fa24 f40c 	lsr.w	r4, r4, ip
 800aa3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aa40:	ea40 0204 	orr.w	r2, r0, r4
 800aa44:	e7db      	b.n	800a9fe <__b2d+0x4a>
 800aa46:	ea44 030c 	orr.w	r3, r4, ip
 800aa4a:	460a      	mov	r2, r1
 800aa4c:	e7d7      	b.n	800a9fe <__b2d+0x4a>
 800aa4e:	bf00      	nop
 800aa50:	3ff00000 	.word	0x3ff00000

0800aa54 <__d2b>:
 800aa54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa58:	4689      	mov	r9, r1
 800aa5a:	2101      	movs	r1, #1
 800aa5c:	ec57 6b10 	vmov	r6, r7, d0
 800aa60:	4690      	mov	r8, r2
 800aa62:	f7ff fc09 	bl	800a278 <_Balloc>
 800aa66:	4604      	mov	r4, r0
 800aa68:	b930      	cbnz	r0, 800aa78 <__d2b+0x24>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	4b25      	ldr	r3, [pc, #148]	; (800ab04 <__d2b+0xb0>)
 800aa6e:	4826      	ldr	r0, [pc, #152]	; (800ab08 <__d2b+0xb4>)
 800aa70:	f240 310a 	movw	r1, #778	; 0x30a
 800aa74:	f000 fdc0 	bl	800b5f8 <__assert_func>
 800aa78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa80:	bb35      	cbnz	r5, 800aad0 <__d2b+0x7c>
 800aa82:	2e00      	cmp	r6, #0
 800aa84:	9301      	str	r3, [sp, #4]
 800aa86:	d028      	beq.n	800aada <__d2b+0x86>
 800aa88:	4668      	mov	r0, sp
 800aa8a:	9600      	str	r6, [sp, #0]
 800aa8c:	f7ff fd06 	bl	800a49c <__lo0bits>
 800aa90:	9900      	ldr	r1, [sp, #0]
 800aa92:	b300      	cbz	r0, 800aad6 <__d2b+0x82>
 800aa94:	9a01      	ldr	r2, [sp, #4]
 800aa96:	f1c0 0320 	rsb	r3, r0, #32
 800aa9a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa9e:	430b      	orrs	r3, r1
 800aaa0:	40c2      	lsrs	r2, r0
 800aaa2:	6163      	str	r3, [r4, #20]
 800aaa4:	9201      	str	r2, [sp, #4]
 800aaa6:	9b01      	ldr	r3, [sp, #4]
 800aaa8:	61a3      	str	r3, [r4, #24]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	bf14      	ite	ne
 800aaae:	2202      	movne	r2, #2
 800aab0:	2201      	moveq	r2, #1
 800aab2:	6122      	str	r2, [r4, #16]
 800aab4:	b1d5      	cbz	r5, 800aaec <__d2b+0x98>
 800aab6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aaba:	4405      	add	r5, r0
 800aabc:	f8c9 5000 	str.w	r5, [r9]
 800aac0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aac4:	f8c8 0000 	str.w	r0, [r8]
 800aac8:	4620      	mov	r0, r4
 800aaca:	b003      	add	sp, #12
 800aacc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aad4:	e7d5      	b.n	800aa82 <__d2b+0x2e>
 800aad6:	6161      	str	r1, [r4, #20]
 800aad8:	e7e5      	b.n	800aaa6 <__d2b+0x52>
 800aada:	a801      	add	r0, sp, #4
 800aadc:	f7ff fcde 	bl	800a49c <__lo0bits>
 800aae0:	9b01      	ldr	r3, [sp, #4]
 800aae2:	6163      	str	r3, [r4, #20]
 800aae4:	2201      	movs	r2, #1
 800aae6:	6122      	str	r2, [r4, #16]
 800aae8:	3020      	adds	r0, #32
 800aaea:	e7e3      	b.n	800aab4 <__d2b+0x60>
 800aaec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aaf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aaf4:	f8c9 0000 	str.w	r0, [r9]
 800aaf8:	6918      	ldr	r0, [r3, #16]
 800aafa:	f7ff fcaf 	bl	800a45c <__hi0bits>
 800aafe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab02:	e7df      	b.n	800aac4 <__d2b+0x70>
 800ab04:	0800be40 	.word	0x0800be40
 800ab08:	0800bf30 	.word	0x0800bf30

0800ab0c <__ratio>:
 800ab0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab10:	4688      	mov	r8, r1
 800ab12:	4669      	mov	r1, sp
 800ab14:	4681      	mov	r9, r0
 800ab16:	f7ff ff4d 	bl	800a9b4 <__b2d>
 800ab1a:	a901      	add	r1, sp, #4
 800ab1c:	4640      	mov	r0, r8
 800ab1e:	ec55 4b10 	vmov	r4, r5, d0
 800ab22:	f7ff ff47 	bl	800a9b4 <__b2d>
 800ab26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab2a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab2e:	eba3 0c02 	sub.w	ip, r3, r2
 800ab32:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab36:	1a9b      	subs	r3, r3, r2
 800ab38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab3c:	ec51 0b10 	vmov	r0, r1, d0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	bfd6      	itet	le
 800ab44:	460a      	movle	r2, r1
 800ab46:	462a      	movgt	r2, r5
 800ab48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab4c:	468b      	mov	fp, r1
 800ab4e:	462f      	mov	r7, r5
 800ab50:	bfd4      	ite	le
 800ab52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ab56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	ee10 2a10 	vmov	r2, s0
 800ab60:	465b      	mov	r3, fp
 800ab62:	4639      	mov	r1, r7
 800ab64:	f7f5 fe4a 	bl	80007fc <__aeabi_ddiv>
 800ab68:	ec41 0b10 	vmov	d0, r0, r1
 800ab6c:	b003      	add	sp, #12
 800ab6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab72 <__copybits>:
 800ab72:	3901      	subs	r1, #1
 800ab74:	b570      	push	{r4, r5, r6, lr}
 800ab76:	1149      	asrs	r1, r1, #5
 800ab78:	6914      	ldr	r4, [r2, #16]
 800ab7a:	3101      	adds	r1, #1
 800ab7c:	f102 0314 	add.w	r3, r2, #20
 800ab80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab88:	1f05      	subs	r5, r0, #4
 800ab8a:	42a3      	cmp	r3, r4
 800ab8c:	d30c      	bcc.n	800aba8 <__copybits+0x36>
 800ab8e:	1aa3      	subs	r3, r4, r2
 800ab90:	3b11      	subs	r3, #17
 800ab92:	f023 0303 	bic.w	r3, r3, #3
 800ab96:	3211      	adds	r2, #17
 800ab98:	42a2      	cmp	r2, r4
 800ab9a:	bf88      	it	hi
 800ab9c:	2300      	movhi	r3, #0
 800ab9e:	4418      	add	r0, r3
 800aba0:	2300      	movs	r3, #0
 800aba2:	4288      	cmp	r0, r1
 800aba4:	d305      	bcc.n	800abb2 <__copybits+0x40>
 800aba6:	bd70      	pop	{r4, r5, r6, pc}
 800aba8:	f853 6b04 	ldr.w	r6, [r3], #4
 800abac:	f845 6f04 	str.w	r6, [r5, #4]!
 800abb0:	e7eb      	b.n	800ab8a <__copybits+0x18>
 800abb2:	f840 3b04 	str.w	r3, [r0], #4
 800abb6:	e7f4      	b.n	800aba2 <__copybits+0x30>

0800abb8 <__any_on>:
 800abb8:	f100 0214 	add.w	r2, r0, #20
 800abbc:	6900      	ldr	r0, [r0, #16]
 800abbe:	114b      	asrs	r3, r1, #5
 800abc0:	4298      	cmp	r0, r3
 800abc2:	b510      	push	{r4, lr}
 800abc4:	db11      	blt.n	800abea <__any_on+0x32>
 800abc6:	dd0a      	ble.n	800abde <__any_on+0x26>
 800abc8:	f011 011f 	ands.w	r1, r1, #31
 800abcc:	d007      	beq.n	800abde <__any_on+0x26>
 800abce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800abd2:	fa24 f001 	lsr.w	r0, r4, r1
 800abd6:	fa00 f101 	lsl.w	r1, r0, r1
 800abda:	428c      	cmp	r4, r1
 800abdc:	d10b      	bne.n	800abf6 <__any_on+0x3e>
 800abde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d803      	bhi.n	800abee <__any_on+0x36>
 800abe6:	2000      	movs	r0, #0
 800abe8:	bd10      	pop	{r4, pc}
 800abea:	4603      	mov	r3, r0
 800abec:	e7f7      	b.n	800abde <__any_on+0x26>
 800abee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abf2:	2900      	cmp	r1, #0
 800abf4:	d0f5      	beq.n	800abe2 <__any_on+0x2a>
 800abf6:	2001      	movs	r0, #1
 800abf8:	e7f6      	b.n	800abe8 <__any_on+0x30>

0800abfa <_calloc_r>:
 800abfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abfc:	fba1 2402 	umull	r2, r4, r1, r2
 800ac00:	b94c      	cbnz	r4, 800ac16 <_calloc_r+0x1c>
 800ac02:	4611      	mov	r1, r2
 800ac04:	9201      	str	r2, [sp, #4]
 800ac06:	f000 f87b 	bl	800ad00 <_malloc_r>
 800ac0a:	9a01      	ldr	r2, [sp, #4]
 800ac0c:	4605      	mov	r5, r0
 800ac0e:	b930      	cbnz	r0, 800ac1e <_calloc_r+0x24>
 800ac10:	4628      	mov	r0, r5
 800ac12:	b003      	add	sp, #12
 800ac14:	bd30      	pop	{r4, r5, pc}
 800ac16:	220c      	movs	r2, #12
 800ac18:	6002      	str	r2, [r0, #0]
 800ac1a:	2500      	movs	r5, #0
 800ac1c:	e7f8      	b.n	800ac10 <_calloc_r+0x16>
 800ac1e:	4621      	mov	r1, r4
 800ac20:	f7fc f8b8 	bl	8006d94 <memset>
 800ac24:	e7f4      	b.n	800ac10 <_calloc_r+0x16>
	...

0800ac28 <_free_r>:
 800ac28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac2a:	2900      	cmp	r1, #0
 800ac2c:	d044      	beq.n	800acb8 <_free_r+0x90>
 800ac2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac32:	9001      	str	r0, [sp, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f1a1 0404 	sub.w	r4, r1, #4
 800ac3a:	bfb8      	it	lt
 800ac3c:	18e4      	addlt	r4, r4, r3
 800ac3e:	f000 fd69 	bl	800b714 <__malloc_lock>
 800ac42:	4a1e      	ldr	r2, [pc, #120]	; (800acbc <_free_r+0x94>)
 800ac44:	9801      	ldr	r0, [sp, #4]
 800ac46:	6813      	ldr	r3, [r2, #0]
 800ac48:	b933      	cbnz	r3, 800ac58 <_free_r+0x30>
 800ac4a:	6063      	str	r3, [r4, #4]
 800ac4c:	6014      	str	r4, [r2, #0]
 800ac4e:	b003      	add	sp, #12
 800ac50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac54:	f000 bd64 	b.w	800b720 <__malloc_unlock>
 800ac58:	42a3      	cmp	r3, r4
 800ac5a:	d908      	bls.n	800ac6e <_free_r+0x46>
 800ac5c:	6825      	ldr	r5, [r4, #0]
 800ac5e:	1961      	adds	r1, r4, r5
 800ac60:	428b      	cmp	r3, r1
 800ac62:	bf01      	itttt	eq
 800ac64:	6819      	ldreq	r1, [r3, #0]
 800ac66:	685b      	ldreq	r3, [r3, #4]
 800ac68:	1949      	addeq	r1, r1, r5
 800ac6a:	6021      	streq	r1, [r4, #0]
 800ac6c:	e7ed      	b.n	800ac4a <_free_r+0x22>
 800ac6e:	461a      	mov	r2, r3
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	b10b      	cbz	r3, 800ac78 <_free_r+0x50>
 800ac74:	42a3      	cmp	r3, r4
 800ac76:	d9fa      	bls.n	800ac6e <_free_r+0x46>
 800ac78:	6811      	ldr	r1, [r2, #0]
 800ac7a:	1855      	adds	r5, r2, r1
 800ac7c:	42a5      	cmp	r5, r4
 800ac7e:	d10b      	bne.n	800ac98 <_free_r+0x70>
 800ac80:	6824      	ldr	r4, [r4, #0]
 800ac82:	4421      	add	r1, r4
 800ac84:	1854      	adds	r4, r2, r1
 800ac86:	42a3      	cmp	r3, r4
 800ac88:	6011      	str	r1, [r2, #0]
 800ac8a:	d1e0      	bne.n	800ac4e <_free_r+0x26>
 800ac8c:	681c      	ldr	r4, [r3, #0]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	6053      	str	r3, [r2, #4]
 800ac92:	4421      	add	r1, r4
 800ac94:	6011      	str	r1, [r2, #0]
 800ac96:	e7da      	b.n	800ac4e <_free_r+0x26>
 800ac98:	d902      	bls.n	800aca0 <_free_r+0x78>
 800ac9a:	230c      	movs	r3, #12
 800ac9c:	6003      	str	r3, [r0, #0]
 800ac9e:	e7d6      	b.n	800ac4e <_free_r+0x26>
 800aca0:	6825      	ldr	r5, [r4, #0]
 800aca2:	1961      	adds	r1, r4, r5
 800aca4:	428b      	cmp	r3, r1
 800aca6:	bf04      	itt	eq
 800aca8:	6819      	ldreq	r1, [r3, #0]
 800acaa:	685b      	ldreq	r3, [r3, #4]
 800acac:	6063      	str	r3, [r4, #4]
 800acae:	bf04      	itt	eq
 800acb0:	1949      	addeq	r1, r1, r5
 800acb2:	6021      	streq	r1, [r4, #0]
 800acb4:	6054      	str	r4, [r2, #4]
 800acb6:	e7ca      	b.n	800ac4e <_free_r+0x26>
 800acb8:	b003      	add	sp, #12
 800acba:	bd30      	pop	{r4, r5, pc}
 800acbc:	200006a4 	.word	0x200006a4

0800acc0 <sbrk_aligned>:
 800acc0:	b570      	push	{r4, r5, r6, lr}
 800acc2:	4e0e      	ldr	r6, [pc, #56]	; (800acfc <sbrk_aligned+0x3c>)
 800acc4:	460c      	mov	r4, r1
 800acc6:	6831      	ldr	r1, [r6, #0]
 800acc8:	4605      	mov	r5, r0
 800acca:	b911      	cbnz	r1, 800acd2 <sbrk_aligned+0x12>
 800accc:	f000 fb4c 	bl	800b368 <_sbrk_r>
 800acd0:	6030      	str	r0, [r6, #0]
 800acd2:	4621      	mov	r1, r4
 800acd4:	4628      	mov	r0, r5
 800acd6:	f000 fb47 	bl	800b368 <_sbrk_r>
 800acda:	1c43      	adds	r3, r0, #1
 800acdc:	d00a      	beq.n	800acf4 <sbrk_aligned+0x34>
 800acde:	1cc4      	adds	r4, r0, #3
 800ace0:	f024 0403 	bic.w	r4, r4, #3
 800ace4:	42a0      	cmp	r0, r4
 800ace6:	d007      	beq.n	800acf8 <sbrk_aligned+0x38>
 800ace8:	1a21      	subs	r1, r4, r0
 800acea:	4628      	mov	r0, r5
 800acec:	f000 fb3c 	bl	800b368 <_sbrk_r>
 800acf0:	3001      	adds	r0, #1
 800acf2:	d101      	bne.n	800acf8 <sbrk_aligned+0x38>
 800acf4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800acf8:	4620      	mov	r0, r4
 800acfa:	bd70      	pop	{r4, r5, r6, pc}
 800acfc:	200006a8 	.word	0x200006a8

0800ad00 <_malloc_r>:
 800ad00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad04:	1ccd      	adds	r5, r1, #3
 800ad06:	f025 0503 	bic.w	r5, r5, #3
 800ad0a:	3508      	adds	r5, #8
 800ad0c:	2d0c      	cmp	r5, #12
 800ad0e:	bf38      	it	cc
 800ad10:	250c      	movcc	r5, #12
 800ad12:	2d00      	cmp	r5, #0
 800ad14:	4607      	mov	r7, r0
 800ad16:	db01      	blt.n	800ad1c <_malloc_r+0x1c>
 800ad18:	42a9      	cmp	r1, r5
 800ad1a:	d905      	bls.n	800ad28 <_malloc_r+0x28>
 800ad1c:	230c      	movs	r3, #12
 800ad1e:	603b      	str	r3, [r7, #0]
 800ad20:	2600      	movs	r6, #0
 800ad22:	4630      	mov	r0, r6
 800ad24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad28:	4e2e      	ldr	r6, [pc, #184]	; (800ade4 <_malloc_r+0xe4>)
 800ad2a:	f000 fcf3 	bl	800b714 <__malloc_lock>
 800ad2e:	6833      	ldr	r3, [r6, #0]
 800ad30:	461c      	mov	r4, r3
 800ad32:	bb34      	cbnz	r4, 800ad82 <_malloc_r+0x82>
 800ad34:	4629      	mov	r1, r5
 800ad36:	4638      	mov	r0, r7
 800ad38:	f7ff ffc2 	bl	800acc0 <sbrk_aligned>
 800ad3c:	1c43      	adds	r3, r0, #1
 800ad3e:	4604      	mov	r4, r0
 800ad40:	d14d      	bne.n	800adde <_malloc_r+0xde>
 800ad42:	6834      	ldr	r4, [r6, #0]
 800ad44:	4626      	mov	r6, r4
 800ad46:	2e00      	cmp	r6, #0
 800ad48:	d140      	bne.n	800adcc <_malloc_r+0xcc>
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4638      	mov	r0, r7
 800ad50:	eb04 0803 	add.w	r8, r4, r3
 800ad54:	f000 fb08 	bl	800b368 <_sbrk_r>
 800ad58:	4580      	cmp	r8, r0
 800ad5a:	d13a      	bne.n	800add2 <_malloc_r+0xd2>
 800ad5c:	6821      	ldr	r1, [r4, #0]
 800ad5e:	3503      	adds	r5, #3
 800ad60:	1a6d      	subs	r5, r5, r1
 800ad62:	f025 0503 	bic.w	r5, r5, #3
 800ad66:	3508      	adds	r5, #8
 800ad68:	2d0c      	cmp	r5, #12
 800ad6a:	bf38      	it	cc
 800ad6c:	250c      	movcc	r5, #12
 800ad6e:	4629      	mov	r1, r5
 800ad70:	4638      	mov	r0, r7
 800ad72:	f7ff ffa5 	bl	800acc0 <sbrk_aligned>
 800ad76:	3001      	adds	r0, #1
 800ad78:	d02b      	beq.n	800add2 <_malloc_r+0xd2>
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	442b      	add	r3, r5
 800ad7e:	6023      	str	r3, [r4, #0]
 800ad80:	e00e      	b.n	800ada0 <_malloc_r+0xa0>
 800ad82:	6822      	ldr	r2, [r4, #0]
 800ad84:	1b52      	subs	r2, r2, r5
 800ad86:	d41e      	bmi.n	800adc6 <_malloc_r+0xc6>
 800ad88:	2a0b      	cmp	r2, #11
 800ad8a:	d916      	bls.n	800adba <_malloc_r+0xba>
 800ad8c:	1961      	adds	r1, r4, r5
 800ad8e:	42a3      	cmp	r3, r4
 800ad90:	6025      	str	r5, [r4, #0]
 800ad92:	bf18      	it	ne
 800ad94:	6059      	strne	r1, [r3, #4]
 800ad96:	6863      	ldr	r3, [r4, #4]
 800ad98:	bf08      	it	eq
 800ad9a:	6031      	streq	r1, [r6, #0]
 800ad9c:	5162      	str	r2, [r4, r5]
 800ad9e:	604b      	str	r3, [r1, #4]
 800ada0:	4638      	mov	r0, r7
 800ada2:	f104 060b 	add.w	r6, r4, #11
 800ada6:	f000 fcbb 	bl	800b720 <__malloc_unlock>
 800adaa:	f026 0607 	bic.w	r6, r6, #7
 800adae:	1d23      	adds	r3, r4, #4
 800adb0:	1af2      	subs	r2, r6, r3
 800adb2:	d0b6      	beq.n	800ad22 <_malloc_r+0x22>
 800adb4:	1b9b      	subs	r3, r3, r6
 800adb6:	50a3      	str	r3, [r4, r2]
 800adb8:	e7b3      	b.n	800ad22 <_malloc_r+0x22>
 800adba:	6862      	ldr	r2, [r4, #4]
 800adbc:	42a3      	cmp	r3, r4
 800adbe:	bf0c      	ite	eq
 800adc0:	6032      	streq	r2, [r6, #0]
 800adc2:	605a      	strne	r2, [r3, #4]
 800adc4:	e7ec      	b.n	800ada0 <_malloc_r+0xa0>
 800adc6:	4623      	mov	r3, r4
 800adc8:	6864      	ldr	r4, [r4, #4]
 800adca:	e7b2      	b.n	800ad32 <_malloc_r+0x32>
 800adcc:	4634      	mov	r4, r6
 800adce:	6876      	ldr	r6, [r6, #4]
 800add0:	e7b9      	b.n	800ad46 <_malloc_r+0x46>
 800add2:	230c      	movs	r3, #12
 800add4:	603b      	str	r3, [r7, #0]
 800add6:	4638      	mov	r0, r7
 800add8:	f000 fca2 	bl	800b720 <__malloc_unlock>
 800addc:	e7a1      	b.n	800ad22 <_malloc_r+0x22>
 800adde:	6025      	str	r5, [r4, #0]
 800ade0:	e7de      	b.n	800ada0 <_malloc_r+0xa0>
 800ade2:	bf00      	nop
 800ade4:	200006a4 	.word	0x200006a4

0800ade8 <__ssputs_r>:
 800ade8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adec:	688e      	ldr	r6, [r1, #8]
 800adee:	429e      	cmp	r6, r3
 800adf0:	4682      	mov	sl, r0
 800adf2:	460c      	mov	r4, r1
 800adf4:	4690      	mov	r8, r2
 800adf6:	461f      	mov	r7, r3
 800adf8:	d838      	bhi.n	800ae6c <__ssputs_r+0x84>
 800adfa:	898a      	ldrh	r2, [r1, #12]
 800adfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae00:	d032      	beq.n	800ae68 <__ssputs_r+0x80>
 800ae02:	6825      	ldr	r5, [r4, #0]
 800ae04:	6909      	ldr	r1, [r1, #16]
 800ae06:	eba5 0901 	sub.w	r9, r5, r1
 800ae0a:	6965      	ldr	r5, [r4, #20]
 800ae0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae14:	3301      	adds	r3, #1
 800ae16:	444b      	add	r3, r9
 800ae18:	106d      	asrs	r5, r5, #1
 800ae1a:	429d      	cmp	r5, r3
 800ae1c:	bf38      	it	cc
 800ae1e:	461d      	movcc	r5, r3
 800ae20:	0553      	lsls	r3, r2, #21
 800ae22:	d531      	bpl.n	800ae88 <__ssputs_r+0xa0>
 800ae24:	4629      	mov	r1, r5
 800ae26:	f7ff ff6b 	bl	800ad00 <_malloc_r>
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	b950      	cbnz	r0, 800ae44 <__ssputs_r+0x5c>
 800ae2e:	230c      	movs	r3, #12
 800ae30:	f8ca 3000 	str.w	r3, [sl]
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae3a:	81a3      	strh	r3, [r4, #12]
 800ae3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae44:	6921      	ldr	r1, [r4, #16]
 800ae46:	464a      	mov	r2, r9
 800ae48:	f7ff fa08 	bl	800a25c <memcpy>
 800ae4c:	89a3      	ldrh	r3, [r4, #12]
 800ae4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae56:	81a3      	strh	r3, [r4, #12]
 800ae58:	6126      	str	r6, [r4, #16]
 800ae5a:	6165      	str	r5, [r4, #20]
 800ae5c:	444e      	add	r6, r9
 800ae5e:	eba5 0509 	sub.w	r5, r5, r9
 800ae62:	6026      	str	r6, [r4, #0]
 800ae64:	60a5      	str	r5, [r4, #8]
 800ae66:	463e      	mov	r6, r7
 800ae68:	42be      	cmp	r6, r7
 800ae6a:	d900      	bls.n	800ae6e <__ssputs_r+0x86>
 800ae6c:	463e      	mov	r6, r7
 800ae6e:	6820      	ldr	r0, [r4, #0]
 800ae70:	4632      	mov	r2, r6
 800ae72:	4641      	mov	r1, r8
 800ae74:	f000 fc34 	bl	800b6e0 <memmove>
 800ae78:	68a3      	ldr	r3, [r4, #8]
 800ae7a:	1b9b      	subs	r3, r3, r6
 800ae7c:	60a3      	str	r3, [r4, #8]
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	4433      	add	r3, r6
 800ae82:	6023      	str	r3, [r4, #0]
 800ae84:	2000      	movs	r0, #0
 800ae86:	e7db      	b.n	800ae40 <__ssputs_r+0x58>
 800ae88:	462a      	mov	r2, r5
 800ae8a:	f000 fc4f 	bl	800b72c <_realloc_r>
 800ae8e:	4606      	mov	r6, r0
 800ae90:	2800      	cmp	r0, #0
 800ae92:	d1e1      	bne.n	800ae58 <__ssputs_r+0x70>
 800ae94:	6921      	ldr	r1, [r4, #16]
 800ae96:	4650      	mov	r0, sl
 800ae98:	f7ff fec6 	bl	800ac28 <_free_r>
 800ae9c:	e7c7      	b.n	800ae2e <__ssputs_r+0x46>
	...

0800aea0 <_svfiprintf_r>:
 800aea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea4:	4698      	mov	r8, r3
 800aea6:	898b      	ldrh	r3, [r1, #12]
 800aea8:	061b      	lsls	r3, r3, #24
 800aeaa:	b09d      	sub	sp, #116	; 0x74
 800aeac:	4607      	mov	r7, r0
 800aeae:	460d      	mov	r5, r1
 800aeb0:	4614      	mov	r4, r2
 800aeb2:	d50e      	bpl.n	800aed2 <_svfiprintf_r+0x32>
 800aeb4:	690b      	ldr	r3, [r1, #16]
 800aeb6:	b963      	cbnz	r3, 800aed2 <_svfiprintf_r+0x32>
 800aeb8:	2140      	movs	r1, #64	; 0x40
 800aeba:	f7ff ff21 	bl	800ad00 <_malloc_r>
 800aebe:	6028      	str	r0, [r5, #0]
 800aec0:	6128      	str	r0, [r5, #16]
 800aec2:	b920      	cbnz	r0, 800aece <_svfiprintf_r+0x2e>
 800aec4:	230c      	movs	r3, #12
 800aec6:	603b      	str	r3, [r7, #0]
 800aec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aecc:	e0d1      	b.n	800b072 <_svfiprintf_r+0x1d2>
 800aece:	2340      	movs	r3, #64	; 0x40
 800aed0:	616b      	str	r3, [r5, #20]
 800aed2:	2300      	movs	r3, #0
 800aed4:	9309      	str	r3, [sp, #36]	; 0x24
 800aed6:	2320      	movs	r3, #32
 800aed8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aedc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aee0:	2330      	movs	r3, #48	; 0x30
 800aee2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b08c <_svfiprintf_r+0x1ec>
 800aee6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aeea:	f04f 0901 	mov.w	r9, #1
 800aeee:	4623      	mov	r3, r4
 800aef0:	469a      	mov	sl, r3
 800aef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aef6:	b10a      	cbz	r2, 800aefc <_svfiprintf_r+0x5c>
 800aef8:	2a25      	cmp	r2, #37	; 0x25
 800aefa:	d1f9      	bne.n	800aef0 <_svfiprintf_r+0x50>
 800aefc:	ebba 0b04 	subs.w	fp, sl, r4
 800af00:	d00b      	beq.n	800af1a <_svfiprintf_r+0x7a>
 800af02:	465b      	mov	r3, fp
 800af04:	4622      	mov	r2, r4
 800af06:	4629      	mov	r1, r5
 800af08:	4638      	mov	r0, r7
 800af0a:	f7ff ff6d 	bl	800ade8 <__ssputs_r>
 800af0e:	3001      	adds	r0, #1
 800af10:	f000 80aa 	beq.w	800b068 <_svfiprintf_r+0x1c8>
 800af14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af16:	445a      	add	r2, fp
 800af18:	9209      	str	r2, [sp, #36]	; 0x24
 800af1a:	f89a 3000 	ldrb.w	r3, [sl]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f000 80a2 	beq.w	800b068 <_svfiprintf_r+0x1c8>
 800af24:	2300      	movs	r3, #0
 800af26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af2e:	f10a 0a01 	add.w	sl, sl, #1
 800af32:	9304      	str	r3, [sp, #16]
 800af34:	9307      	str	r3, [sp, #28]
 800af36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af3a:	931a      	str	r3, [sp, #104]	; 0x68
 800af3c:	4654      	mov	r4, sl
 800af3e:	2205      	movs	r2, #5
 800af40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af44:	4851      	ldr	r0, [pc, #324]	; (800b08c <_svfiprintf_r+0x1ec>)
 800af46:	f7f5 f923 	bl	8000190 <memchr>
 800af4a:	9a04      	ldr	r2, [sp, #16]
 800af4c:	b9d8      	cbnz	r0, 800af86 <_svfiprintf_r+0xe6>
 800af4e:	06d0      	lsls	r0, r2, #27
 800af50:	bf44      	itt	mi
 800af52:	2320      	movmi	r3, #32
 800af54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af58:	0711      	lsls	r1, r2, #28
 800af5a:	bf44      	itt	mi
 800af5c:	232b      	movmi	r3, #43	; 0x2b
 800af5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af62:	f89a 3000 	ldrb.w	r3, [sl]
 800af66:	2b2a      	cmp	r3, #42	; 0x2a
 800af68:	d015      	beq.n	800af96 <_svfiprintf_r+0xf6>
 800af6a:	9a07      	ldr	r2, [sp, #28]
 800af6c:	4654      	mov	r4, sl
 800af6e:	2000      	movs	r0, #0
 800af70:	f04f 0c0a 	mov.w	ip, #10
 800af74:	4621      	mov	r1, r4
 800af76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af7a:	3b30      	subs	r3, #48	; 0x30
 800af7c:	2b09      	cmp	r3, #9
 800af7e:	d94e      	bls.n	800b01e <_svfiprintf_r+0x17e>
 800af80:	b1b0      	cbz	r0, 800afb0 <_svfiprintf_r+0x110>
 800af82:	9207      	str	r2, [sp, #28]
 800af84:	e014      	b.n	800afb0 <_svfiprintf_r+0x110>
 800af86:	eba0 0308 	sub.w	r3, r0, r8
 800af8a:	fa09 f303 	lsl.w	r3, r9, r3
 800af8e:	4313      	orrs	r3, r2
 800af90:	9304      	str	r3, [sp, #16]
 800af92:	46a2      	mov	sl, r4
 800af94:	e7d2      	b.n	800af3c <_svfiprintf_r+0x9c>
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	1d19      	adds	r1, r3, #4
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	9103      	str	r1, [sp, #12]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	bfbb      	ittet	lt
 800afa2:	425b      	neglt	r3, r3
 800afa4:	f042 0202 	orrlt.w	r2, r2, #2
 800afa8:	9307      	strge	r3, [sp, #28]
 800afaa:	9307      	strlt	r3, [sp, #28]
 800afac:	bfb8      	it	lt
 800afae:	9204      	strlt	r2, [sp, #16]
 800afb0:	7823      	ldrb	r3, [r4, #0]
 800afb2:	2b2e      	cmp	r3, #46	; 0x2e
 800afb4:	d10c      	bne.n	800afd0 <_svfiprintf_r+0x130>
 800afb6:	7863      	ldrb	r3, [r4, #1]
 800afb8:	2b2a      	cmp	r3, #42	; 0x2a
 800afba:	d135      	bne.n	800b028 <_svfiprintf_r+0x188>
 800afbc:	9b03      	ldr	r3, [sp, #12]
 800afbe:	1d1a      	adds	r2, r3, #4
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	9203      	str	r2, [sp, #12]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	bfb8      	it	lt
 800afc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800afcc:	3402      	adds	r4, #2
 800afce:	9305      	str	r3, [sp, #20]
 800afd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b09c <_svfiprintf_r+0x1fc>
 800afd4:	7821      	ldrb	r1, [r4, #0]
 800afd6:	2203      	movs	r2, #3
 800afd8:	4650      	mov	r0, sl
 800afda:	f7f5 f8d9 	bl	8000190 <memchr>
 800afde:	b140      	cbz	r0, 800aff2 <_svfiprintf_r+0x152>
 800afe0:	2340      	movs	r3, #64	; 0x40
 800afe2:	eba0 000a 	sub.w	r0, r0, sl
 800afe6:	fa03 f000 	lsl.w	r0, r3, r0
 800afea:	9b04      	ldr	r3, [sp, #16]
 800afec:	4303      	orrs	r3, r0
 800afee:	3401      	adds	r4, #1
 800aff0:	9304      	str	r3, [sp, #16]
 800aff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aff6:	4826      	ldr	r0, [pc, #152]	; (800b090 <_svfiprintf_r+0x1f0>)
 800aff8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800affc:	2206      	movs	r2, #6
 800affe:	f7f5 f8c7 	bl	8000190 <memchr>
 800b002:	2800      	cmp	r0, #0
 800b004:	d038      	beq.n	800b078 <_svfiprintf_r+0x1d8>
 800b006:	4b23      	ldr	r3, [pc, #140]	; (800b094 <_svfiprintf_r+0x1f4>)
 800b008:	bb1b      	cbnz	r3, 800b052 <_svfiprintf_r+0x1b2>
 800b00a:	9b03      	ldr	r3, [sp, #12]
 800b00c:	3307      	adds	r3, #7
 800b00e:	f023 0307 	bic.w	r3, r3, #7
 800b012:	3308      	adds	r3, #8
 800b014:	9303      	str	r3, [sp, #12]
 800b016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b018:	4433      	add	r3, r6
 800b01a:	9309      	str	r3, [sp, #36]	; 0x24
 800b01c:	e767      	b.n	800aeee <_svfiprintf_r+0x4e>
 800b01e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b022:	460c      	mov	r4, r1
 800b024:	2001      	movs	r0, #1
 800b026:	e7a5      	b.n	800af74 <_svfiprintf_r+0xd4>
 800b028:	2300      	movs	r3, #0
 800b02a:	3401      	adds	r4, #1
 800b02c:	9305      	str	r3, [sp, #20]
 800b02e:	4619      	mov	r1, r3
 800b030:	f04f 0c0a 	mov.w	ip, #10
 800b034:	4620      	mov	r0, r4
 800b036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b03a:	3a30      	subs	r2, #48	; 0x30
 800b03c:	2a09      	cmp	r2, #9
 800b03e:	d903      	bls.n	800b048 <_svfiprintf_r+0x1a8>
 800b040:	2b00      	cmp	r3, #0
 800b042:	d0c5      	beq.n	800afd0 <_svfiprintf_r+0x130>
 800b044:	9105      	str	r1, [sp, #20]
 800b046:	e7c3      	b.n	800afd0 <_svfiprintf_r+0x130>
 800b048:	fb0c 2101 	mla	r1, ip, r1, r2
 800b04c:	4604      	mov	r4, r0
 800b04e:	2301      	movs	r3, #1
 800b050:	e7f0      	b.n	800b034 <_svfiprintf_r+0x194>
 800b052:	ab03      	add	r3, sp, #12
 800b054:	9300      	str	r3, [sp, #0]
 800b056:	462a      	mov	r2, r5
 800b058:	4b0f      	ldr	r3, [pc, #60]	; (800b098 <_svfiprintf_r+0x1f8>)
 800b05a:	a904      	add	r1, sp, #16
 800b05c:	4638      	mov	r0, r7
 800b05e:	f7fb ff41 	bl	8006ee4 <_printf_float>
 800b062:	1c42      	adds	r2, r0, #1
 800b064:	4606      	mov	r6, r0
 800b066:	d1d6      	bne.n	800b016 <_svfiprintf_r+0x176>
 800b068:	89ab      	ldrh	r3, [r5, #12]
 800b06a:	065b      	lsls	r3, r3, #25
 800b06c:	f53f af2c 	bmi.w	800aec8 <_svfiprintf_r+0x28>
 800b070:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b072:	b01d      	add	sp, #116	; 0x74
 800b074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b078:	ab03      	add	r3, sp, #12
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	462a      	mov	r2, r5
 800b07e:	4b06      	ldr	r3, [pc, #24]	; (800b098 <_svfiprintf_r+0x1f8>)
 800b080:	a904      	add	r1, sp, #16
 800b082:	4638      	mov	r0, r7
 800b084:	f7fc f9d2 	bl	800742c <_printf_i>
 800b088:	e7eb      	b.n	800b062 <_svfiprintf_r+0x1c2>
 800b08a:	bf00      	nop
 800b08c:	0800c08c 	.word	0x0800c08c
 800b090:	0800c096 	.word	0x0800c096
 800b094:	08006ee5 	.word	0x08006ee5
 800b098:	0800ade9 	.word	0x0800ade9
 800b09c:	0800c092 	.word	0x0800c092

0800b0a0 <__sfputc_r>:
 800b0a0:	6893      	ldr	r3, [r2, #8]
 800b0a2:	3b01      	subs	r3, #1
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	b410      	push	{r4}
 800b0a8:	6093      	str	r3, [r2, #8]
 800b0aa:	da08      	bge.n	800b0be <__sfputc_r+0x1e>
 800b0ac:	6994      	ldr	r4, [r2, #24]
 800b0ae:	42a3      	cmp	r3, r4
 800b0b0:	db01      	blt.n	800b0b6 <__sfputc_r+0x16>
 800b0b2:	290a      	cmp	r1, #10
 800b0b4:	d103      	bne.n	800b0be <__sfputc_r+0x1e>
 800b0b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ba:	f000 b9bd 	b.w	800b438 <__swbuf_r>
 800b0be:	6813      	ldr	r3, [r2, #0]
 800b0c0:	1c58      	adds	r0, r3, #1
 800b0c2:	6010      	str	r0, [r2, #0]
 800b0c4:	7019      	strb	r1, [r3, #0]
 800b0c6:	4608      	mov	r0, r1
 800b0c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0cc:	4770      	bx	lr

0800b0ce <__sfputs_r>:
 800b0ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d0:	4606      	mov	r6, r0
 800b0d2:	460f      	mov	r7, r1
 800b0d4:	4614      	mov	r4, r2
 800b0d6:	18d5      	adds	r5, r2, r3
 800b0d8:	42ac      	cmp	r4, r5
 800b0da:	d101      	bne.n	800b0e0 <__sfputs_r+0x12>
 800b0dc:	2000      	movs	r0, #0
 800b0de:	e007      	b.n	800b0f0 <__sfputs_r+0x22>
 800b0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e4:	463a      	mov	r2, r7
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	f7ff ffda 	bl	800b0a0 <__sfputc_r>
 800b0ec:	1c43      	adds	r3, r0, #1
 800b0ee:	d1f3      	bne.n	800b0d8 <__sfputs_r+0xa>
 800b0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0f4 <_vfiprintf_r>:
 800b0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f8:	460d      	mov	r5, r1
 800b0fa:	b09d      	sub	sp, #116	; 0x74
 800b0fc:	4614      	mov	r4, r2
 800b0fe:	4698      	mov	r8, r3
 800b100:	4606      	mov	r6, r0
 800b102:	b118      	cbz	r0, 800b10c <_vfiprintf_r+0x18>
 800b104:	6983      	ldr	r3, [r0, #24]
 800b106:	b90b      	cbnz	r3, 800b10c <_vfiprintf_r+0x18>
 800b108:	f7fe fc16 	bl	8009938 <__sinit>
 800b10c:	4b89      	ldr	r3, [pc, #548]	; (800b334 <_vfiprintf_r+0x240>)
 800b10e:	429d      	cmp	r5, r3
 800b110:	d11b      	bne.n	800b14a <_vfiprintf_r+0x56>
 800b112:	6875      	ldr	r5, [r6, #4]
 800b114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b116:	07d9      	lsls	r1, r3, #31
 800b118:	d405      	bmi.n	800b126 <_vfiprintf_r+0x32>
 800b11a:	89ab      	ldrh	r3, [r5, #12]
 800b11c:	059a      	lsls	r2, r3, #22
 800b11e:	d402      	bmi.n	800b126 <_vfiprintf_r+0x32>
 800b120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b122:	f7ff f81a 	bl	800a15a <__retarget_lock_acquire_recursive>
 800b126:	89ab      	ldrh	r3, [r5, #12]
 800b128:	071b      	lsls	r3, r3, #28
 800b12a:	d501      	bpl.n	800b130 <_vfiprintf_r+0x3c>
 800b12c:	692b      	ldr	r3, [r5, #16]
 800b12e:	b9eb      	cbnz	r3, 800b16c <_vfiprintf_r+0x78>
 800b130:	4629      	mov	r1, r5
 800b132:	4630      	mov	r0, r6
 800b134:	f000 f9f2 	bl	800b51c <__swsetup_r>
 800b138:	b1c0      	cbz	r0, 800b16c <_vfiprintf_r+0x78>
 800b13a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b13c:	07dc      	lsls	r4, r3, #31
 800b13e:	d50e      	bpl.n	800b15e <_vfiprintf_r+0x6a>
 800b140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b144:	b01d      	add	sp, #116	; 0x74
 800b146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b14a:	4b7b      	ldr	r3, [pc, #492]	; (800b338 <_vfiprintf_r+0x244>)
 800b14c:	429d      	cmp	r5, r3
 800b14e:	d101      	bne.n	800b154 <_vfiprintf_r+0x60>
 800b150:	68b5      	ldr	r5, [r6, #8]
 800b152:	e7df      	b.n	800b114 <_vfiprintf_r+0x20>
 800b154:	4b79      	ldr	r3, [pc, #484]	; (800b33c <_vfiprintf_r+0x248>)
 800b156:	429d      	cmp	r5, r3
 800b158:	bf08      	it	eq
 800b15a:	68f5      	ldreq	r5, [r6, #12]
 800b15c:	e7da      	b.n	800b114 <_vfiprintf_r+0x20>
 800b15e:	89ab      	ldrh	r3, [r5, #12]
 800b160:	0598      	lsls	r0, r3, #22
 800b162:	d4ed      	bmi.n	800b140 <_vfiprintf_r+0x4c>
 800b164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b166:	f7fe fff9 	bl	800a15c <__retarget_lock_release_recursive>
 800b16a:	e7e9      	b.n	800b140 <_vfiprintf_r+0x4c>
 800b16c:	2300      	movs	r3, #0
 800b16e:	9309      	str	r3, [sp, #36]	; 0x24
 800b170:	2320      	movs	r3, #32
 800b172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b176:	f8cd 800c 	str.w	r8, [sp, #12]
 800b17a:	2330      	movs	r3, #48	; 0x30
 800b17c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b340 <_vfiprintf_r+0x24c>
 800b180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b184:	f04f 0901 	mov.w	r9, #1
 800b188:	4623      	mov	r3, r4
 800b18a:	469a      	mov	sl, r3
 800b18c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b190:	b10a      	cbz	r2, 800b196 <_vfiprintf_r+0xa2>
 800b192:	2a25      	cmp	r2, #37	; 0x25
 800b194:	d1f9      	bne.n	800b18a <_vfiprintf_r+0x96>
 800b196:	ebba 0b04 	subs.w	fp, sl, r4
 800b19a:	d00b      	beq.n	800b1b4 <_vfiprintf_r+0xc0>
 800b19c:	465b      	mov	r3, fp
 800b19e:	4622      	mov	r2, r4
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	f7ff ff93 	bl	800b0ce <__sfputs_r>
 800b1a8:	3001      	adds	r0, #1
 800b1aa:	f000 80aa 	beq.w	800b302 <_vfiprintf_r+0x20e>
 800b1ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1b0:	445a      	add	r2, fp
 800b1b2:	9209      	str	r2, [sp, #36]	; 0x24
 800b1b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f000 80a2 	beq.w	800b302 <_vfiprintf_r+0x20e>
 800b1be:	2300      	movs	r3, #0
 800b1c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1c8:	f10a 0a01 	add.w	sl, sl, #1
 800b1cc:	9304      	str	r3, [sp, #16]
 800b1ce:	9307      	str	r3, [sp, #28]
 800b1d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1d4:	931a      	str	r3, [sp, #104]	; 0x68
 800b1d6:	4654      	mov	r4, sl
 800b1d8:	2205      	movs	r2, #5
 800b1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1de:	4858      	ldr	r0, [pc, #352]	; (800b340 <_vfiprintf_r+0x24c>)
 800b1e0:	f7f4 ffd6 	bl	8000190 <memchr>
 800b1e4:	9a04      	ldr	r2, [sp, #16]
 800b1e6:	b9d8      	cbnz	r0, 800b220 <_vfiprintf_r+0x12c>
 800b1e8:	06d1      	lsls	r1, r2, #27
 800b1ea:	bf44      	itt	mi
 800b1ec:	2320      	movmi	r3, #32
 800b1ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1f2:	0713      	lsls	r3, r2, #28
 800b1f4:	bf44      	itt	mi
 800b1f6:	232b      	movmi	r3, #43	; 0x2b
 800b1f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b200:	2b2a      	cmp	r3, #42	; 0x2a
 800b202:	d015      	beq.n	800b230 <_vfiprintf_r+0x13c>
 800b204:	9a07      	ldr	r2, [sp, #28]
 800b206:	4654      	mov	r4, sl
 800b208:	2000      	movs	r0, #0
 800b20a:	f04f 0c0a 	mov.w	ip, #10
 800b20e:	4621      	mov	r1, r4
 800b210:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b214:	3b30      	subs	r3, #48	; 0x30
 800b216:	2b09      	cmp	r3, #9
 800b218:	d94e      	bls.n	800b2b8 <_vfiprintf_r+0x1c4>
 800b21a:	b1b0      	cbz	r0, 800b24a <_vfiprintf_r+0x156>
 800b21c:	9207      	str	r2, [sp, #28]
 800b21e:	e014      	b.n	800b24a <_vfiprintf_r+0x156>
 800b220:	eba0 0308 	sub.w	r3, r0, r8
 800b224:	fa09 f303 	lsl.w	r3, r9, r3
 800b228:	4313      	orrs	r3, r2
 800b22a:	9304      	str	r3, [sp, #16]
 800b22c:	46a2      	mov	sl, r4
 800b22e:	e7d2      	b.n	800b1d6 <_vfiprintf_r+0xe2>
 800b230:	9b03      	ldr	r3, [sp, #12]
 800b232:	1d19      	adds	r1, r3, #4
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	9103      	str	r1, [sp, #12]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	bfbb      	ittet	lt
 800b23c:	425b      	neglt	r3, r3
 800b23e:	f042 0202 	orrlt.w	r2, r2, #2
 800b242:	9307      	strge	r3, [sp, #28]
 800b244:	9307      	strlt	r3, [sp, #28]
 800b246:	bfb8      	it	lt
 800b248:	9204      	strlt	r2, [sp, #16]
 800b24a:	7823      	ldrb	r3, [r4, #0]
 800b24c:	2b2e      	cmp	r3, #46	; 0x2e
 800b24e:	d10c      	bne.n	800b26a <_vfiprintf_r+0x176>
 800b250:	7863      	ldrb	r3, [r4, #1]
 800b252:	2b2a      	cmp	r3, #42	; 0x2a
 800b254:	d135      	bne.n	800b2c2 <_vfiprintf_r+0x1ce>
 800b256:	9b03      	ldr	r3, [sp, #12]
 800b258:	1d1a      	adds	r2, r3, #4
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	9203      	str	r2, [sp, #12]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	bfb8      	it	lt
 800b262:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b266:	3402      	adds	r4, #2
 800b268:	9305      	str	r3, [sp, #20]
 800b26a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b350 <_vfiprintf_r+0x25c>
 800b26e:	7821      	ldrb	r1, [r4, #0]
 800b270:	2203      	movs	r2, #3
 800b272:	4650      	mov	r0, sl
 800b274:	f7f4 ff8c 	bl	8000190 <memchr>
 800b278:	b140      	cbz	r0, 800b28c <_vfiprintf_r+0x198>
 800b27a:	2340      	movs	r3, #64	; 0x40
 800b27c:	eba0 000a 	sub.w	r0, r0, sl
 800b280:	fa03 f000 	lsl.w	r0, r3, r0
 800b284:	9b04      	ldr	r3, [sp, #16]
 800b286:	4303      	orrs	r3, r0
 800b288:	3401      	adds	r4, #1
 800b28a:	9304      	str	r3, [sp, #16]
 800b28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b290:	482c      	ldr	r0, [pc, #176]	; (800b344 <_vfiprintf_r+0x250>)
 800b292:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b296:	2206      	movs	r2, #6
 800b298:	f7f4 ff7a 	bl	8000190 <memchr>
 800b29c:	2800      	cmp	r0, #0
 800b29e:	d03f      	beq.n	800b320 <_vfiprintf_r+0x22c>
 800b2a0:	4b29      	ldr	r3, [pc, #164]	; (800b348 <_vfiprintf_r+0x254>)
 800b2a2:	bb1b      	cbnz	r3, 800b2ec <_vfiprintf_r+0x1f8>
 800b2a4:	9b03      	ldr	r3, [sp, #12]
 800b2a6:	3307      	adds	r3, #7
 800b2a8:	f023 0307 	bic.w	r3, r3, #7
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	9303      	str	r3, [sp, #12]
 800b2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b2:	443b      	add	r3, r7
 800b2b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b6:	e767      	b.n	800b188 <_vfiprintf_r+0x94>
 800b2b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2bc:	460c      	mov	r4, r1
 800b2be:	2001      	movs	r0, #1
 800b2c0:	e7a5      	b.n	800b20e <_vfiprintf_r+0x11a>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	3401      	adds	r4, #1
 800b2c6:	9305      	str	r3, [sp, #20]
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	f04f 0c0a 	mov.w	ip, #10
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2d4:	3a30      	subs	r2, #48	; 0x30
 800b2d6:	2a09      	cmp	r2, #9
 800b2d8:	d903      	bls.n	800b2e2 <_vfiprintf_r+0x1ee>
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d0c5      	beq.n	800b26a <_vfiprintf_r+0x176>
 800b2de:	9105      	str	r1, [sp, #20]
 800b2e0:	e7c3      	b.n	800b26a <_vfiprintf_r+0x176>
 800b2e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e7f0      	b.n	800b2ce <_vfiprintf_r+0x1da>
 800b2ec:	ab03      	add	r3, sp, #12
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	462a      	mov	r2, r5
 800b2f2:	4b16      	ldr	r3, [pc, #88]	; (800b34c <_vfiprintf_r+0x258>)
 800b2f4:	a904      	add	r1, sp, #16
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f7fb fdf4 	bl	8006ee4 <_printf_float>
 800b2fc:	4607      	mov	r7, r0
 800b2fe:	1c78      	adds	r0, r7, #1
 800b300:	d1d6      	bne.n	800b2b0 <_vfiprintf_r+0x1bc>
 800b302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b304:	07d9      	lsls	r1, r3, #31
 800b306:	d405      	bmi.n	800b314 <_vfiprintf_r+0x220>
 800b308:	89ab      	ldrh	r3, [r5, #12]
 800b30a:	059a      	lsls	r2, r3, #22
 800b30c:	d402      	bmi.n	800b314 <_vfiprintf_r+0x220>
 800b30e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b310:	f7fe ff24 	bl	800a15c <__retarget_lock_release_recursive>
 800b314:	89ab      	ldrh	r3, [r5, #12]
 800b316:	065b      	lsls	r3, r3, #25
 800b318:	f53f af12 	bmi.w	800b140 <_vfiprintf_r+0x4c>
 800b31c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b31e:	e711      	b.n	800b144 <_vfiprintf_r+0x50>
 800b320:	ab03      	add	r3, sp, #12
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	462a      	mov	r2, r5
 800b326:	4b09      	ldr	r3, [pc, #36]	; (800b34c <_vfiprintf_r+0x258>)
 800b328:	a904      	add	r1, sp, #16
 800b32a:	4630      	mov	r0, r6
 800b32c:	f7fc f87e 	bl	800742c <_printf_i>
 800b330:	e7e4      	b.n	800b2fc <_vfiprintf_r+0x208>
 800b332:	bf00      	nop
 800b334:	0800be74 	.word	0x0800be74
 800b338:	0800be94 	.word	0x0800be94
 800b33c:	0800be54 	.word	0x0800be54
 800b340:	0800c08c 	.word	0x0800c08c
 800b344:	0800c096 	.word	0x0800c096
 800b348:	08006ee5 	.word	0x08006ee5
 800b34c:	0800b0cf 	.word	0x0800b0cf
 800b350:	0800c092 	.word	0x0800c092
 800b354:	00000000 	.word	0x00000000

0800b358 <nan>:
 800b358:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b360 <nan+0x8>
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	00000000 	.word	0x00000000
 800b364:	7ff80000 	.word	0x7ff80000

0800b368 <_sbrk_r>:
 800b368:	b538      	push	{r3, r4, r5, lr}
 800b36a:	4d06      	ldr	r5, [pc, #24]	; (800b384 <_sbrk_r+0x1c>)
 800b36c:	2300      	movs	r3, #0
 800b36e:	4604      	mov	r4, r0
 800b370:	4608      	mov	r0, r1
 800b372:	602b      	str	r3, [r5, #0]
 800b374:	f7f6 fe44 	bl	8002000 <_sbrk>
 800b378:	1c43      	adds	r3, r0, #1
 800b37a:	d102      	bne.n	800b382 <_sbrk_r+0x1a>
 800b37c:	682b      	ldr	r3, [r5, #0]
 800b37e:	b103      	cbz	r3, 800b382 <_sbrk_r+0x1a>
 800b380:	6023      	str	r3, [r4, #0]
 800b382:	bd38      	pop	{r3, r4, r5, pc}
 800b384:	200006ac 	.word	0x200006ac

0800b388 <__sread>:
 800b388:	b510      	push	{r4, lr}
 800b38a:	460c      	mov	r4, r1
 800b38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b390:	f000 f9fc 	bl	800b78c <_read_r>
 800b394:	2800      	cmp	r0, #0
 800b396:	bfab      	itete	ge
 800b398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b39a:	89a3      	ldrhlt	r3, [r4, #12]
 800b39c:	181b      	addge	r3, r3, r0
 800b39e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3a2:	bfac      	ite	ge
 800b3a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3a6:	81a3      	strhlt	r3, [r4, #12]
 800b3a8:	bd10      	pop	{r4, pc}

0800b3aa <__swrite>:
 800b3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ae:	461f      	mov	r7, r3
 800b3b0:	898b      	ldrh	r3, [r1, #12]
 800b3b2:	05db      	lsls	r3, r3, #23
 800b3b4:	4605      	mov	r5, r0
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	4616      	mov	r6, r2
 800b3ba:	d505      	bpl.n	800b3c8 <__swrite+0x1e>
 800b3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f000 f97a 	bl	800b6bc <_lseek_r>
 800b3c8:	89a3      	ldrh	r3, [r4, #12]
 800b3ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3d2:	81a3      	strh	r3, [r4, #12]
 800b3d4:	4632      	mov	r2, r6
 800b3d6:	463b      	mov	r3, r7
 800b3d8:	4628      	mov	r0, r5
 800b3da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3de:	f000 b88b 	b.w	800b4f8 <_write_r>

0800b3e2 <__sseek>:
 800b3e2:	b510      	push	{r4, lr}
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ea:	f000 f967 	bl	800b6bc <_lseek_r>
 800b3ee:	1c43      	adds	r3, r0, #1
 800b3f0:	89a3      	ldrh	r3, [r4, #12]
 800b3f2:	bf15      	itete	ne
 800b3f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3fe:	81a3      	strheq	r3, [r4, #12]
 800b400:	bf18      	it	ne
 800b402:	81a3      	strhne	r3, [r4, #12]
 800b404:	bd10      	pop	{r4, pc}

0800b406 <__sclose>:
 800b406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b40a:	f000 b913 	b.w	800b634 <_close_r>

0800b40e <strncmp>:
 800b40e:	b510      	push	{r4, lr}
 800b410:	b17a      	cbz	r2, 800b432 <strncmp+0x24>
 800b412:	4603      	mov	r3, r0
 800b414:	3901      	subs	r1, #1
 800b416:	1884      	adds	r4, r0, r2
 800b418:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b41c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b420:	4290      	cmp	r0, r2
 800b422:	d101      	bne.n	800b428 <strncmp+0x1a>
 800b424:	42a3      	cmp	r3, r4
 800b426:	d101      	bne.n	800b42c <strncmp+0x1e>
 800b428:	1a80      	subs	r0, r0, r2
 800b42a:	bd10      	pop	{r4, pc}
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d1f3      	bne.n	800b418 <strncmp+0xa>
 800b430:	e7fa      	b.n	800b428 <strncmp+0x1a>
 800b432:	4610      	mov	r0, r2
 800b434:	e7f9      	b.n	800b42a <strncmp+0x1c>
	...

0800b438 <__swbuf_r>:
 800b438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43a:	460e      	mov	r6, r1
 800b43c:	4614      	mov	r4, r2
 800b43e:	4605      	mov	r5, r0
 800b440:	b118      	cbz	r0, 800b44a <__swbuf_r+0x12>
 800b442:	6983      	ldr	r3, [r0, #24]
 800b444:	b90b      	cbnz	r3, 800b44a <__swbuf_r+0x12>
 800b446:	f7fe fa77 	bl	8009938 <__sinit>
 800b44a:	4b21      	ldr	r3, [pc, #132]	; (800b4d0 <__swbuf_r+0x98>)
 800b44c:	429c      	cmp	r4, r3
 800b44e:	d12b      	bne.n	800b4a8 <__swbuf_r+0x70>
 800b450:	686c      	ldr	r4, [r5, #4]
 800b452:	69a3      	ldr	r3, [r4, #24]
 800b454:	60a3      	str	r3, [r4, #8]
 800b456:	89a3      	ldrh	r3, [r4, #12]
 800b458:	071a      	lsls	r2, r3, #28
 800b45a:	d52f      	bpl.n	800b4bc <__swbuf_r+0x84>
 800b45c:	6923      	ldr	r3, [r4, #16]
 800b45e:	b36b      	cbz	r3, 800b4bc <__swbuf_r+0x84>
 800b460:	6923      	ldr	r3, [r4, #16]
 800b462:	6820      	ldr	r0, [r4, #0]
 800b464:	1ac0      	subs	r0, r0, r3
 800b466:	6963      	ldr	r3, [r4, #20]
 800b468:	b2f6      	uxtb	r6, r6
 800b46a:	4283      	cmp	r3, r0
 800b46c:	4637      	mov	r7, r6
 800b46e:	dc04      	bgt.n	800b47a <__swbuf_r+0x42>
 800b470:	4621      	mov	r1, r4
 800b472:	4628      	mov	r0, r5
 800b474:	f7fe f9cc 	bl	8009810 <_fflush_r>
 800b478:	bb30      	cbnz	r0, 800b4c8 <__swbuf_r+0x90>
 800b47a:	68a3      	ldr	r3, [r4, #8]
 800b47c:	3b01      	subs	r3, #1
 800b47e:	60a3      	str	r3, [r4, #8]
 800b480:	6823      	ldr	r3, [r4, #0]
 800b482:	1c5a      	adds	r2, r3, #1
 800b484:	6022      	str	r2, [r4, #0]
 800b486:	701e      	strb	r6, [r3, #0]
 800b488:	6963      	ldr	r3, [r4, #20]
 800b48a:	3001      	adds	r0, #1
 800b48c:	4283      	cmp	r3, r0
 800b48e:	d004      	beq.n	800b49a <__swbuf_r+0x62>
 800b490:	89a3      	ldrh	r3, [r4, #12]
 800b492:	07db      	lsls	r3, r3, #31
 800b494:	d506      	bpl.n	800b4a4 <__swbuf_r+0x6c>
 800b496:	2e0a      	cmp	r6, #10
 800b498:	d104      	bne.n	800b4a4 <__swbuf_r+0x6c>
 800b49a:	4621      	mov	r1, r4
 800b49c:	4628      	mov	r0, r5
 800b49e:	f7fe f9b7 	bl	8009810 <_fflush_r>
 800b4a2:	b988      	cbnz	r0, 800b4c8 <__swbuf_r+0x90>
 800b4a4:	4638      	mov	r0, r7
 800b4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4a8:	4b0a      	ldr	r3, [pc, #40]	; (800b4d4 <__swbuf_r+0x9c>)
 800b4aa:	429c      	cmp	r4, r3
 800b4ac:	d101      	bne.n	800b4b2 <__swbuf_r+0x7a>
 800b4ae:	68ac      	ldr	r4, [r5, #8]
 800b4b0:	e7cf      	b.n	800b452 <__swbuf_r+0x1a>
 800b4b2:	4b09      	ldr	r3, [pc, #36]	; (800b4d8 <__swbuf_r+0xa0>)
 800b4b4:	429c      	cmp	r4, r3
 800b4b6:	bf08      	it	eq
 800b4b8:	68ec      	ldreq	r4, [r5, #12]
 800b4ba:	e7ca      	b.n	800b452 <__swbuf_r+0x1a>
 800b4bc:	4621      	mov	r1, r4
 800b4be:	4628      	mov	r0, r5
 800b4c0:	f000 f82c 	bl	800b51c <__swsetup_r>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	d0cb      	beq.n	800b460 <__swbuf_r+0x28>
 800b4c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b4cc:	e7ea      	b.n	800b4a4 <__swbuf_r+0x6c>
 800b4ce:	bf00      	nop
 800b4d0:	0800be74 	.word	0x0800be74
 800b4d4:	0800be94 	.word	0x0800be94
 800b4d8:	0800be54 	.word	0x0800be54

0800b4dc <__ascii_wctomb>:
 800b4dc:	b149      	cbz	r1, 800b4f2 <__ascii_wctomb+0x16>
 800b4de:	2aff      	cmp	r2, #255	; 0xff
 800b4e0:	bf85      	ittet	hi
 800b4e2:	238a      	movhi	r3, #138	; 0x8a
 800b4e4:	6003      	strhi	r3, [r0, #0]
 800b4e6:	700a      	strbls	r2, [r1, #0]
 800b4e8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b4ec:	bf98      	it	ls
 800b4ee:	2001      	movls	r0, #1
 800b4f0:	4770      	bx	lr
 800b4f2:	4608      	mov	r0, r1
 800b4f4:	4770      	bx	lr
	...

0800b4f8 <_write_r>:
 800b4f8:	b538      	push	{r3, r4, r5, lr}
 800b4fa:	4d07      	ldr	r5, [pc, #28]	; (800b518 <_write_r+0x20>)
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	4608      	mov	r0, r1
 800b500:	4611      	mov	r1, r2
 800b502:	2200      	movs	r2, #0
 800b504:	602a      	str	r2, [r5, #0]
 800b506:	461a      	mov	r2, r3
 800b508:	f7f6 fbda 	bl	8001cc0 <_write>
 800b50c:	1c43      	adds	r3, r0, #1
 800b50e:	d102      	bne.n	800b516 <_write_r+0x1e>
 800b510:	682b      	ldr	r3, [r5, #0]
 800b512:	b103      	cbz	r3, 800b516 <_write_r+0x1e>
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	200006ac 	.word	0x200006ac

0800b51c <__swsetup_r>:
 800b51c:	4b32      	ldr	r3, [pc, #200]	; (800b5e8 <__swsetup_r+0xcc>)
 800b51e:	b570      	push	{r4, r5, r6, lr}
 800b520:	681d      	ldr	r5, [r3, #0]
 800b522:	4606      	mov	r6, r0
 800b524:	460c      	mov	r4, r1
 800b526:	b125      	cbz	r5, 800b532 <__swsetup_r+0x16>
 800b528:	69ab      	ldr	r3, [r5, #24]
 800b52a:	b913      	cbnz	r3, 800b532 <__swsetup_r+0x16>
 800b52c:	4628      	mov	r0, r5
 800b52e:	f7fe fa03 	bl	8009938 <__sinit>
 800b532:	4b2e      	ldr	r3, [pc, #184]	; (800b5ec <__swsetup_r+0xd0>)
 800b534:	429c      	cmp	r4, r3
 800b536:	d10f      	bne.n	800b558 <__swsetup_r+0x3c>
 800b538:	686c      	ldr	r4, [r5, #4]
 800b53a:	89a3      	ldrh	r3, [r4, #12]
 800b53c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b540:	0719      	lsls	r1, r3, #28
 800b542:	d42c      	bmi.n	800b59e <__swsetup_r+0x82>
 800b544:	06dd      	lsls	r5, r3, #27
 800b546:	d411      	bmi.n	800b56c <__swsetup_r+0x50>
 800b548:	2309      	movs	r3, #9
 800b54a:	6033      	str	r3, [r6, #0]
 800b54c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b550:	81a3      	strh	r3, [r4, #12]
 800b552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b556:	e03e      	b.n	800b5d6 <__swsetup_r+0xba>
 800b558:	4b25      	ldr	r3, [pc, #148]	; (800b5f0 <__swsetup_r+0xd4>)
 800b55a:	429c      	cmp	r4, r3
 800b55c:	d101      	bne.n	800b562 <__swsetup_r+0x46>
 800b55e:	68ac      	ldr	r4, [r5, #8]
 800b560:	e7eb      	b.n	800b53a <__swsetup_r+0x1e>
 800b562:	4b24      	ldr	r3, [pc, #144]	; (800b5f4 <__swsetup_r+0xd8>)
 800b564:	429c      	cmp	r4, r3
 800b566:	bf08      	it	eq
 800b568:	68ec      	ldreq	r4, [r5, #12]
 800b56a:	e7e6      	b.n	800b53a <__swsetup_r+0x1e>
 800b56c:	0758      	lsls	r0, r3, #29
 800b56e:	d512      	bpl.n	800b596 <__swsetup_r+0x7a>
 800b570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b572:	b141      	cbz	r1, 800b586 <__swsetup_r+0x6a>
 800b574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b578:	4299      	cmp	r1, r3
 800b57a:	d002      	beq.n	800b582 <__swsetup_r+0x66>
 800b57c:	4630      	mov	r0, r6
 800b57e:	f7ff fb53 	bl	800ac28 <_free_r>
 800b582:	2300      	movs	r3, #0
 800b584:	6363      	str	r3, [r4, #52]	; 0x34
 800b586:	89a3      	ldrh	r3, [r4, #12]
 800b588:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b58c:	81a3      	strh	r3, [r4, #12]
 800b58e:	2300      	movs	r3, #0
 800b590:	6063      	str	r3, [r4, #4]
 800b592:	6923      	ldr	r3, [r4, #16]
 800b594:	6023      	str	r3, [r4, #0]
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	f043 0308 	orr.w	r3, r3, #8
 800b59c:	81a3      	strh	r3, [r4, #12]
 800b59e:	6923      	ldr	r3, [r4, #16]
 800b5a0:	b94b      	cbnz	r3, 800b5b6 <__swsetup_r+0x9a>
 800b5a2:	89a3      	ldrh	r3, [r4, #12]
 800b5a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5ac:	d003      	beq.n	800b5b6 <__swsetup_r+0x9a>
 800b5ae:	4621      	mov	r1, r4
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	f7fe fdf9 	bl	800a1a8 <__smakebuf_r>
 800b5b6:	89a0      	ldrh	r0, [r4, #12]
 800b5b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5bc:	f010 0301 	ands.w	r3, r0, #1
 800b5c0:	d00a      	beq.n	800b5d8 <__swsetup_r+0xbc>
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	60a3      	str	r3, [r4, #8]
 800b5c6:	6963      	ldr	r3, [r4, #20]
 800b5c8:	425b      	negs	r3, r3
 800b5ca:	61a3      	str	r3, [r4, #24]
 800b5cc:	6923      	ldr	r3, [r4, #16]
 800b5ce:	b943      	cbnz	r3, 800b5e2 <__swsetup_r+0xc6>
 800b5d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b5d4:	d1ba      	bne.n	800b54c <__swsetup_r+0x30>
 800b5d6:	bd70      	pop	{r4, r5, r6, pc}
 800b5d8:	0781      	lsls	r1, r0, #30
 800b5da:	bf58      	it	pl
 800b5dc:	6963      	ldrpl	r3, [r4, #20]
 800b5de:	60a3      	str	r3, [r4, #8]
 800b5e0:	e7f4      	b.n	800b5cc <__swsetup_r+0xb0>
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	e7f7      	b.n	800b5d6 <__swsetup_r+0xba>
 800b5e6:	bf00      	nop
 800b5e8:	20000014 	.word	0x20000014
 800b5ec:	0800be74 	.word	0x0800be74
 800b5f0:	0800be94 	.word	0x0800be94
 800b5f4:	0800be54 	.word	0x0800be54

0800b5f8 <__assert_func>:
 800b5f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5fa:	4614      	mov	r4, r2
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	4b09      	ldr	r3, [pc, #36]	; (800b624 <__assert_func+0x2c>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4605      	mov	r5, r0
 800b604:	68d8      	ldr	r0, [r3, #12]
 800b606:	b14c      	cbz	r4, 800b61c <__assert_func+0x24>
 800b608:	4b07      	ldr	r3, [pc, #28]	; (800b628 <__assert_func+0x30>)
 800b60a:	9100      	str	r1, [sp, #0]
 800b60c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b610:	4906      	ldr	r1, [pc, #24]	; (800b62c <__assert_func+0x34>)
 800b612:	462b      	mov	r3, r5
 800b614:	f000 f81e 	bl	800b654 <fiprintf>
 800b618:	f000 f8ca 	bl	800b7b0 <abort>
 800b61c:	4b04      	ldr	r3, [pc, #16]	; (800b630 <__assert_func+0x38>)
 800b61e:	461c      	mov	r4, r3
 800b620:	e7f3      	b.n	800b60a <__assert_func+0x12>
 800b622:	bf00      	nop
 800b624:	20000014 	.word	0x20000014
 800b628:	0800c09d 	.word	0x0800c09d
 800b62c:	0800c0aa 	.word	0x0800c0aa
 800b630:	0800c0d8 	.word	0x0800c0d8

0800b634 <_close_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	4d06      	ldr	r5, [pc, #24]	; (800b650 <_close_r+0x1c>)
 800b638:	2300      	movs	r3, #0
 800b63a:	4604      	mov	r4, r0
 800b63c:	4608      	mov	r0, r1
 800b63e:	602b      	str	r3, [r5, #0]
 800b640:	f7f6 fb6a 	bl	8001d18 <_close>
 800b644:	1c43      	adds	r3, r0, #1
 800b646:	d102      	bne.n	800b64e <_close_r+0x1a>
 800b648:	682b      	ldr	r3, [r5, #0]
 800b64a:	b103      	cbz	r3, 800b64e <_close_r+0x1a>
 800b64c:	6023      	str	r3, [r4, #0]
 800b64e:	bd38      	pop	{r3, r4, r5, pc}
 800b650:	200006ac 	.word	0x200006ac

0800b654 <fiprintf>:
 800b654:	b40e      	push	{r1, r2, r3}
 800b656:	b503      	push	{r0, r1, lr}
 800b658:	4601      	mov	r1, r0
 800b65a:	ab03      	add	r3, sp, #12
 800b65c:	4805      	ldr	r0, [pc, #20]	; (800b674 <fiprintf+0x20>)
 800b65e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b662:	6800      	ldr	r0, [r0, #0]
 800b664:	9301      	str	r3, [sp, #4]
 800b666:	f7ff fd45 	bl	800b0f4 <_vfiprintf_r>
 800b66a:	b002      	add	sp, #8
 800b66c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b670:	b003      	add	sp, #12
 800b672:	4770      	bx	lr
 800b674:	20000014 	.word	0x20000014

0800b678 <_fstat_r>:
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	4d07      	ldr	r5, [pc, #28]	; (800b698 <_fstat_r+0x20>)
 800b67c:	2300      	movs	r3, #0
 800b67e:	4604      	mov	r4, r0
 800b680:	4608      	mov	r0, r1
 800b682:	4611      	mov	r1, r2
 800b684:	602b      	str	r3, [r5, #0]
 800b686:	f7f6 fb87 	bl	8001d98 <_fstat>
 800b68a:	1c43      	adds	r3, r0, #1
 800b68c:	d102      	bne.n	800b694 <_fstat_r+0x1c>
 800b68e:	682b      	ldr	r3, [r5, #0]
 800b690:	b103      	cbz	r3, 800b694 <_fstat_r+0x1c>
 800b692:	6023      	str	r3, [r4, #0]
 800b694:	bd38      	pop	{r3, r4, r5, pc}
 800b696:	bf00      	nop
 800b698:	200006ac 	.word	0x200006ac

0800b69c <_isatty_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4d06      	ldr	r5, [pc, #24]	; (800b6b8 <_isatty_r+0x1c>)
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	4608      	mov	r0, r1
 800b6a6:	602b      	str	r3, [r5, #0]
 800b6a8:	f7f6 faf4 	bl	8001c94 <_isatty>
 800b6ac:	1c43      	adds	r3, r0, #1
 800b6ae:	d102      	bne.n	800b6b6 <_isatty_r+0x1a>
 800b6b0:	682b      	ldr	r3, [r5, #0]
 800b6b2:	b103      	cbz	r3, 800b6b6 <_isatty_r+0x1a>
 800b6b4:	6023      	str	r3, [r4, #0]
 800b6b6:	bd38      	pop	{r3, r4, r5, pc}
 800b6b8:	200006ac 	.word	0x200006ac

0800b6bc <_lseek_r>:
 800b6bc:	b538      	push	{r3, r4, r5, lr}
 800b6be:	4d07      	ldr	r5, [pc, #28]	; (800b6dc <_lseek_r+0x20>)
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	4608      	mov	r0, r1
 800b6c4:	4611      	mov	r1, r2
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	602a      	str	r2, [r5, #0]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	f000 f8d4 	bl	800b878 <_lseek>
 800b6d0:	1c43      	adds	r3, r0, #1
 800b6d2:	d102      	bne.n	800b6da <_lseek_r+0x1e>
 800b6d4:	682b      	ldr	r3, [r5, #0]
 800b6d6:	b103      	cbz	r3, 800b6da <_lseek_r+0x1e>
 800b6d8:	6023      	str	r3, [r4, #0]
 800b6da:	bd38      	pop	{r3, r4, r5, pc}
 800b6dc:	200006ac 	.word	0x200006ac

0800b6e0 <memmove>:
 800b6e0:	4288      	cmp	r0, r1
 800b6e2:	b510      	push	{r4, lr}
 800b6e4:	eb01 0402 	add.w	r4, r1, r2
 800b6e8:	d902      	bls.n	800b6f0 <memmove+0x10>
 800b6ea:	4284      	cmp	r4, r0
 800b6ec:	4623      	mov	r3, r4
 800b6ee:	d807      	bhi.n	800b700 <memmove+0x20>
 800b6f0:	1e43      	subs	r3, r0, #1
 800b6f2:	42a1      	cmp	r1, r4
 800b6f4:	d008      	beq.n	800b708 <memmove+0x28>
 800b6f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6fe:	e7f8      	b.n	800b6f2 <memmove+0x12>
 800b700:	4402      	add	r2, r0
 800b702:	4601      	mov	r1, r0
 800b704:	428a      	cmp	r2, r1
 800b706:	d100      	bne.n	800b70a <memmove+0x2a>
 800b708:	bd10      	pop	{r4, pc}
 800b70a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b70e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b712:	e7f7      	b.n	800b704 <memmove+0x24>

0800b714 <__malloc_lock>:
 800b714:	4801      	ldr	r0, [pc, #4]	; (800b71c <__malloc_lock+0x8>)
 800b716:	f7fe bd20 	b.w	800a15a <__retarget_lock_acquire_recursive>
 800b71a:	bf00      	nop
 800b71c:	200006a0 	.word	0x200006a0

0800b720 <__malloc_unlock>:
 800b720:	4801      	ldr	r0, [pc, #4]	; (800b728 <__malloc_unlock+0x8>)
 800b722:	f7fe bd1b 	b.w	800a15c <__retarget_lock_release_recursive>
 800b726:	bf00      	nop
 800b728:	200006a0 	.word	0x200006a0

0800b72c <_realloc_r>:
 800b72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b730:	4680      	mov	r8, r0
 800b732:	4614      	mov	r4, r2
 800b734:	460e      	mov	r6, r1
 800b736:	b921      	cbnz	r1, 800b742 <_realloc_r+0x16>
 800b738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b73c:	4611      	mov	r1, r2
 800b73e:	f7ff badf 	b.w	800ad00 <_malloc_r>
 800b742:	b92a      	cbnz	r2, 800b750 <_realloc_r+0x24>
 800b744:	f7ff fa70 	bl	800ac28 <_free_r>
 800b748:	4625      	mov	r5, r4
 800b74a:	4628      	mov	r0, r5
 800b74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b750:	f000 f835 	bl	800b7be <_malloc_usable_size_r>
 800b754:	4284      	cmp	r4, r0
 800b756:	4607      	mov	r7, r0
 800b758:	d802      	bhi.n	800b760 <_realloc_r+0x34>
 800b75a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b75e:	d812      	bhi.n	800b786 <_realloc_r+0x5a>
 800b760:	4621      	mov	r1, r4
 800b762:	4640      	mov	r0, r8
 800b764:	f7ff facc 	bl	800ad00 <_malloc_r>
 800b768:	4605      	mov	r5, r0
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d0ed      	beq.n	800b74a <_realloc_r+0x1e>
 800b76e:	42bc      	cmp	r4, r7
 800b770:	4622      	mov	r2, r4
 800b772:	4631      	mov	r1, r6
 800b774:	bf28      	it	cs
 800b776:	463a      	movcs	r2, r7
 800b778:	f7fe fd70 	bl	800a25c <memcpy>
 800b77c:	4631      	mov	r1, r6
 800b77e:	4640      	mov	r0, r8
 800b780:	f7ff fa52 	bl	800ac28 <_free_r>
 800b784:	e7e1      	b.n	800b74a <_realloc_r+0x1e>
 800b786:	4635      	mov	r5, r6
 800b788:	e7df      	b.n	800b74a <_realloc_r+0x1e>
	...

0800b78c <_read_r>:
 800b78c:	b538      	push	{r3, r4, r5, lr}
 800b78e:	4d07      	ldr	r5, [pc, #28]	; (800b7ac <_read_r+0x20>)
 800b790:	4604      	mov	r4, r0
 800b792:	4608      	mov	r0, r1
 800b794:	4611      	mov	r1, r2
 800b796:	2200      	movs	r2, #0
 800b798:	602a      	str	r2, [r5, #0]
 800b79a:	461a      	mov	r2, r3
 800b79c:	f7f6 fad4 	bl	8001d48 <_read>
 800b7a0:	1c43      	adds	r3, r0, #1
 800b7a2:	d102      	bne.n	800b7aa <_read_r+0x1e>
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	b103      	cbz	r3, 800b7aa <_read_r+0x1e>
 800b7a8:	6023      	str	r3, [r4, #0]
 800b7aa:	bd38      	pop	{r3, r4, r5, pc}
 800b7ac:	200006ac 	.word	0x200006ac

0800b7b0 <abort>:
 800b7b0:	b508      	push	{r3, lr}
 800b7b2:	2006      	movs	r0, #6
 800b7b4:	f000 f834 	bl	800b820 <raise>
 800b7b8:	2001      	movs	r0, #1
 800b7ba:	f000 f865 	bl	800b888 <_exit>

0800b7be <_malloc_usable_size_r>:
 800b7be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7c2:	1f18      	subs	r0, r3, #4
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	bfbc      	itt	lt
 800b7c8:	580b      	ldrlt	r3, [r1, r0]
 800b7ca:	18c0      	addlt	r0, r0, r3
 800b7cc:	4770      	bx	lr

0800b7ce <_raise_r>:
 800b7ce:	291f      	cmp	r1, #31
 800b7d0:	b538      	push	{r3, r4, r5, lr}
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	460d      	mov	r5, r1
 800b7d6:	d904      	bls.n	800b7e2 <_raise_r+0x14>
 800b7d8:	2316      	movs	r3, #22
 800b7da:	6003      	str	r3, [r0, #0]
 800b7dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7e0:	bd38      	pop	{r3, r4, r5, pc}
 800b7e2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b7e4:	b112      	cbz	r2, 800b7ec <_raise_r+0x1e>
 800b7e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7ea:	b94b      	cbnz	r3, 800b800 <_raise_r+0x32>
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 f831 	bl	800b854 <_getpid_r>
 800b7f2:	462a      	mov	r2, r5
 800b7f4:	4601      	mov	r1, r0
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7fc:	f000 b818 	b.w	800b830 <_kill_r>
 800b800:	2b01      	cmp	r3, #1
 800b802:	d00a      	beq.n	800b81a <_raise_r+0x4c>
 800b804:	1c59      	adds	r1, r3, #1
 800b806:	d103      	bne.n	800b810 <_raise_r+0x42>
 800b808:	2316      	movs	r3, #22
 800b80a:	6003      	str	r3, [r0, #0]
 800b80c:	2001      	movs	r0, #1
 800b80e:	e7e7      	b.n	800b7e0 <_raise_r+0x12>
 800b810:	2400      	movs	r4, #0
 800b812:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b816:	4628      	mov	r0, r5
 800b818:	4798      	blx	r3
 800b81a:	2000      	movs	r0, #0
 800b81c:	e7e0      	b.n	800b7e0 <_raise_r+0x12>
	...

0800b820 <raise>:
 800b820:	4b02      	ldr	r3, [pc, #8]	; (800b82c <raise+0xc>)
 800b822:	4601      	mov	r1, r0
 800b824:	6818      	ldr	r0, [r3, #0]
 800b826:	f7ff bfd2 	b.w	800b7ce <_raise_r>
 800b82a:	bf00      	nop
 800b82c:	20000014 	.word	0x20000014

0800b830 <_kill_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	4d07      	ldr	r5, [pc, #28]	; (800b850 <_kill_r+0x20>)
 800b834:	2300      	movs	r3, #0
 800b836:	4604      	mov	r4, r0
 800b838:	4608      	mov	r0, r1
 800b83a:	4611      	mov	r1, r2
 800b83c:	602b      	str	r3, [r5, #0]
 800b83e:	f000 f813 	bl	800b868 <_kill>
 800b842:	1c43      	adds	r3, r0, #1
 800b844:	d102      	bne.n	800b84c <_kill_r+0x1c>
 800b846:	682b      	ldr	r3, [r5, #0]
 800b848:	b103      	cbz	r3, 800b84c <_kill_r+0x1c>
 800b84a:	6023      	str	r3, [r4, #0]
 800b84c:	bd38      	pop	{r3, r4, r5, pc}
 800b84e:	bf00      	nop
 800b850:	200006ac 	.word	0x200006ac

0800b854 <_getpid_r>:
 800b854:	f000 b800 	b.w	800b858 <_getpid>

0800b858 <_getpid>:
 800b858:	4b02      	ldr	r3, [pc, #8]	; (800b864 <_getpid+0xc>)
 800b85a:	2258      	movs	r2, #88	; 0x58
 800b85c:	601a      	str	r2, [r3, #0]
 800b85e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b862:	4770      	bx	lr
 800b864:	200006ac 	.word	0x200006ac

0800b868 <_kill>:
 800b868:	4b02      	ldr	r3, [pc, #8]	; (800b874 <_kill+0xc>)
 800b86a:	2258      	movs	r2, #88	; 0x58
 800b86c:	601a      	str	r2, [r3, #0]
 800b86e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b872:	4770      	bx	lr
 800b874:	200006ac 	.word	0x200006ac

0800b878 <_lseek>:
 800b878:	4b02      	ldr	r3, [pc, #8]	; (800b884 <_lseek+0xc>)
 800b87a:	2258      	movs	r2, #88	; 0x58
 800b87c:	601a      	str	r2, [r3, #0]
 800b87e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b882:	4770      	bx	lr
 800b884:	200006ac 	.word	0x200006ac

0800b888 <_exit>:
 800b888:	e7fe      	b.n	800b888 <_exit>
	...

0800b88c <_init>:
 800b88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b88e:	bf00      	nop
 800b890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b892:	bc08      	pop	{r3}
 800b894:	469e      	mov	lr, r3
 800b896:	4770      	bx	lr

0800b898 <_fini>:
 800b898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89a:	bf00      	nop
 800b89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b89e:	bc08      	pop	{r3}
 800b8a0:	469e      	mov	lr, r3
 800b8a2:	4770      	bx	lr
